
STROJ_ZA_SORTIRANJE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  080054b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  2000007c  08005534  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001ec  08005534  000201ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d70e  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f67  00000000  00000000  0002d7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000dd8  00000000  00000000  0002f720  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce0  00000000  00000000  000304f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d63  00000000  00000000  000311d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004037  00000000  00000000  00036f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003af72  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000428c  00000000  00000000  0003aff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080053b0 	.word	0x080053b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080053b0 	.word	0x080053b0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_f2iz>:
 8000984:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000988:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800098c:	d30f      	bcc.n	80009ae <__aeabi_f2iz+0x2a>
 800098e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000992:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000996:	d90d      	bls.n	80009b4 <__aeabi_f2iz+0x30>
 8000998:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800099c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a4:	fa23 f002 	lsr.w	r0, r3, r2
 80009a8:	bf18      	it	ne
 80009aa:	4240      	negne	r0, r0
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr
 80009b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009b8:	d101      	bne.n	80009be <__aeabi_f2iz+0x3a>
 80009ba:	0242      	lsls	r2, r0, #9
 80009bc:	d105      	bne.n	80009ca <__aeabi_f2iz+0x46>
 80009be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009c2:	bf08      	it	eq
 80009c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c8:	4770      	bx	lr
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	4770      	bx	lr

080009d0 <__aeabi_f2uiz>:
 80009d0:	0042      	lsls	r2, r0, #1
 80009d2:	d20e      	bcs.n	80009f2 <__aeabi_f2uiz+0x22>
 80009d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009d8:	d30b      	bcc.n	80009f2 <__aeabi_f2uiz+0x22>
 80009da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009e2:	d409      	bmi.n	80009f8 <__aeabi_f2uiz+0x28>
 80009e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ec:	fa23 f002 	lsr.w	r0, r3, r2
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr
 80009f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009fc:	d101      	bne.n	8000a02 <__aeabi_f2uiz+0x32>
 80009fe:	0242      	lsls	r2, r0, #9
 8000a00:	d102      	bne.n	8000a08 <__aeabi_f2uiz+0x38>
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295
 8000a06:	4770      	bx	lr
 8000a08:	f04f 0000 	mov.w	r0, #0
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 fc59 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f003 fabe 	bl	8003fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fc71 	bl	8001342 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 fc39 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000014 	.word	0x20000014
 8000a94:	20000004 	.word	0x20000004
 8000a98:	20000000 	.word	0x20000000

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	200000b0 	.word	0x200000b0

08000ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	200000b0 	.word	0x200000b0

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fff0 	bl	8000ac0 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_Delay+0x40>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffe0 	bl	8000ac0 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d3f7      	bcc.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0be      	b.n	8000cb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f003 fa5a 	bl	8004010 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fab7 	bl	80010d0 <ADC_ConversionStop_Disable>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8099 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8095 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b1b      	ldrb	r3, [r3, #12]
 8000b9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb0:	d003      	beq.n	8000bba <HAL_ADC_Init+0xa2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d102      	bne.n	8000bc0 <HAL_ADC_Init+0xa8>
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	e000      	b.n	8000bc2 <HAL_ADC_Init+0xaa>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7d1b      	ldrb	r3, [r3, #20]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d119      	bne.n	8000c04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7b1b      	ldrb	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	035a      	lsls	r2, r3, #13
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e00b      	b.n	8000c04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f043 0220 	orr.w	r2, r3, #32
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	6852      	ldr	r2, [r2, #4]
 8000c0e:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6899      	ldr	r1, [r3, #8]
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_ADC_Init+0x1a8>)
 8000c24:	400b      	ands	r3, r1
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_Init+0x126>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d104      	bne.n	8000c48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	051b      	lsls	r3, r3, #20
 8000c46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c52:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_Init+0x1ac>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d10b      	bne.n	8000c84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c82:	e018      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f023 0312 	bic.w	r3, r3, #18
 8000c8c:	f043 0210 	orr.w	r2, r3, #16
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca4:	e007      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc4:	ff1f0efe 	.word	0xff1f0efe

08000cc8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_ADC_Start+0x1a>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e098      	b.n	8000e14 <HAL_ADC_Start+0x14c>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f99e 	bl	800102c <ADC_Enable>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8087 	bne.w	8000e0a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <HAL_ADC_Start+0x154>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d105      	bne.n	8000d26 <HAL_ADC_Start+0x5e>
 8000d1a:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <HAL_ADC_Start+0x158>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d115      	bne.n	8000d52 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d026      	beq.n	8000d8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d50:	e01d      	b.n	8000d8e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <HAL_ADC_Start+0x158>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d004      	beq.n	8000d72 <HAL_ADC_Start+0xaa>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <HAL_ADC_Start+0x154>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10d      	bne.n	8000d8e <HAL_ADC_Start+0xc6>
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_ADC_Start+0x158>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9e:	f023 0206 	bic.w	r2, r3, #6
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da6:	e002      	b.n	8000dae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f06f 0202 	mvn.w	r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dce:	d113      	bne.n	8000df8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_ADC_Start+0x154>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d105      	bne.n	8000de6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_ADC_Start+0x158>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d108      	bne.n	8000df8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	6892      	ldr	r2, [r2, #8]
 8000df0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	e00c      	b.n	8000e12 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	6892      	ldr	r2, [r2, #8]
 8000e02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	e003      	b.n	8000e12 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40012800 	.word	0x40012800
 8000e20:	40012400 	.word	0x40012400

08000e24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e3c:	b490      	push	{r4, r7}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x20>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e0dc      	b.n	8001016 <HAL_ADC_ConfigChannel+0x1da>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d81c      	bhi.n	8000ea6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	3b05      	subs	r3, #5
 8000e82:	221f      	movs	r2, #31
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4018      	ands	r0, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681c      	ldr	r4, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b05      	subs	r3, #5
 8000e9c:	fa04 f303 	lsl.w	r3, r4, r3
 8000ea0:	4303      	orrs	r3, r0
 8000ea2:	634b      	str	r3, [r1, #52]	; 0x34
 8000ea4:	e03c      	b.n	8000f20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b0c      	cmp	r3, #12
 8000eac:	d81c      	bhi.n	8000ee8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3b23      	subs	r3, #35	; 0x23
 8000ec4:	221f      	movs	r2, #31
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4018      	ands	r0, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681c      	ldr	r4, [r3, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3b23      	subs	r3, #35	; 0x23
 8000ede:	fa04 f303 	lsl.w	r3, r4, r3
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	630b      	str	r3, [r1, #48]	; 0x30
 8000ee6:	e01b      	b.n	8000f20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3b41      	subs	r3, #65	; 0x41
 8000efe:	221f      	movs	r2, #31
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4018      	ands	r0, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	3b41      	subs	r3, #65	; 0x41
 8000f18:	fa04 f303 	lsl.w	r3, r4, r3
 8000f1c:	4303      	orrs	r3, r0
 8000f1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d91c      	bls.n	8000f62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68d8      	ldr	r0, [r3, #12]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b1e      	subs	r3, #30
 8000f3e:	2207      	movs	r2, #7
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4018      	ands	r0, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689c      	ldr	r4, [r3, #8]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	3b1e      	subs	r3, #30
 8000f58:	fa04 f303 	lsl.w	r3, r4, r3
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	60cb      	str	r3, [r1, #12]
 8000f60:	e019      	b.n	8000f96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6918      	ldr	r0, [r3, #16]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4018      	ands	r0, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689c      	ldr	r4, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	fa04 f303 	lsl.w	r3, r4, r3
 8000f92:	4303      	orrs	r3, r0
 8000f94:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b10      	cmp	r3, #16
 8000f9c:	d003      	beq.n	8000fa6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fa2:	2b11      	cmp	r3, #17
 8000fa4:	d132      	bne.n	800100c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d125      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d126      	bne.n	800100c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	6892      	ldr	r2, [r2, #8]
 8000fc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fcc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d11a      	bne.n	800100c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	0c9a      	lsrs	r2, r3, #18
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f9      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x1b2>
 8000ffa:	e007      	b.n	800100c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f043 0220 	orr.w	r2, r3, #32
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bc90      	pop	{r4, r7}
 800101e:	4770      	bx	lr
 8001020:	40012400 	.word	0x40012400
 8001024:	20000014 	.word	0x20000014
 8001028:	431bde83 	.word	0x431bde83

0800102c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d039      	beq.n	80010be <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	6892      	ldr	r2, [r2, #8]
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <ADC_Enable+0x9c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <ADC_Enable+0xa0>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0c9b      	lsrs	r3, r3, #18
 8001066:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001068:	e002      	b.n	8001070 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3b01      	subs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001076:	f7ff fd23 	bl	8000ac0 <HAL_GetTick>
 800107a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800107c:	e018      	b.n	80010b0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800107e:	f7ff fd1f 	bl	8000ac0 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d911      	bls.n	80010b0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f043 0210 	orr.w	r2, r3, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e007      	b.n	80010c0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d1df      	bne.n	800107e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000014 	.word	0x20000014
 80010cc:	431bde83 	.word	0x431bde83

080010d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d127      	bne.n	800113a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	6892      	ldr	r2, [r2, #8]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010fa:	f7ff fce1 	bl	8000ac0 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001100:	e014      	b.n	800112c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001102:	f7ff fcdd 	bl	8000ac0 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d90d      	bls.n	800112c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f043 0210 	orr.w	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e007      	b.n	800113c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b01      	cmp	r3, #1
 8001138:	d0e3      	beq.n	8001102 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_EnableIRQ+0x34>)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	095b      	lsrs	r3, r3, #5
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	f002 021f 	and.w	r2, r2, #31
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	490d      	ldr	r1, [pc, #52]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	4909      	ldr	r1, [pc, #36]	; (8001230 <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	2201      	movs	r2, #1
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	401a      	ands	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127a:	2101      	movs	r1, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	1e59      	subs	r1, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff92 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff2f 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff44 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff92 	bl	8001234 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff61 	bl	80011e0 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff37 	bl	80011a8 <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800136e:	2b02      	cmp	r3, #2
 8001370:	d005      	beq.n	800137e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2204      	movs	r2, #4
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e057      	b.n	800142e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f022 020e 	bic.w	r2, r2, #14
 800138c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800139e:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_DMA_Abort_IT+0xdc>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_DMA_Abort_IT+0xe0>)
 80013a8:	4299      	cmp	r1, r3
 80013aa:	d02e      	beq.n	800140a <HAL_DMA_Abort_IT+0xae>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_DMA_Abort_IT+0xe4>)
 80013b4:	4299      	cmp	r1, r3
 80013b6:	d026      	beq.n	8001406 <HAL_DMA_Abort_IT+0xaa>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_DMA_Abort_IT+0xe8>)
 80013c0:	4299      	cmp	r1, r3
 80013c2:	d01d      	beq.n	8001400 <HAL_DMA_Abort_IT+0xa4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_DMA_Abort_IT+0xec>)
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d014      	beq.n	80013fa <HAL_DMA_Abort_IT+0x9e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_DMA_Abort_IT+0xf0>)
 80013d8:	4299      	cmp	r1, r3
 80013da:	d00b      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x98>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_DMA_Abort_IT+0xf4>)
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d102      	bne.n	80013ee <HAL_DMA_Abort_IT+0x92>
 80013e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ec:	e00e      	b.n	800140c <HAL_DMA_Abort_IT+0xb0>
 80013ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f2:	e00b      	b.n	800140c <HAL_DMA_Abort_IT+0xb0>
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	e008      	b.n	800140c <HAL_DMA_Abort_IT+0xb0>
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	e005      	b.n	800140c <HAL_DMA_Abort_IT+0xb0>
 8001400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001404:	e002      	b.n	800140c <HAL_DMA_Abort_IT+0xb0>
 8001406:	2310      	movs	r3, #16
 8001408:	e000      	b.n	800140c <HAL_DMA_Abort_IT+0xb0>
 800140a:	2301      	movs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
    } 
  }
  return status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020000 	.word	0x40020000
 800143c:	40020008 	.word	0x40020008
 8001440:	4002001c 	.word	0x4002001c
 8001444:	40020030 	.word	0x40020030
 8001448:	40020044 	.word	0x40020044
 800144c:	40020058 	.word	0x40020058
 8001450:	4002006c 	.word	0x4002006c

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e127      	b.n	80016b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001468:	2201      	movs	r2, #1
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8116 	bne.w	80016b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b12      	cmp	r3, #18
 800148c:	d034      	beq.n	80014f8 <HAL_GPIO_Init+0xa4>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d80d      	bhi.n	80014ae <HAL_GPIO_Init+0x5a>
 8001492:	2b02      	cmp	r3, #2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x9a>
 8001496:	2b02      	cmp	r3, #2
 8001498:	d804      	bhi.n	80014a4 <HAL_GPIO_Init+0x50>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d031      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d01c      	beq.n	80014dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e048      	b.n	8001536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d043      	beq.n	8001530 <HAL_GPIO_Init+0xdc>
 80014a8:	2b11      	cmp	r3, #17
 80014aa:	d01b      	beq.n	80014e4 <HAL_GPIO_Init+0x90>
          break;
 80014ac:	e043      	b.n	8001536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ae:	4a89      	ldr	r2, [pc, #548]	; (80016d4 <HAL_GPIO_Init+0x280>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d026      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014b4:	4a87      	ldr	r2, [pc, #540]	; (80016d4 <HAL_GPIO_Init+0x280>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d806      	bhi.n	80014c8 <HAL_GPIO_Init+0x74>
 80014ba:	4a87      	ldr	r2, [pc, #540]	; (80016d8 <HAL_GPIO_Init+0x284>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d020      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014c0:	4a86      	ldr	r2, [pc, #536]	; (80016dc <HAL_GPIO_Init+0x288>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01d      	beq.n	8001502 <HAL_GPIO_Init+0xae>
          break;
 80014c6:	e036      	b.n	8001536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014c8:	4a85      	ldr	r2, [pc, #532]	; (80016e0 <HAL_GPIO_Init+0x28c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014ce:	4a85      	ldr	r2, [pc, #532]	; (80016e4 <HAL_GPIO_Init+0x290>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d016      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014d4:	4a84      	ldr	r2, [pc, #528]	; (80016e8 <HAL_GPIO_Init+0x294>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0xae>
          break;
 80014da:	e02c      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e028      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	3304      	adds	r3, #4
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e023      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	3308      	adds	r3, #8
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e01e      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	330c      	adds	r3, #12
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e019      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150a:	2304      	movs	r3, #4
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e012      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	611a      	str	r2, [r3, #16]
          break;
 8001522:	e008      	b.n	8001536 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001524:	2308      	movs	r3, #8
 8001526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	615a      	str	r2, [r3, #20]
          break;
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2bff      	cmp	r3, #255	; 0xff
 800153a:	d801      	bhi.n	8001540 <HAL_GPIO_Init+0xec>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e001      	b.n	8001544 <HAL_GPIO_Init+0xf0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2bff      	cmp	r3, #255	; 0xff
 800154a:	d802      	bhi.n	8001552 <HAL_GPIO_Init+0xfe>
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x104>
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	3b08      	subs	r3, #8
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	210f      	movs	r1, #15
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	6a39      	ldr	r1, [r7, #32]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	431a      	orrs	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8096 	beq.w	80016b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001586:	4a59      	ldr	r2, [pc, #356]	; (80016ec <HAL_GPIO_Init+0x298>)
 8001588:	4b58      	ldr	r3, [pc, #352]	; (80016ec <HAL_GPIO_Init+0x298>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_GPIO_Init+0x298>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x29c>)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x19e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x19a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a49      	ldr	r2, [pc, #292]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x196>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a48      	ldr	r2, [pc, #288]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x192>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015f2:	2300      	movs	r3, #0
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001604:	493a      	ldr	r1, [pc, #232]	; (80016f0 <HAL_GPIO_Init+0x29c>)
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161e:	4939      	ldr	r1, [pc, #228]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	4013      	ands	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001646:	492f      	ldr	r1, [pc, #188]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
 8001652:	e006      	b.n	8001662 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001654:	492b      	ldr	r1, [pc, #172]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4013      	ands	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800166e:	4925      	ldr	r1, [pc, #148]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167c:	4921      	ldr	r1, [pc, #132]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4013      	ands	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001696:	491b      	ldr	r1, [pc, #108]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
 80016a2:	e006      	b.n	80016b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a4:	4917      	ldr	r1, [pc, #92]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f aed0 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	372c      	adds	r7, #44	; 0x2c
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	10210000 	.word	0x10210000
 80016d8:	10110000 	.word	0x10110000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10310000 	.word	0x10310000
 80016e4:	10320000 	.word	0x10320000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e001      	b.n	800172a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001746:	787b      	ldrb	r3, [r7, #1]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001752:	e003      	b.n	800175c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	041a      	lsls	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	611a      	str	r2, [r3, #16]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e26c      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b04      	cmp	r3, #4
 8001792:	d00c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001794:	4b8f      	ldr	r3, [pc, #572]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d10b      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06c      	beq.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d168      	bne.n	8001894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e246      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	4a80      	ldr	r2, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	4b80      	ldr	r3, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e02e      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4a7b      	ldr	r2, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4a78      	ldr	r2, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	4b77      	ldr	r3, [pc, #476]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xbc>
 800180a:	4a72      	ldr	r2, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	4b71      	ldr	r3, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4a6f      	ldr	r2, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001824:	4a6b      	ldr	r2, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4a68      	ldr	r2, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001832:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff f93c 	bl	8000ac0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff f938 	bl	8000ac0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1fa      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xe4>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff f928 	bl	8000ac0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff f924 	bl	8000ac0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1e6      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1ba      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	493d      	ldr	r1, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f8dd 	bl	8000ac0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff f8d9 	bl	8000ac0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e19b      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	492a      	ldr	r1, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f8bc 	bl	8000ac0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff f8b8 	bl	8000ac0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e17a      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03a      	beq.n	80019ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f89c 	bl	8000ac0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff f898 	bl	8000ac0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e15a      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f000 fada 	bl	8001f64 <RCC_Delay>
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f882 	bl	8000ac0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f87e 	bl	8000ac0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e140      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	42420000 	.word	0x42420000
 80019dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b9e      	ldr	r3, [pc, #632]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a6 	beq.w	8001b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b97      	ldr	r3, [pc, #604]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4a94      	ldr	r2, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4a8b      	ldr	r2, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f83f 	bl	8000ac0 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff f83b 	bl	8000ac0 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0fd      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x312>
 8001a6c:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	4b7b      	ldr	r3, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001a82:	4a76      	ldr	r2, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4a73      	ldr	r2, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x356>
 8001aa4:	4a6d      	ldr	r2, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001abe:	4a67      	ldr	r2, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7fe ffef 	bl	8000ac0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe ffeb 	bl	8000ac0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0ab      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x37e>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7fe ffd9 	bl	8000ac0 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe ffd5 	bl	8000ac0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e095      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8081 	beq.w	8001c52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d061      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d146      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7fe ffa9 	bl	8000ac0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7fe ffa5 	bl	8000ac0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e067      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9a:	4930      	ldr	r1, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	482b      	ldr	r0, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a19      	ldr	r1, [r3, #32]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7fe ff79 	bl	8000ac0 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7fe ff75 	bl	8000ac0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e037      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46a>
 8001bf0:	e02f      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7fe ff62 	bl	8000ac0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe ff5e 	bl	8000ac0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e020      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x498>
 8001c1e:	e018      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e013      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42420060 	.word	0x42420060

08001c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d0      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0207 	and.w	r2, r3, #7
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d210      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4967      	ldr	r1, [pc, #412]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0207 	bic.w	r2, r3, #7
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0207 	and.w	r2, r3, #7
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4a53      	ldr	r2, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4950      	ldr	r1, [pc, #320]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d040      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e073      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4939      	ldr	r1, [pc, #228]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 0203 	bic.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7fe feb2 	bl	8000ac0 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7fe feae 	bl	8000ac0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e053      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0207 	and.w	r2, r3, #7
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4924      	ldr	r1, [pc, #144]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 0207 	bic.w	r2, r3, #7
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4919      	ldr	r1, [pc, #100]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de2:	4912      	ldr	r1, [pc, #72]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f821 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1cc>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe10 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08005400 	.word	0x08005400
 8001e34:	20000014 	.word	0x20000014
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b490      	push	{r4, r7}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e44:	1d3c      	adds	r4, r7, #4
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x40>
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7a:	e02d      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7e:	623b      	str	r3, [r7, #32]
      break;
 8001e80:	e02d      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	0c9b      	lsrs	r3, r3, #18
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e8e:	4413      	add	r3, r2
 8001e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c5b      	lsrs	r3, r3, #17
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eba:	fb02 f203 	mul.w	r2, r2, r3
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	e004      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	623b      	str	r3, [r7, #32]
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc90      	pop	{r4, r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	080053c8 	.word	0x080053c8
 8001ef0:	080053d8 	.word	0x080053d8
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	007a1200 	.word	0x007a1200
 8001efc:	003d0900 	.word	0x003d0900

08001f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	20000014 	.word	0x20000014

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f18:	f7ff fff2 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08005410 	.word	0x08005410

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f44:	4601      	mov	r1, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0adb      	lsrs	r3, r3, #11
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08005410 	.word	0x08005410

08001f64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <RCC_Delay+0x34>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <RCC_Delay+0x38>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0a5b      	lsrs	r3, r3, #9
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f80:	bf00      	nop
  }
  while (Delay --);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e5a      	subs	r2, r3, #1
 8001f86:	60fa      	str	r2, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f9      	bne.n	8001f80 <RCC_Delay+0x1c>
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000014 	.word	0x20000014
 8001f9c:	10624dd3 	.word	0x10624dd3

08001fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d07d      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	61d3      	str	r3, [r2, #28]
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d118      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff4:	4a43      	ldr	r2, [pc, #268]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ff6:	4b43      	ldr	r3, [pc, #268]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002000:	f7fe fd5e 	bl	8000ac0 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	e008      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7fe fd5a 	bl	8000ac0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e06d      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d02e      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d027      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002054:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800205a:	4a29      	ldr	r2, [pc, #164]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fd29 	bl	8000ac0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe fd25 	bl	8000ac0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e036      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ee      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002094:	491a      	ldr	r1, [pc, #104]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e2:	4907      	ldr	r1, [pc, #28]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	42420440 	.word	0x42420440

0800210c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e01d      	b.n	800215a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f001 ffa8 	bl	8004088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f000 fa10 	bl	8002570 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d007      	beq.n	8002194 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01d      	b.n	80021f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f815 	bl	80021fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f000 f9c2 	bl	8002570 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fc24 	bl	8002a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_TIM_PWM_Start+0x60>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d107      	bne.n	8002242 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800223c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d007      	beq.n	8002264 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00

08002274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800228a:	2302      	movs	r3, #2
 800228c:	e0b4      	b.n	80023f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	f200 809f 	bhi.w	80023e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022e1 	.word	0x080022e1
 80022b0:	080023e5 	.word	0x080023e5
 80022b4:	080023e5 	.word	0x080023e5
 80022b8:	080023e5 	.word	0x080023e5
 80022bc:	08002321 	.word	0x08002321
 80022c0:	080023e5 	.word	0x080023e5
 80022c4:	080023e5 	.word	0x080023e5
 80022c8:	080023e5 	.word	0x080023e5
 80022cc:	08002363 	.word	0x08002363
 80022d0:	080023e5 	.word	0x080023e5
 80022d4:	080023e5 	.word	0x080023e5
 80022d8:	080023e5 	.word	0x080023e5
 80022dc:	080023a3 	.word	0x080023a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f9a4 	bl	8002634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	6992      	ldr	r2, [r2, #24]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	6992      	ldr	r2, [r2, #24]
 8002306:	f022 0204 	bic.w	r2, r2, #4
 800230a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	6991      	ldr	r1, [r2, #24]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	6912      	ldr	r2, [r2, #16]
 800231a:	430a      	orrs	r2, r1
 800231c:	619a      	str	r2, [r3, #24]
      break;
 800231e:	e062      	b.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f9ea 	bl	8002700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	6992      	ldr	r2, [r2, #24]
 8002336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	6992      	ldr	r2, [r2, #24]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	6991      	ldr	r1, [r2, #24]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	6912      	ldr	r2, [r2, #16]
 800235a:	0212      	lsls	r2, r2, #8
 800235c:	430a      	orrs	r2, r1
 800235e:	619a      	str	r2, [r3, #24]
      break;
 8002360:	e041      	b.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fa33 	bl	80027d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	69d2      	ldr	r2, [r2, #28]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	69d2      	ldr	r2, [r2, #28]
 8002388:	f022 0204 	bic.w	r2, r2, #4
 800238c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	69d1      	ldr	r1, [r2, #28]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	6912      	ldr	r2, [r2, #16]
 800239c:	430a      	orrs	r2, r1
 800239e:	61da      	str	r2, [r3, #28]
      break;
 80023a0:	e021      	b.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa7d 	bl	80028a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	69d2      	ldr	r2, [r2, #28]
 80023b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	69d2      	ldr	r2, [r2, #28]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	69d1      	ldr	r1, [r2, #28]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	6912      	ldr	r2, [r2, #16]
 80023dc:	0212      	lsls	r2, r2, #8
 80023de:	430a      	orrs	r2, r1
 80023e0:	61da      	str	r2, [r3, #28]
      break;
 80023e2:	e000      	b.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80023e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_TIM_ConfigClockSource+0x18>
 8002414:	2302      	movs	r3, #2
 8002416:	e0a6      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x166>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800243e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d067      	beq.n	8002520 <HAL_TIM_ConfigClockSource+0x120>
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d80b      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x6c>
 8002454:	2b10      	cmp	r3, #16
 8002456:	d073      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0x140>
 8002458:	2b10      	cmp	r3, #16
 800245a:	d802      	bhi.n	8002462 <HAL_TIM_ConfigClockSource+0x62>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d06f      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002460:	e078      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002462:	2b20      	cmp	r3, #32
 8002464:	d06c      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0x140>
 8002466:	2b30      	cmp	r3, #48	; 0x30
 8002468:	d06a      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800246a:	e073      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800246c:	2b70      	cmp	r3, #112	; 0x70
 800246e:	d00d      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x8c>
 8002470:	2b70      	cmp	r3, #112	; 0x70
 8002472:	d804      	bhi.n	800247e <HAL_TIM_ConfigClockSource+0x7e>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d033      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xe0>
 8002478:	2b60      	cmp	r3, #96	; 0x60
 800247a:	d041      	beq.n	8002500 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800247c:	e06a      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d066      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x152>
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002488:	d017      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800248a:	e063      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f000 fac9 	bl	8002a32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]
      break;
 80024b8:	e04c      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f000 fab2 	bl	8002a32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	6892      	ldr	r2, [r2, #8]
 80024d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e039      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	461a      	mov	r2, r3
 80024ee:	f000 fa29 	bl	8002944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2150      	movs	r1, #80	; 0x50
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fa80 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 80024fe:	e029      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	461a      	mov	r2, r3
 800250e:	f000 fa47 	bl	80029a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2160      	movs	r1, #96	; 0x60
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fa70 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 800251e:	e019      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	461a      	mov	r2, r3
 800252e:	f000 fa09 	bl	8002944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fa60 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 800253e:	e009      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f000 fa57 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 8002550:	e000      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a29      	ldr	r2, [pc, #164]	; (8002628 <TIM_Base_SetConfig+0xb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00b      	beq.n	80025a0 <TIM_Base_SetConfig+0x30>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d007      	beq.n	80025a0 <TIM_Base_SetConfig+0x30>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a26      	ldr	r2, [pc, #152]	; (800262c <TIM_Base_SetConfig+0xbc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_Base_SetConfig+0x30>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a25      	ldr	r2, [pc, #148]	; (8002630 <TIM_Base_SetConfig+0xc0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d108      	bne.n	80025b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <TIM_Base_SetConfig+0xb8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0x62>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0x62>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <TIM_Base_SetConfig+0xbc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a18      	ldr	r2, [pc, #96]	; (8002630 <TIM_Base_SetConfig+0xc0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <TIM_Base_SetConfig+0xb8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d103      	bne.n	8002618 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	615a      	str	r2, [r3, #20]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800

08002634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f023 0201 	bic.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <TIM_OC1_SetConfig+0xc8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d10c      	bne.n	80026aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0308 	bic.w	r3, r3, #8
 8002696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a13      	ldr	r2, [pc, #76]	; (80026fc <TIM_OC1_SetConfig+0xc8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d111      	bne.n	80026d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40012c00 	.word	0x40012c00

08002700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f023 0210 	bic.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800272e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f023 0320 	bic.w	r3, r3, #32
 800274a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <TIM_OC2_SetConfig+0xd0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10d      	bne.n	800277c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800277a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <TIM_OC2_SetConfig+0xd0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d113      	bne.n	80027ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800278a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00

080027d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800281c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <TIM_OC3_SetConfig+0xd0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10d      	bne.n	800284e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800284c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <TIM_OC3_SetConfig+0xd0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d113      	bne.n	800287e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800285c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	621a      	str	r2, [r3, #32]
}
 8002898:	bf00      	nop
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00

080028a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <TIM_OC4_SetConfig+0x98>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d109      	bne.n	800291c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800290e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	40012c00 	.word	0x40012c00

08002944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f023 0201 	bic.w	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 030a 	bic.w	r3, r3, #10
 8002980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 0210 	bic.w	r2, r3, #16
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	031b      	lsls	r3, r3, #12
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f043 0307 	orr.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b087      	sub	sp, #28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	021a      	lsls	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2201      	movs	r2, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e032      	b.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b08:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e03d      	b.n	8002bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e03f      	b.n	8002c74 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f001 fa9b 	bl	8004144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2224      	movs	r2, #36	; 0x24
 8002c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	68d2      	ldr	r2, [r2, #12]
 8002c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fb40 	bl	80032ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	6912      	ldr	r2, [r2, #16]
 8002c36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	6952      	ldr	r2, [r2, #20]
 8002c46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	f040 8082 	bne.w	8002da2 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_Transmit+0x2e>
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07a      	b.n	8002da4 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Transmit+0x40>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e073      	b.n	8002da4 <HAL_UART_Transmit+0x128>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cd2:	f7fd fef5 	bl	8000ac0 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ce4:	e041      	b.n	8002d6a <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfc:	d121      	bne.n	8002d42 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f966 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e045      	b.n	8002da4 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	8812      	ldrh	r2, [r2, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3302      	adds	r3, #2
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	e017      	b.n	8002d6a <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	e013      	b.n	8002d6a <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f944 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e023      	b.n	8002da4 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1b8      	bne.n	8002ce6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2140      	movs	r1, #64	; 0x40
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f92b 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e00a      	b.n	8002da4 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_UART_IRQHandler+0x52>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9d6 	bl	80031a8 <UART_Receive_IT>
      return;
 8002dfc:	e0cc      	b.n	8002f98 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ab 	beq.w	8002f5c <HAL_UART_IRQHandler+0x1b0>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_UART_IRQHandler+0x70>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80a0 	beq.w	8002f5c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_UART_IRQHandler+0x90>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_UART_IRQHandler+0xb0>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	f043 0202 	orr.w	r2, r3, #2
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_UART_IRQHandler+0xd0>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	f043 0204 	orr.w	r2, r3, #4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_UART_IRQHandler+0xf0>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	f043 0208 	orr.w	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d078      	beq.n	8002f96 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_UART_IRQHandler+0x112>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f975 	bl	80031a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x13a>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d031      	beq.n	8002f4a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8c1 	bl	800306e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	6952      	ldr	r2, [r2, #20]
 8002f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d013      	beq.n	8002f3a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_UART_IRQHandler+0x1f4>)
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fa1c 	bl	800135c <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f844 	bl	8002fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00a      	b.n	8002f58 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f840 	bl	8002fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e006      	b.n	8002f58 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f83c 	bl	8002fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f56:	e01e      	b.n	8002f96 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	bf00      	nop
    return;
 8002f5a:	e01c      	b.n	8002f96 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_UART_IRQHandler+0x1cc>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8ad 	bl	80030d0 <UART_Transmit_IT>
    return;
 8002f76:	e00f      	b.n	8002f98 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_UART_IRQHandler+0x1ec>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8f3 	bl	8003178 <UART_EndTransmit_IT>
    return;
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002f96:	bf00      	nop
  }
}
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	080030a9 	.word	0x080030a9

08002fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fea:	e02c      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d028      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x30>
 8002ffa:	f7fd fd61 	bl	8000ac0 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	429a      	cmp	r2, r3
 8003008:	d91d      	bls.n	8003046 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003018:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	6952      	ldr	r2, [r2, #20]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e00f      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d0c3      	beq.n	8002fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	68d2      	ldr	r2, [r2, #12]
 8003080:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003084:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	6952      	ldr	r2, [r2, #20]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff80 	bl	8002fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b21      	cmp	r3, #33	; 0x21
 80030e2:	d143      	bne.n	800316c <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d119      	bne.n	8003122 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	8812      	ldrh	r2, [r2, #0]
 80030fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003100:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	621a      	str	r2, [r3, #32]
 8003114:	e00e      	b.n	8003134 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	621a      	str	r2, [r3, #32]
 8003120:	e008      	b.n	8003134 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	1c58      	adds	r0, r3, #1
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6208      	str	r0, [r1, #32]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4619      	mov	r1, r3
 8003142:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10f      	bne.n	8003168 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003156:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003166:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	68d2      	ldr	r2, [r2, #12]
 800318a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff03 	bl	8002fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b22      	cmp	r3, #34	; 0x22
 80031ba:	d171      	bne.n	80032a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d123      	bne.n	800320e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10e      	bne.n	80031f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
 80031f0:	e029      	b.n	8003246 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
 800320c:	e01b      	b.n	8003246 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6291      	str	r1, [r2, #40]	; 0x28
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	6852      	ldr	r2, [r2, #4]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e00c      	b.n	8003246 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6291      	str	r1, [r2, #40]	; 0x28
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6852      	ldr	r2, [r2, #4]
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003256:	2b00      	cmp	r3, #0
 8003258:	d120      	bne.n	800329c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	68d2      	ldr	r2, [r2, #12]
 8003264:	f022 0220 	bic.w	r2, r2, #32
 8003268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	68d2      	ldr	r2, [r2, #12]
 8003274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	6952      	ldr	r2, [r2, #20]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fe8f 	bl	8002fb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e002      	b.n	80032a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	6912      	ldr	r2, [r2, #16]
 80032be:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68d2      	ldr	r2, [r2, #12]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032ea:	f023 030c 	bic.w	r3, r3, #12
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	6952      	ldr	r2, [r2, #20]
 80032fe:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6992      	ldr	r2, [r2, #24]
 8003306:	430a      	orrs	r2, r1
 8003308:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a52      	ldr	r2, [pc, #328]	; (8003458 <UART_SetConfig+0x1ac>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d14e      	bne.n	80033b2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7fe fe12 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8003318:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	4a49      	ldr	r2, [pc, #292]	; (800345c <UART_SetConfig+0x1b0>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	0118      	lsls	r0, r3, #4
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <UART_SetConfig+0x1b0>)
 8003356:	fba3 4302 	umull	r4, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2464      	movs	r4, #100	; 0x64
 800335e:	fb04 f303 	mul.w	r3, r4, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a3c      	ldr	r2, [pc, #240]	; (800345c <UART_SetConfig+0x1b0>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003374:	4418      	add	r0, r3
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fbb2 f2f3 	udiv	r2, r2, r3
 800338c:	4b33      	ldr	r3, [pc, #204]	; (800345c <UART_SetConfig+0x1b0>)
 800338e:	fba3 4302 	umull	r4, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2464      	movs	r4, #100	; 0x64
 8003396:	fb04 f303 	mul.w	r3, r4, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	3332      	adds	r3, #50	; 0x32
 80033a0:	4a2e      	ldr	r2, [pc, #184]	; (800345c <UART_SetConfig+0x1b0>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	4403      	add	r3, r0
 80033ae:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80033b0:	e04d      	b.n	800344e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80033b2:	f7fe fdaf 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80033b6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009a      	lsls	r2, r3, #2
 80033c6:	441a      	add	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <UART_SetConfig+0x1b0>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	0118      	lsls	r0, r3, #4
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009a      	lsls	r2, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <UART_SetConfig+0x1b0>)
 80033f4:	fba3 4302 	umull	r4, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2464      	movs	r4, #100	; 0x64
 80033fc:	fb04 f303 	mul.w	r3, r4, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <UART_SetConfig+0x1b0>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003412:	4418      	add	r0, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	fbb2 f2f3 	udiv	r2, r2, r3
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <UART_SetConfig+0x1b0>)
 800342c:	fba3 4302 	umull	r4, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2464      	movs	r4, #100	; 0x64
 8003434:	fb04 f303 	mul.w	r3, r4, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a07      	ldr	r2, [pc, #28]	; (800345c <UART_SetConfig+0x1b0>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4403      	add	r3, r0
 800344c:	608b      	str	r3, [r1, #8]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bd90      	pop	{r4, r7, pc}
 8003456:	bf00      	nop
 8003458:	40013800 	.word	0x40013800
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003466:	f7fd fad3 	bl	8000a10 <HAL_Init>
	/* USER CODE BEGIN Init */
	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 800346a:	f000 f88d 	bl	8003588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800346e:	f000 f9fb 	bl	8003868 <MX_GPIO_Init>
	MX_ADC1_Init();
 8003472:	f000 f8d9 	bl	8003628 <MX_ADC1_Init>
	MX_TIM1_Init();
 8003476:	f000 f915 	bl	80036a4 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800347a:	f000 f9cb 	bl	8003814 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // <-------- ENABLE RXNE
 800347e:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <main+0x108>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a39      	ldr	r2, [pc, #228]	; (8003568 <main+0x108>)
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	f042 0220 	orr.w	r2, r2, #32
 800348c:	60da      	str	r2, [r3, #12]
	 HX711_set_scale(1);
	 HX711_Tare(10);
	 HX711_set_scale(calibration_factor);
	 */
	//kod za pokretanje TIM1 i PWM signala
	HAL_TIM_Base_Start(&htim1);
 800348e:	4837      	ldr	r0, [pc, #220]	; (800356c <main+0x10c>)
 8003490:	f7fe fe67 	bl	8002162 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start Pwm signal on PA-8 Pin
 8003494:	2100      	movs	r1, #0
 8003496:	4835      	ldr	r0, [pc, #212]	; (800356c <main+0x10c>)
 8003498:	f7fe feba 	bl	8002210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Start Pwm signal on PA-9 Pin
 800349c:	2104      	movs	r1, #4
 800349e:	4833      	ldr	r0, [pc, #204]	; (800356c <main+0x10c>)
 80034a0:	f7fe feb6 	bl	8002210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //Start Pwm signal on PA-10 Pin
 80034a4:	2108      	movs	r1, #8
 80034a6:	4831      	ldr	r0, [pc, #196]	; (800356c <main+0x10c>)
 80034a8:	f7fe feb2 	bl	8002210 <HAL_TIM_PWM_Start>
	//kod za pokretanje ADC-a
	HAL_ADC_Start(&hadc1);
 80034ac:	4830      	ldr	r0, [pc, #192]	; (8003570 <main+0x110>)
 80034ae:	f7fd fc0b 	bl	8000cc8 <HAL_ADC_Start>

	//postavljamo servo motore na pozicije u kojima miruju
	Servo_motor(PWM2, 180);
 80034b2:	21b4      	movs	r1, #180	; 0xb4
 80034b4:	2004      	movs	r0, #4
 80034b6:	f000 fc43 	bl	8003d40 <Servo_motor>
	Servo_motor(PWM3, 80);
 80034ba:	2150      	movs	r1, #80	; 0x50
 80034bc:	2008      	movs	r0, #8
 80034be:	f000 fc3f 	bl	8003d40 <Servo_motor>
	int number = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
	sys_flag = 0;
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <main+0x114>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (sys_flag == 0) {
 80034cc:	4b29      	ldr	r3, [pc, #164]	; (8003574 <main+0x114>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <main+0x7a>
			Parse_spremnik();
 80034d4:	f000 fa08 	bl	80038e8 <Parse_spremnik>
 80034d8:	e7f8      	b.n	80034cc <main+0x6c>
		}
		//------------------------------SORTIRANJE PREDMETA----------------------------
		else if (sys_flag == 1) {
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <main+0x114>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d1f4      	bne.n	80034cc <main+0x6c>
			//ocitava vrijednost senzora te ako ima predmeta u cijevi krece raditi
			if ((HAL_ADC_GetValue(&hadc1)) >= CIJEV_PUNO) {
 80034e2:	4823      	ldr	r0, [pc, #140]	; (8003570 <main+0x110>)
 80034e4:	f7fd fc9e 	bl	8000e24 <HAL_ADC_GetValue>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d936      	bls.n	8003560 <main+0x100>
				Pomakni_na_vagu();
 80034f2:	f000 fc79 	bl	8003de8 <Pomakni_na_vagu>
				//pomicemo predmet na pola vage
				Servo_motor(PWM2, 160);
 80034f6:	21a0      	movs	r1, #160	; 0xa0
 80034f8:	2004      	movs	r0, #4
 80034fa:	f000 fc21 	bl	8003d40 <Servo_motor>
				HAL_Delay(500);
 80034fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003502:	f7fd fae7 	bl	8000ad4 <HAL_Delay>
				Servo_motor(PWM2, 180);
 8003506:	21b4      	movs	r1, #180	; 0xb4
 8003508:	2004      	movs	r0, #4
 800350a:	f000 fc19 	bl	8003d40 <Servo_motor>
				//vaganje i slanje signala rpi za slikanje
				Predmet.masa = HX711_get_units(10);
 800350e:	200a      	movs	r0, #10
 8003510:	f000 fbb2 	bl	8003c78 <HX711_get_units>
 8003514:	4603      	mov	r3, r0
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fa34 	bl	8000984 <__aeabi_f2iz>
 800351c:	4602      	mov	r2, r0
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <main+0x118>)
 8003520:	605a      	str	r2, [r3, #4]
				HAL_GPIO_WritePin(GPIOA, RPI_GPIO_Pin, 1);
 8003522:	2201      	movs	r2, #1
 8003524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003528:	4814      	ldr	r0, [pc, #80]	; (800357c <main+0x11c>)
 800352a:	f7fe f904 	bl	8001736 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 800352e:	200a      	movs	r0, #10
 8003530:	f7fd fad0 	bl	8000ad4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RPI_GPIO_Pin, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800353a:	4810      	ldr	r0, [pc, #64]	; (800357c <main+0x11c>)
 800353c:	f7fe f8fb 	bl	8001736 <HAL_GPIO_WritePin>

				while (det_obj_buff[2] == '#')
 8003540:	bf00      	nop
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <main+0x120>)
 8003544:	789b      	ldrb	r3, [r3, #2]
 8003546:	2b23      	cmp	r3, #35	; 0x23
 8003548:	d0fb      	beq.n	8003542 <main+0xe2>
					;
				Parse_predmet();
 800354a:	f000 fa2b 	bl	80039a4 <Parse_predmet>
				int sprem = Odabir_spremnika();
 800354e:	f000 fadd 	bl	8003b0c <Odabir_spremnika>
 8003552:	6038      	str	r0, [r7, #0]
				Postavi_spremnik(sprem);
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	f000 fc7f 	bl	8003e58 <Postavi_spremnik>
				Makni_sa_vage();
 800355a:	f000 fc61 	bl	8003e20 <Makni_sa_vage>
 800355e:	e7b5      	b.n	80034cc <main+0x6c>
			} else {
				printf("SORTIRANJE GOTOVO\r\n");
 8003560:	4808      	ldr	r0, [pc, #32]	; (8003584 <main+0x124>)
 8003562:	f001 f831 	bl	80045c8 <puts>
		if (sys_flag == 0) {
 8003566:	e7b1      	b.n	80034cc <main+0x6c>
 8003568:	200001a8 	.word	0x200001a8
 800356c:	20000144 	.word	0x20000144
 8003570:	20000114 	.word	0x20000114
 8003574:	20000098 	.word	0x20000098
 8003578:	20000100 	.word	0x20000100
 800357c:	40010800 	.word	0x40010800
 8003580:	200000b4 	.word	0x200000b4
 8003584:	080053dc 	.word	0x080053dc

08003588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b094      	sub	sp, #80	; 0x50
 800358c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800358e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003592:	2228      	movs	r2, #40	; 0x28
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ff9a 	bl	80044d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035b8:	2302      	movs	r3, #2
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035bc:	2301      	movs	r3, #1
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035c0:	2310      	movs	r3, #16
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80035c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe f8cb 	bl	8001768 <HAL_RCC_OscConfig>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <SystemClock_Config+0x54>
		Error_Handler();
 80035d8:	f000 fcd0 	bl	8003f7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80035dc:	230f      	movs	r3, #15
 80035de:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fb36 	bl	8001c68 <HAL_RCC_ClockConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SystemClock_Config+0x7e>
		Error_Handler();
 8003602:	f000 fcbb 	bl	8003f7c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003606:	2302      	movs	r3, #2
 8003608:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fcc5 	bl	8001fa0 <HAL_RCCEx_PeriphCLKConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <SystemClock_Config+0x98>
		Error_Handler();
 800361c:	f000 fcae 	bl	8003f7c <Error_Handler>
	}
}
 8003620:	bf00      	nop
 8003622:	3750      	adds	r7, #80	; 0x50
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8003638:	4b18      	ldr	r3, [pc, #96]	; (800369c <MX_ADC1_Init+0x74>)
 800363a:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <MX_ADC1_Init+0x78>)
 800363c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <MX_ADC1_Init+0x74>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <MX_ADC1_Init+0x74>)
 8003646:	2201      	movs	r2, #1
 8003648:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <MX_ADC1_Init+0x74>)
 800364c:	2200      	movs	r2, #0
 800364e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <MX_ADC1_Init+0x74>)
 8003652:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003656:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003658:	4b10      	ldr	r3, [pc, #64]	; (800369c <MX_ADC1_Init+0x74>)
 800365a:	2200      	movs	r2, #0
 800365c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <MX_ADC1_Init+0x74>)
 8003660:	2201      	movs	r2, #1
 8003662:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003664:	480d      	ldr	r0, [pc, #52]	; (800369c <MX_ADC1_Init+0x74>)
 8003666:	f7fd fa57 	bl	8000b18 <HAL_ADC_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8003670:	f000 fc84 	bl	8003f7c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8003674:	2300      	movs	r3, #0
 8003676:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003678:	2301      	movs	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <MX_ADC1_Init+0x74>)
 8003686:	f7fd fbd9 	bl	8000e3c <HAL_ADC_ConfigChannel>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8003690:	f000 fc74 	bl	8003f7c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000114 	.word	0x20000114
 80036a0:	40012400 	.word	0x40012400

080036a4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b096      	sub	sp, #88	; 0x58
 80036a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80036aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80036c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	2220      	movs	r2, #32
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fef7 	bl	80044d0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <MX_TIM1_Init+0x168>)
 80036e4:	4a4a      	ldr	r2, [pc, #296]	; (8003810 <MX_TIM1_Init+0x16c>)
 80036e6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 20;
 80036e8:	4b48      	ldr	r3, [pc, #288]	; (800380c <MX_TIM1_Init+0x168>)
 80036ea:	2214      	movs	r2, #20
 80036ec:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <MX_TIM1_Init+0x168>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7656;
 80036f4:	4b45      	ldr	r3, [pc, #276]	; (800380c <MX_TIM1_Init+0x168>)
 80036f6:	f641 52e8 	movw	r2, #7656	; 0x1de8
 80036fa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <MX_TIM1_Init+0x168>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003702:	4b42      	ldr	r3, [pc, #264]	; (800380c <MX_TIM1_Init+0x168>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003708:	4b40      	ldr	r3, [pc, #256]	; (800380c <MX_TIM1_Init+0x168>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800370e:	483f      	ldr	r0, [pc, #252]	; (800380c <MX_TIM1_Init+0x168>)
 8003710:	f7fe fcfc 	bl	800210c <HAL_TIM_Base_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800371a:	f000 fc2f 	bl	8003f7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800371e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003724:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003728:	4619      	mov	r1, r3
 800372a:	4838      	ldr	r0, [pc, #224]	; (800380c <MX_TIM1_Init+0x168>)
 800372c:	f7fe fe68 	bl	8002400 <HAL_TIM_ConfigClockSource>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM1_Init+0x96>
		Error_Handler();
 8003736:	f000 fc21 	bl	8003f7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800373a:	4834      	ldr	r0, [pc, #208]	; (800380c <MX_TIM1_Init+0x168>)
 800373c:	f7fe fd34 	bl	80021a8 <HAL_TIM_PWM_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8003746:	f000 fc19 	bl	8003f7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003756:	4619      	mov	r1, r3
 8003758:	482c      	ldr	r0, [pc, #176]	; (800380c <MX_TIM1_Init+0x168>)
 800375a:	f7ff f9ad 	bl	8002ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8003764:	f000 fc0a 	bl	8003f7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003768:	2360      	movs	r3, #96	; 0x60
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003774:	2300      	movs	r3, #0
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003780:	2300      	movs	r3, #0
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003788:	2200      	movs	r2, #0
 800378a:	4619      	mov	r1, r3
 800378c:	481f      	ldr	r0, [pc, #124]	; (800380c <MX_TIM1_Init+0x168>)
 800378e:	f7fe fd71 	bl	8002274 <HAL_TIM_PWM_ConfigChannel>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8003798:	f000 fbf0 	bl	8003f7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800379c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a0:	2204      	movs	r2, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4819      	ldr	r0, [pc, #100]	; (800380c <MX_TIM1_Init+0x168>)
 80037a6:	f7fe fd65 	bl	8002274 <HAL_TIM_PWM_ConfigChannel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 80037b0:	f000 fbe4 	bl	8003f7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80037b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b8:	2208      	movs	r2, #8
 80037ba:	4619      	mov	r1, r3
 80037bc:	4813      	ldr	r0, [pc, #76]	; (800380c <MX_TIM1_Init+0x168>)
 80037be:	f7fe fd59 	bl	8002274 <HAL_TIM_PWM_ConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80037c8:	f000 fbd8 	bl	8003f7c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037e4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4807      	ldr	r0, [pc, #28]	; (800380c <MX_TIM1_Init+0x168>)
 80037f0:	f7ff f9a6 	bl	8002b40 <HAL_TIMEx_ConfigBreakDeadTime>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM1_Init+0x15a>
			!= HAL_OK) {
		Error_Handler();
 80037fa:	f000 fbbf 	bl	8003f7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80037fe:	4803      	ldr	r0, [pc, #12]	; (800380c <MX_TIM1_Init+0x168>)
 8003800:	f000 fc60 	bl	80040c4 <HAL_TIM_MspPostInit>

}
 8003804:	bf00      	nop
 8003806:	3758      	adds	r7, #88	; 0x58
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000144 	.word	0x20000144
 8003810:	40012c00 	.word	0x40012c00

08003814 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MX_USART2_UART_Init+0x50>)
 800381c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 8003820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003824:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 800383a:	220c      	movs	r2, #12
 800383c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_USART2_UART_Init+0x4c>)
 800384c:	f7ff f9c9 	bl	8002be2 <HAL_UART_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003856:	f000 fb91 	bl	8003f7c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200001a8 	.word	0x200001a8
 8003864:	40004400 	.word	0x40004400

08003868 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800386e:	f107 0308 	add.w	r3, r7, #8
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <MX_GPIO_Init+0x78>)
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <MX_GPIO_Init+0x78>)
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6193      	str	r3, [r2, #24]
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <MX_GPIO_Init+0x78>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003894:	2200      	movs	r2, #0
 8003896:	f641 01d2 	movw	r1, #6354	; 0x18d2
 800389a:	4812      	ldr	r0, [pc, #72]	; (80038e4 <MX_GPIO_Init+0x7c>)
 800389c:	f7fd ff4b 	bl	8001736 <HAL_GPIO_WritePin>
			SENZOR_LED_Pin | VAGA_SCK_Pin | STEPPER_DIR_Pin | STEPPER_STEP_Pin
					| RPI_GPIO_Pin | STEPPER_EN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SENZOR_LED_Pin VAGA_SCK_Pin STEPPER_DIR_Pin STEPPER_STEP_Pin
	 RPI_GPIO_Pin STEPPER_EN_Pin */
	GPIO_InitStruct.Pin = SENZOR_LED_Pin | VAGA_SCK_Pin | STEPPER_DIR_Pin
 80038a0:	f641 03d2 	movw	r3, #6354	; 0x18d2
 80038a4:	60bb      	str	r3, [r7, #8]
			| STEPPER_STEP_Pin | RPI_GPIO_Pin | STEPPER_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a6:	2301      	movs	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2302      	movs	r3, #2
 80038b0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b2:	f107 0308 	add.w	r3, r7, #8
 80038b6:	4619      	mov	r1, r3
 80038b8:	480a      	ldr	r0, [pc, #40]	; (80038e4 <MX_GPIO_Init+0x7c>)
 80038ba:	f7fd fdcb 	bl	8001454 <HAL_GPIO_Init>

	/*Configure GPIO pin : VAGA_DT_Pin */
	GPIO_InitStruct.Pin = VAGA_DT_Pin;
 80038be:	2320      	movs	r3, #32
 80038c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(VAGA_DT_GPIO_Port, &GPIO_InitStruct);
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	4619      	mov	r1, r3
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <MX_GPIO_Init+0x7c>)
 80038d2:	f7fd fdbf 	bl	8001454 <HAL_GPIO_Init>

}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010800 	.word	0x40010800

080038e8 <Parse_spremnik>:

/* USER CODE BEGIN 4 */

//funkcija za parsiranje podataka za spremnike
void Parse_spremnik() {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	for (int j = 0; j < 3; j++) {
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e04b      	b.n	800398c <Parse_spremnik+0xa4>
		Spremnik[j].boja = msg_protocol[(12 * j + 2)];
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <Parse_spremnik+0xb4>)
 8003902:	5cd0      	ldrb	r0, [r2, r3]
 8003904:	4926      	ldr	r1, [pc, #152]	; (80039a0 <Parse_spremnik+0xb8>)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	4602      	mov	r2, r0
 8003914:	701a      	strb	r2, [r3, #0]
		Spremnik[j].oblik = msg_protocol[(12 * j + 3)];
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	3303      	adds	r3, #3
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <Parse_spremnik+0xb4>)
 8003924:	5cd0      	ldrb	r0, [r2, r3]
 8003926:	491e      	ldr	r1, [pc, #120]	; (80039a0 <Parse_spremnik+0xb8>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3301      	adds	r3, #1
 8003936:	4602      	mov	r2, r0
 8003938:	701a      	strb	r2, [r3, #0]
		Spremnik[j].min_masa = CharToInt3((12 * j + 5), msg_protocol);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	3305      	adds	r3, #5
 8003946:	4915      	ldr	r1, [pc, #84]	; (800399c <Parse_spremnik+0xb4>)
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f83d 	bl	80039c8 <CharToInt3>
 800394e:	4914      	ldr	r1, [pc, #80]	; (80039a0 <Parse_spremnik+0xb8>)
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3308      	adds	r3, #8
 800395e:	6018      	str	r0, [r3, #0]
		Spremnik[j].max_masa = CharToInt4((12 * j + 8), msg_protocol);
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3308      	adds	r3, #8
 800396c:	490b      	ldr	r1, [pc, #44]	; (800399c <Parse_spremnik+0xb4>)
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f872 	bl	8003a58 <CharToInt4>
 8003974:	490a      	ldr	r1, [pc, #40]	; (80039a0 <Parse_spremnik+0xb8>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	330c      	adds	r3, #12
 8003984:	6018      	str	r0, [r3, #0]
	for (int j = 0; j < 3; j++) {
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3301      	adds	r3, #1
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	ddb0      	ble.n	80038f4 <Parse_spremnik+0xc>
	}

}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000184 	.word	0x20000184
 80039a0:	200000b8 	.word	0x200000b8

080039a4 <Parse_predmet>:

//funkcija za parsiranje podataka o slikanom predmetu
void Parse_predmet() {
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
	Predmet.boja = det_obj_buff[0];
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <Parse_predmet+0x1c>)
 80039aa:	781a      	ldrb	r2, [r3, #0]
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <Parse_predmet+0x20>)
 80039ae:	701a      	strb	r2, [r3, #0]
	Predmet.oblik = det_obj_buff[1];
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <Parse_predmet+0x1c>)
 80039b2:	785a      	ldrb	r2, [r3, #1]
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <Parse_predmet+0x20>)
 80039b6:	705a      	strb	r2, [r3, #1]

}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	200000b4 	.word	0x200000b4
 80039c4:	20000100 	.word	0x20000100

080039c8 <CharToInt3>:
int CharToInt3(int n, uint8_t* Polje) {
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	int broj = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; i++) {
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	e034      	b.n	8003a46 <CharToInt3+0x7e>
		if (i == 0 && Polje[n] != '0') {
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <CharToInt3+0x3a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b30      	cmp	r3, #48	; 0x30
 80039ec:	d009      	beq.n	8003a02 <CharToInt3+0x3a>
			broj = (Polje[n] - 48) * 100;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	3b30      	subs	r3, #48	; 0x30
 80039f8:	2264      	movs	r2, #100	; 0x64
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e01e      	b.n	8003a40 <CharToInt3+0x78>
		} else if (i == 1) {
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10f      	bne.n	8003a28 <CharToInt3+0x60>
			broj += (Polje[n + 1] - 48) * 10;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e00b      	b.n	8003a40 <CharToInt3+0x78>
		} else if (i == 2) {
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d108      	bne.n	8003a40 <CharToInt3+0x78>
			broj += (Polje[n + 2] - 48);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3302      	adds	r3, #2
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	3b30      	subs	r3, #48	; 0x30
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; i++) {
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	3301      	adds	r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	ddc7      	ble.n	80039dc <CharToInt3+0x14>
		}
	}
	return broj;
 8003a4c:	68fb      	ldr	r3, [r7, #12]

}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <CharToInt4>:
int CharToInt4(int n, uint8_t* Polje) {
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	int broj = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++) {
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	e045      	b.n	8003af8 <CharToInt4+0xa0>
		if (i == 0 && Polje[n] != '0') {
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d110      	bne.n	8003a94 <CharToInt4+0x3c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b30      	cmp	r3, #48	; 0x30
 8003a7c:	d00a      	beq.n	8003a94 <CharToInt4+0x3c>
			broj = (Polje[n] - 48) * 1000;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3b30      	subs	r3, #48	; 0x30
 8003a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e02e      	b.n	8003af2 <CharToInt4+0x9a>
		} else if (i == 1) {
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10c      	bne.n	8003ab4 <CharToInt4+0x5c>
			broj += (Polje[n + 1] - 48) * 100;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	3b30      	subs	r3, #48	; 0x30
 8003aa6:	2264      	movs	r2, #100	; 0x64
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e01e      	b.n	8003af2 <CharToInt4+0x9a>
		} else if (i == 2) {
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d10f      	bne.n	8003ada <CharToInt4+0x82>
			broj += (Polje[n + 2] - 48) * 10;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3302      	adds	r3, #2
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e00b      	b.n	8003af2 <CharToInt4+0x9a>
		} else if (i == 3) {
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d108      	bne.n	8003af2 <CharToInt4+0x9a>
			broj += (Polje[n + 3] - 48);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3303      	adds	r3, #3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	3b30      	subs	r3, #48	; 0x30
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++) {
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3301      	adds	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	ddb6      	ble.n	8003a6c <CharToInt4+0x14>
		}
	}
	return broj;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
	...

08003b0c <Odabir_spremnika>:
		}
	}
}

//funkcija za odabir spremnika------------------ODABIR SPREMNIKA----------------------------------------
int Odabir_spremnika() {
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
	int max_poklapanja = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
	int index = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	e01e      	b.n	8003b5e <Odabir_spremnika+0x52>
		if (Spremnik[i].broj_poklapanja > max_poklapanja) {
 8003b20:	4913      	ldr	r1, [pc, #76]	; (8003b70 <Odabir_spremnika+0x64>)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3310      	adds	r3, #16
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	dd0d      	ble.n	8003b54 <Odabir_spremnika+0x48>
			max_poklapanja = Spremnik[i].broj_poklapanja;
 8003b38:	490d      	ldr	r1, [pc, #52]	; (8003b70 <Odabir_spremnika+0x64>)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3310      	adds	r3, #16
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
			index = i + 1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	e001      	b.n	8003b58 <Odabir_spremnika+0x4c>
		} else {
			index = 4;
 8003b54:	2304      	movs	r3, #4
 8003b56:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	dddd      	ble.n	8003b20 <Odabir_spremnika+0x14>
		}
	}

	return index;
 8003b64:	68bb      	ldr	r3, [r7, #8]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	200000b8 	.word	0x200000b8

08003b74 <HX711_read>:

//FUNKCIJE ZA VAGU----------------------------------VAGA------------------------------------------
int HX711_read(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
	int buffer;
	buffer = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

	while (HAL_GPIO_ReadPin(GPIOA, VAGA_DT_Pin) == 1)
 8003b7e:	bf00      	nop
 8003b80:	2120      	movs	r1, #32
 8003b82:	4821      	ldr	r0, [pc, #132]	; (8003c08 <HX711_read+0x94>)
 8003b84:	f7fd fdc0 	bl	8001708 <HAL_GPIO_ReadPin>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d0f8      	beq.n	8003b80 <HX711_read+0xc>
		;

	for (uint8_t i = 0; i < 24; i++) {
 8003b8e:	2300      	movs	r3, #0
 8003b90:	72fb      	strb	r3, [r7, #11]
 8003b92:	e019      	b.n	8003bc8 <HX711_read+0x54>
		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_SET);
 8003b94:	2201      	movs	r2, #1
 8003b96:	2110      	movs	r1, #16
 8003b98:	481b      	ldr	r0, [pc, #108]	; (8003c08 <HX711_read+0x94>)
 8003b9a:	f7fd fdcc 	bl	8001736 <HAL_GPIO_WritePin>

		buffer = buffer << 1;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]

		if (HAL_GPIO_ReadPin(GPIOA, VAGA_DT_Pin)) {
 8003ba4:	2120      	movs	r1, #32
 8003ba6:	4818      	ldr	r0, [pc, #96]	; (8003c08 <HX711_read+0x94>)
 8003ba8:	f7fd fdae 	bl	8001708 <HAL_GPIO_ReadPin>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HX711_read+0x44>
			buffer++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
		}

		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_RESET);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2110      	movs	r1, #16
 8003bbc:	4812      	ldr	r0, [pc, #72]	; (8003c08 <HX711_read+0x94>)
 8003bbe:	f7fd fdba 	bl	8001736 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 24; i++) {
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	72fb      	strb	r3, [r7, #11]
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	2b17      	cmp	r3, #23
 8003bcc:	d9e2      	bls.n	8003b94 <HX711_read+0x20>
	}

	for (int i = 0; i < 1; i++) {
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e00c      	b.n	8003bee <HX711_read+0x7a>
		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_SET);
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	480b      	ldr	r0, [pc, #44]	; (8003c08 <HX711_read+0x94>)
 8003bda:	f7fd fdac 	bl	8001736 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_RESET);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2110      	movs	r1, #16
 8003be2:	4809      	ldr	r0, [pc, #36]	; (8003c08 <HX711_read+0x94>)
 8003be4:	f7fd fda7 	bl	8001736 <HAL_GPIO_WritePin>
	for (int i = 0; i < 1; i++) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	ddef      	ble.n	8003bd4 <HX711_read+0x60>
	}

	buffer = buffer ^ 0x800000;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8003bfa:	60fb      	str	r3, [r7, #12]

	return buffer;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40010800 	.word	0x40010800

08003c0c <HX711_read_average>:

long HX711_read_average(int times) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	long sum = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < times; i++) {
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	e008      	b.n	8003c30 <HX711_read_average+0x24>
		sum += HX711_read();
 8003c1e:	f7ff ffa9 	bl	8003b74 <HX711_read>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < times; i++) {
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dbf2      	blt.n	8003c1e <HX711_read_average+0x12>
	}

	return sum / times;
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HX711_get_value>:
double HX711_get_value(int times) {
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	return HX711_read_average(times) - OFFSET;
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ffdb 	bl	8003c0c <HX711_read_average>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HX711_get_value+0x2c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fbc8 	bl	80003f4 <__aeabi_i2d>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd90      	pop	{r4, r7, pc}
 8003c72:	bf00      	nop
 8003c74:	2000009c 	.word	0x2000009c

08003c78 <HX711_get_units>:

float HX711_get_units(int times) {
 8003c78:	b5b0      	push	{r4, r5, r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	return HX711_get_value(times) / SCALE;
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ffe1 	bl	8003c48 <HX711_get_value>
 8003c86:	4604      	mov	r4, r0
 8003c88:	460d      	mov	r5, r1
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HX711_get_units+0x40>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fbc2 	bl	8000418 <__aeabi_f2d>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	f7fc fd3a 	bl	8000714 <__aeabi_ddiv>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	f7fc fe1c 	bl	80008e4 <__aeabi_d2f>
 8003cac:	4603      	mov	r3, r0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000008 	.word	0x20000008

08003cbc <Stepper_Step>:

	HX711_set_offset(sum);
}

//funkcija za stepper motor-------------------------STEPPER-------------------------------
void Stepper_Step(int dir, int step) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, GPIO_PIN_SET);
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ccc:	481b      	ldr	r0, [pc, #108]	; (8003d3c <Stepper_Step+0x80>)
 8003cce:	f7fd fd32 	bl	8001736 <HAL_GPIO_WritePin>
	if (dir == 1) {
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <Stepper_Step+0x28>
		HAL_GPIO_WritePin(GPIOA, STEPPER_DIR_Pin, GPIO_PIN_SET);
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2140      	movs	r1, #64	; 0x40
 8003cdc:	4817      	ldr	r0, [pc, #92]	; (8003d3c <Stepper_Step+0x80>)
 8003cde:	f7fd fd2a 	bl	8001736 <HAL_GPIO_WritePin>
 8003ce2:	e004      	b.n	8003cee <Stepper_Step+0x32>
	} else {
		HAL_GPIO_WritePin(GPIOA, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	4814      	ldr	r0, [pc, #80]	; (8003d3c <Stepper_Step+0x80>)
 8003cea:	f7fd fd24 	bl	8001736 <HAL_GPIO_WritePin>
	}
	for (int i = 0; i < step; i++) {
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e012      	b.n	8003d1a <Stepper_Step+0x5e>
		HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin, GPIO_PIN_SET);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	4810      	ldr	r0, [pc, #64]	; (8003d3c <Stepper_Step+0x80>)
 8003cfa:	f7fd fd1c 	bl	8001736 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8003cfe:	200a      	movs	r0, #10
 8003d00:	f7fc fee8 	bl	8000ad4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 8003d04:	2200      	movs	r2, #0
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <Stepper_Step+0x80>)
 8003d0a:	f7fd fd14 	bl	8001736 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8003d0e:	200a      	movs	r0, #10
 8003d10:	f7fc fee0 	bl	8000ad4 <HAL_Delay>
	for (int i = 0; i < step; i++) {
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	dbe8      	blt.n	8003cf4 <Stepper_Step+0x38>
	}
	HAL_Delay(10);
 8003d22:	200a      	movs	r0, #10
 8003d24:	f7fc fed6 	bl	8000ad4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, GPIO_PIN_RESET);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d2e:	4803      	ldr	r0, [pc, #12]	; (8003d3c <Stepper_Step+0x80>)
 8003d30:	f7fd fd01 	bl	8001736 <HAL_GPIO_WritePin>
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40010800 	.word	0x40010800

08003d40 <Servo_motor>:

void Servo_motor(PWM_CHANNEL PWM_CH, int kut) {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
	float stupnjevi = ((7656 / 1800.0) * (kut + 45.0));
 8003d4c:	6838      	ldr	r0, [r7, #0]
 8003d4e:	f7fc fb51 	bl	80003f4 <__aeabi_i2d>
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <Servo_motor+0xa0>)
 8003d58:	f7fc fa00 	bl	800015c <__adddf3>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	4618      	mov	r0, r3
 8003d62:	4621      	mov	r1, r4
 8003d64:	a31c      	add	r3, pc, #112	; (adr r3, 8003dd8 <Servo_motor+0x98>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fba9 	bl	80004c0 <__aeabi_dmul>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	4618      	mov	r0, r3
 8003d74:	4621      	mov	r1, r4
 8003d76:	f7fc fdb5 	bl	80008e4 <__aeabi_d2f>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <Servo_motor+0x54>
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <Servo_motor+0xa4>)
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7fc fe21 	bl	80009d0 <__aeabi_f2uiz>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003d92:	e01c      	b.n	8003dce <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <Servo_motor+0x6a>
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <Servo_motor+0xa4>)
 8003d9c:	681c      	ldr	r4, [r3, #0]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7fc fe16 	bl	80009d0 <__aeabi_f2uiz>
 8003da4:	4603      	mov	r3, r0
 8003da6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003da8:	e011      	b.n	8003dce <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d107      	bne.n	8003dc0 <Servo_motor+0x80>
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <Servo_motor+0xa4>)
 8003db2:	681c      	ldr	r4, [r3, #0]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7fc fe0b 	bl	80009d0 <__aeabi_f2uiz>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8003dbe:	e006      	b.n	8003dce <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <Servo_motor+0xa4>)
 8003dc2:	681c      	ldr	r4, [r3, #0]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7fc fe03 	bl	80009d0 <__aeabi_f2uiz>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	d0369d03 	.word	0xd0369d03
 8003ddc:	40110369 	.word	0x40110369
 8003de0:	40468000 	.word	0x40468000
 8003de4:	20000144 	.word	0x20000144

08003de8 <Pomakni_na_vagu>:

void Pomakni_na_vagu() {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	Servo_motor(PWM3, 120);
 8003dec:	2178      	movs	r1, #120	; 0x78
 8003dee:	2008      	movs	r0, #8
 8003df0:	f7ff ffa6 	bl	8003d40 <Servo_motor>
	HAL_Delay(1000);
 8003df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df8:	f7fc fe6c 	bl	8000ad4 <HAL_Delay>
	Servo_motor(PWM3, 38);
 8003dfc:	2126      	movs	r1, #38	; 0x26
 8003dfe:	2008      	movs	r0, #8
 8003e00:	f7ff ff9e 	bl	8003d40 <Servo_motor>
	HAL_Delay(1000);
 8003e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e08:	f7fc fe64 	bl	8000ad4 <HAL_Delay>
	Servo_motor(PWM3, 80);
 8003e0c:	2150      	movs	r1, #80	; 0x50
 8003e0e:	2008      	movs	r0, #8
 8003e10:	f7ff ff96 	bl	8003d40 <Servo_motor>
	HAL_Delay(1000);
 8003e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e18:	f7fc fe5c 	bl	8000ad4 <HAL_Delay>
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <Makni_sa_vage>:
void Makni_sa_vage() {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	Servo_motor(PWM2, 160);
 8003e24:	21a0      	movs	r1, #160	; 0xa0
 8003e26:	2004      	movs	r0, #4
 8003e28:	f7ff ff8a 	bl	8003d40 <Servo_motor>
	HAL_Delay(1000);
 8003e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e30:	f7fc fe50 	bl	8000ad4 <HAL_Delay>
	Servo_motor(PWM2, 110);
 8003e34:	216e      	movs	r1, #110	; 0x6e
 8003e36:	2004      	movs	r0, #4
 8003e38:	f7ff ff82 	bl	8003d40 <Servo_motor>
	HAL_Delay(1000);
 8003e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e40:	f7fc fe48 	bl	8000ad4 <HAL_Delay>
	Servo_motor(PWM2, 180);
 8003e44:	21b4      	movs	r1, #180	; 0xb4
 8003e46:	2004      	movs	r0, #4
 8003e48:	f7ff ff7a 	bl	8003d40 <Servo_motor>
	HAL_Delay(1000);
 8003e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e50:	f7fc fe40 	bl	8000ad4 <HAL_Delay>
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <Postavi_spremnik>:
void Postavi_spremnik(int spremnik) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

	switch (spremnik) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	f200 8083 	bhi.w	8003f70 <Postavi_spremnik+0x118>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <Postavi_spremnik+0x18>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003ebd 	.word	0x08003ebd
 8003e78:	08003ef9 	.word	0x08003ef9
 8003e7c:	08003f35 	.word	0x08003f35
	case 1:
		if (stepperPosition == 2) {
 8003e80:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <Postavi_spremnik+0x120>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d104      	bne.n	8003e92 <Postavi_spremnik+0x3a>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 8003e88:	2100      	movs	r1, #0
 8003e8a:	2032      	movs	r0, #50	; 0x32
 8003e8c:	f7ff ff16 	bl	8003cbc <Stepper_Step>
 8003e90:	e010      	b.n	8003eb4 <Postavi_spremnik+0x5c>
		} else if (stepperPosition == 3) {
 8003e92:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <Postavi_spremnik+0x120>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d104      	bne.n	8003ea4 <Postavi_spremnik+0x4c>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	2064      	movs	r0, #100	; 0x64
 8003e9e:	f7ff ff0d 	bl	8003cbc <Stepper_Step>
 8003ea2:	e007      	b.n	8003eb4 <Postavi_spremnik+0x5c>
		} else if (stepperPosition == 4) {
 8003ea4:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <Postavi_spremnik+0x120>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d103      	bne.n	8003eb4 <Postavi_spremnik+0x5c>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 8003eac:	2100      	movs	r1, #0
 8003eae:	2096      	movs	r0, #150	; 0x96
 8003eb0:	f7ff ff04 	bl	8003cbc <Stepper_Step>
		}
		stepperPosition = 1;
 8003eb4:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <Postavi_spremnik+0x120>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
		break;
 8003eba:	e059      	b.n	8003f70 <Postavi_spremnik+0x118>
	case 2:
		if (stepperPosition == 1) {
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <Postavi_spremnik+0x120>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d104      	bne.n	8003ece <Postavi_spremnik+0x76>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	2096      	movs	r0, #150	; 0x96
 8003ec8:	f7ff fef8 	bl	8003cbc <Stepper_Step>
 8003ecc:	e010      	b.n	8003ef0 <Postavi_spremnik+0x98>
		} else if (stepperPosition == 3) {
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <Postavi_spremnik+0x120>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d104      	bne.n	8003ee0 <Postavi_spremnik+0x88>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2032      	movs	r0, #50	; 0x32
 8003eda:	f7ff feef 	bl	8003cbc <Stepper_Step>
 8003ede:	e007      	b.n	8003ef0 <Postavi_spremnik+0x98>
		} else if (stepperPosition == 4) {
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <Postavi_spremnik+0x120>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d103      	bne.n	8003ef0 <Postavi_spremnik+0x98>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2064      	movs	r0, #100	; 0x64
 8003eec:	f7ff fee6 	bl	8003cbc <Stepper_Step>
		}
		stepperPosition = 2;
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <Postavi_spremnik+0x120>)
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	601a      	str	r2, [r3, #0]
		break;
 8003ef6:	e03b      	b.n	8003f70 <Postavi_spremnik+0x118>
	case 3:
		if (stepperPosition == 1) {
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <Postavi_spremnik+0x120>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d104      	bne.n	8003f0a <Postavi_spremnik+0xb2>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 8003f00:	2100      	movs	r1, #0
 8003f02:	2064      	movs	r0, #100	; 0x64
 8003f04:	f7ff feda 	bl	8003cbc <Stepper_Step>
 8003f08:	e010      	b.n	8003f2c <Postavi_spremnik+0xd4>
		} else if (stepperPosition == 2) {
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d104      	bne.n	8003f1c <Postavi_spremnik+0xc4>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 8003f12:	2100      	movs	r1, #0
 8003f14:	2096      	movs	r0, #150	; 0x96
 8003f16:	f7ff fed1 	bl	8003cbc <Stepper_Step>
 8003f1a:	e007      	b.n	8003f2c <Postavi_spremnik+0xd4>
		} else if (stepperPosition == 4) {
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d103      	bne.n	8003f2c <Postavi_spremnik+0xd4>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 8003f24:	2100      	movs	r1, #0
 8003f26:	2032      	movs	r0, #50	; 0x32
 8003f28:	f7ff fec8 	bl	8003cbc <Stepper_Step>
		}
		stepperPosition = 3;
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f2e:	2203      	movs	r2, #3
 8003f30:	601a      	str	r2, [r3, #0]
		break;
 8003f32:	e01d      	b.n	8003f70 <Postavi_spremnik+0x118>
	case 4:
		if (stepperPosition == 1) {
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d104      	bne.n	8003f46 <Postavi_spremnik+0xee>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	2032      	movs	r0, #50	; 0x32
 8003f40:	f7ff febc 	bl	8003cbc <Stepper_Step>
 8003f44:	e010      	b.n	8003f68 <Postavi_spremnik+0x110>
		} else if (stepperPosition == 2) {
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d104      	bne.n	8003f58 <Postavi_spremnik+0x100>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	2064      	movs	r0, #100	; 0x64
 8003f52:	f7ff feb3 	bl	8003cbc <Stepper_Step>
 8003f56:	e007      	b.n	8003f68 <Postavi_spremnik+0x110>
		} else if (stepperPosition == 3) {
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d103      	bne.n	8003f68 <Postavi_spremnik+0x110>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 8003f60:	2100      	movs	r1, #0
 8003f62:	2096      	movs	r0, #150	; 0x96
 8003f64:	f7ff feaa 	bl	8003cbc <Stepper_Step>
		}
		stepperPosition = 4;
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <Postavi_spremnik+0x120>)
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	601a      	str	r2, [r3, #0]
		break;
 8003f6e:	bf00      	nop
	}

}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200000a0 	.word	0x200000a0

08003f7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of
	 transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8003f90:	1d39      	adds	r1, r7, #4
 8003f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f96:	2201      	movs	r2, #1
 8003f98:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <__io_putchar+0x20>)
 8003f9a:	f7fe fe6f 	bl	8002c7c <HAL_UART_Transmit>
	return ch;
 8003f9e:	687b      	ldr	r3, [r7, #4]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200001a8 	.word	0x200001a8

08003fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <HAL_MspInit+0x5c>)
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_MspInit+0x5c>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6193      	str	r3, [r2, #24]
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_MspInit+0x5c>)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <HAL_MspInit+0x5c>)
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <HAL_MspInit+0x5c>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	61d3      	str	r3, [r2, #28]
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_MspInit+0x5c>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_MspInit+0x60>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_MspInit+0x60>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	40021000 	.word	0x40021000
 800400c:	40010000 	.word	0x40010000

08004010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_ADC_MspInit+0x6c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d121      	bne.n	8004074 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_ADC_MspInit+0x70>)
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_ADC_MspInit+0x70>)
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403a:	6193      	str	r3, [r2, #24]
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_ADC_MspInit+0x70>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004048:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <HAL_ADC_MspInit+0x70>)
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <HAL_ADC_MspInit+0x70>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6193      	str	r3, [r2, #24]
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_ADC_MspInit+0x70>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = SENZOR_ADC_Pin;
 8004060:	2301      	movs	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004064:	2303      	movs	r3, #3
 8004066:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SENZOR_ADC_GPIO_Port, &GPIO_InitStruct);
 8004068:	f107 0310 	add.w	r3, r7, #16
 800406c:	4619      	mov	r1, r3
 800406e:	4805      	ldr	r0, [pc, #20]	; (8004084 <HAL_ADC_MspInit+0x74>)
 8004070:	f7fd f9f0 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004074:	bf00      	nop
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40012400 	.word	0x40012400
 8004080:	40021000 	.word	0x40021000
 8004084:	40010800 	.word	0x40010800

08004088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_TIM_Base_MspInit+0x34>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10b      	bne.n	80040b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <HAL_TIM_Base_MspInit+0x38>)
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_TIM_Base_MspInit+0x38>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040a4:	6193      	str	r3, [r2, #24]
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_TIM_Base_MspInit+0x38>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <HAL_TIM_MspPostInit+0x74>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d125      	bne.n	8004130 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <HAL_TIM_MspPostInit+0x78>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_TIM_MspPostInit+0x78>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	6193      	str	r3, [r2, #24]
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_TIM_MspPostInit+0x78>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80040fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	2302      	movs	r3, #2
 8004104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	2302      	movs	r3, #2
 8004108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f107 0310 	add.w	r3, r7, #16
 800410e:	4619      	mov	r1, r3
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <HAL_TIM_MspPostInit+0x7c>)
 8004112:	f7fd f99f 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO2_Pin;
 8004116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800411a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411c:	2302      	movs	r3, #2
 800411e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004120:	2303      	movs	r3, #3
 8004122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8004124:	f107 0310 	add.w	r3, r7, #16
 8004128:	4619      	mov	r1, r3
 800412a:	4805      	ldr	r0, [pc, #20]	; (8004140 <HAL_TIM_MspPostInit+0x7c>)
 800412c:	f7fd f992 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004130:	bf00      	nop
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40021000 	.word	0x40021000
 8004140:	40010800 	.word	0x40010800

08004144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_UART_MspInit+0x98>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d137      	bne.n	80041d4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_UART_MspInit+0x9c>)
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_UART_MspInit+0x9c>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416e:	61d3      	str	r3, [r2, #28]
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_UART_MspInit+0x9c>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_UART_MspInit+0x9c>)
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <HAL_UART_MspInit+0x9c>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6193      	str	r3, [r2, #24]
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_UART_MspInit+0x9c>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004194:	2304      	movs	r3, #4
 8004196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800419c:	2303      	movs	r3, #3
 800419e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	4619      	mov	r1, r3
 80041a6:	480f      	ldr	r0, [pc, #60]	; (80041e4 <HAL_UART_MspInit+0xa0>)
 80041a8:	f7fd f954 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041ac:	2308      	movs	r3, #8
 80041ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b8:	f107 0310 	add.w	r3, r7, #16
 80041bc:	4619      	mov	r1, r3
 80041be:	4809      	ldr	r0, [pc, #36]	; (80041e4 <HAL_UART_MspInit+0xa0>)
 80041c0:	f7fd f948 	bl	8001454 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2100      	movs	r1, #0
 80041c8:	2026      	movs	r0, #38	; 0x26
 80041ca:	f7fd f890 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041ce:	2026      	movs	r0, #38	; 0x26
 80041d0:	f7fd f8a9 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041d4:	bf00      	nop
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40004400 	.word	0x40004400
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40010800 	.word	0x40010800

080041e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <HardFault_Handler+0x4>

080041fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041fe:	e7fe      	b.n	80041fe <MemManage_Handler+0x4>

08004200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004204:	e7fe      	b.n	8004204 <BusFault_Handler+0x4>

08004206 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800420a:	e7fe      	b.n	800420a <UsageFault_Handler+0x4>

0800420c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004234:	f7fc fc32 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004238:	bf00      	nop
 800423a:	bd80      	pop	{r7, pc}

0800423c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	  volatile static size_t buff_free=RX_BUFF_SIZE;
	  //*buff_ptr++=huart1.Instance->DR;
	  *buff_ptr++=USART2->DR;
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <USART2_IRQHandler+0x48>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	490f      	ldr	r1, [pc, #60]	; (8004284 <USART2_IRQHandler+0x48>)
 8004248:	600a      	str	r2, [r1, #0]
 800424a:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <USART2_IRQHandler+0x4c>)
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
	  buff_free--;
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <USART2_IRQHandler+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a0c      	ldr	r2, [pc, #48]	; (800428c <USART2_IRQHandler+0x50>)
 800425a:	6013      	str	r3, [r2, #0]
	  if(buff_free==0){
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <USART2_IRQHandler+0x50>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <USART2_IRQHandler+0x3c>
		  printf("rx_buff=%s\r\n",rx_buff);
 8004264:	490a      	ldr	r1, [pc, #40]	; (8004290 <USART2_IRQHandler+0x54>)
 8004266:	480b      	ldr	r0, [pc, #44]	; (8004294 <USART2_IRQHandler+0x58>)
 8004268:	f000 f93a 	bl	80044e0 <iprintf>
		  buff_ptr=rx_buff;
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <USART2_IRQHandler+0x48>)
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <USART2_IRQHandler+0x54>)
 8004270:	601a      	str	r2, [r3, #0]
		  buff_free=RX_BUFF_SIZE;
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <USART2_IRQHandler+0x50>)
 8004274:	220a      	movs	r2, #10
 8004276:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004278:	4807      	ldr	r0, [pc, #28]	; (8004298 <USART2_IRQHandler+0x5c>)
 800427a:	f7fe fd97 	bl	8002dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c
 8004288:	40004400 	.word	0x40004400
 800428c:	20000010 	.word	0x20000010
 8004290:	200000f4 	.word	0x200000f4
 8004294:	080053f0 	.word	0x080053f0
 8004298:	200001a8 	.word	0x200001a8

0800429c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e00a      	b.n	80042c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042ae:	68bc      	ldr	r4, [r7, #8]
 80042b0:	1c63      	adds	r3, r4, #1
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	f3af 8000 	nop.w
 80042b8:	4603      	mov	r3, r0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	3301      	adds	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	dbf0      	blt.n	80042ae <_read+0x12>
	}

return len;
 80042cc:	687b      	ldr	r3, [r7, #4]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd90      	pop	{r4, r7, pc}

080042d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e009      	b.n	80042fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	60ba      	str	r2, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fe49 	bl	8003f88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3301      	adds	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	dbf1      	blt.n	80042e8 <_write+0x12>
	}
	return len;
 8004304:	687b      	ldr	r3, [r7, #4]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <_sbrk+0x50>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <_sbrk+0x16>
		heap_end = &end;
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <_sbrk+0x50>)
 8004322:	4a10      	ldr	r2, [pc, #64]	; (8004364 <_sbrk+0x54>)
 8004324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <_sbrk+0x50>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <_sbrk+0x50>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	466a      	mov	r2, sp
 8004336:	4293      	cmp	r3, r2
 8004338:	d907      	bls.n	800434a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800433a:	f000 f89f 	bl	800447c <__errno>
 800433e:	4602      	mov	r2, r0
 8004340:	230c      	movs	r3, #12
 8004342:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	e006      	b.n	8004358 <_sbrk+0x48>
	}

	heap_end += incr;
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <_sbrk+0x50>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	4a03      	ldr	r2, [pc, #12]	; (8004360 <_sbrk+0x50>)
 8004354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200000a4 	.word	0x200000a4
 8004364:	200001ec 	.word	0x200001ec

08004368 <_close>:

int _close(int file)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	return -1;
 8004370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800438e:	605a      	str	r2, [r3, #4]
	return 0;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <_isatty>:

int _isatty(int file)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	return 1;
 80043a4:	2301      	movs	r3, #1
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
	return 0;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <SystemInit+0x5c>)
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <SystemInit+0x5c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80043d8:	4912      	ldr	r1, [pc, #72]	; (8004424 <SystemInit+0x5c>)
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <SystemInit+0x5c>)
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <SystemInit+0x60>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <SystemInit+0x5c>)
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <SystemInit+0x5c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043f4:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <SystemInit+0x5c>)
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <SystemInit+0x5c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <SystemInit+0x5c>)
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <SystemInit+0x5c>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800440a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <SystemInit+0x5c>)
 800440e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004412:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <SystemInit+0x64>)
 8004416:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800441a:	609a      	str	r2, [r3, #8]
#endif 
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000
 8004428:	f8ff0000 	.word	0xf8ff0000
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004430:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004432:	e003      	b.n	800443c <LoopCopyDataInit>

08004434 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004436:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004438:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800443a:	3104      	adds	r1, #4

0800443c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800443c:	480a      	ldr	r0, [pc, #40]	; (8004468 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004440:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004442:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004444:	d3f6      	bcc.n	8004434 <CopyDataInit>
  ldr r2, =_sbss
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004448:	e002      	b.n	8004450 <LoopFillZerobss>

0800444a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800444a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800444c:	f842 3b04 	str.w	r3, [r2], #4

08004450 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004452:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004454:	d3f9      	bcc.n	800444a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004456:	f7ff ffb7 	bl	80043c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800445a:	f000 f815 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800445e:	f7fe ffff 	bl	8003460 <main>
  bx lr
 8004462:	4770      	bx	lr
  ldr r3, =_sidata
 8004464:	080054b8 	.word	0x080054b8
  ldr r0, =_sdata
 8004468:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800446c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8004470:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8004474:	200001ec 	.word	0x200001ec

08004478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004478:	e7fe      	b.n	8004478 <ADC1_2_IRQHandler>
	...

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	; (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000018 	.word	0x20000018

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	2500      	movs	r5, #0
 800448c:	4e0c      	ldr	r6, [pc, #48]	; (80044c0 <__libc_init_array+0x38>)
 800448e:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 8004490:	1ba4      	subs	r4, r4, r6
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	42a5      	cmp	r5, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	f000 ff8a 	bl	80053b0 <_init>
 800449c:	2500      	movs	r5, #0
 800449e:	4e0a      	ldr	r6, [pc, #40]	; (80044c8 <__libc_init_array+0x40>)
 80044a0:	4c0a      	ldr	r4, [pc, #40]	; (80044cc <__libc_init_array+0x44>)
 80044a2:	1ba4      	subs	r4, r4, r6
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	42a5      	cmp	r5, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044b0:	4798      	blx	r3
 80044b2:	3501      	adds	r5, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ba:	4798      	blx	r3
 80044bc:	3501      	adds	r5, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	080054b0 	.word	0x080054b0
 80044c4:	080054b0 	.word	0x080054b0
 80044c8:	080054b0 	.word	0x080054b0
 80044cc:	080054b4 	.word	0x080054b4

080044d0 <memset>:
 80044d0:	4603      	mov	r3, r0
 80044d2:	4402      	add	r2, r0
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d100      	bne.n	80044da <memset+0xa>
 80044d8:	4770      	bx	lr
 80044da:	f803 1b01 	strb.w	r1, [r3], #1
 80044de:	e7f9      	b.n	80044d4 <memset+0x4>

080044e0 <iprintf>:
 80044e0:	b40f      	push	{r0, r1, r2, r3}
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <iprintf+0x2c>)
 80044e4:	b513      	push	{r0, r1, r4, lr}
 80044e6:	681c      	ldr	r4, [r3, #0]
 80044e8:	b124      	cbz	r4, 80044f4 <iprintf+0x14>
 80044ea:	69a3      	ldr	r3, [r4, #24]
 80044ec:	b913      	cbnz	r3, 80044f4 <iprintf+0x14>
 80044ee:	4620      	mov	r0, r4
 80044f0:	f000 fa24 	bl	800493c <__sinit>
 80044f4:	ab05      	add	r3, sp, #20
 80044f6:	9a04      	ldr	r2, [sp, #16]
 80044f8:	68a1      	ldr	r1, [r4, #8]
 80044fa:	4620      	mov	r0, r4
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	f000 fbdd 	bl	8004cbc <_vfiprintf_r>
 8004502:	b002      	add	sp, #8
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	b004      	add	sp, #16
 800450a:	4770      	bx	lr
 800450c:	20000018 	.word	0x20000018

08004510 <_puts_r>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	460e      	mov	r6, r1
 8004514:	4605      	mov	r5, r0
 8004516:	b118      	cbz	r0, 8004520 <_puts_r+0x10>
 8004518:	6983      	ldr	r3, [r0, #24]
 800451a:	b90b      	cbnz	r3, 8004520 <_puts_r+0x10>
 800451c:	f000 fa0e 	bl	800493c <__sinit>
 8004520:	69ab      	ldr	r3, [r5, #24]
 8004522:	68ac      	ldr	r4, [r5, #8]
 8004524:	b913      	cbnz	r3, 800452c <_puts_r+0x1c>
 8004526:	4628      	mov	r0, r5
 8004528:	f000 fa08 	bl	800493c <__sinit>
 800452c:	4b23      	ldr	r3, [pc, #140]	; (80045bc <_puts_r+0xac>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d117      	bne.n	8004562 <_puts_r+0x52>
 8004532:	686c      	ldr	r4, [r5, #4]
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	071b      	lsls	r3, r3, #28
 8004538:	d51d      	bpl.n	8004576 <_puts_r+0x66>
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	b1db      	cbz	r3, 8004576 <_puts_r+0x66>
 800453e:	3e01      	subs	r6, #1
 8004540:	68a3      	ldr	r3, [r4, #8]
 8004542:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004546:	3b01      	subs	r3, #1
 8004548:	60a3      	str	r3, [r4, #8]
 800454a:	b9e9      	cbnz	r1, 8004588 <_puts_r+0x78>
 800454c:	2b00      	cmp	r3, #0
 800454e:	da2e      	bge.n	80045ae <_puts_r+0x9e>
 8004550:	4622      	mov	r2, r4
 8004552:	210a      	movs	r1, #10
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f83f 	bl	80045d8 <__swbuf_r>
 800455a:	3001      	adds	r0, #1
 800455c:	d011      	beq.n	8004582 <_puts_r+0x72>
 800455e:	200a      	movs	r0, #10
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <_puts_r+0xb0>)
 8004564:	429c      	cmp	r4, r3
 8004566:	d101      	bne.n	800456c <_puts_r+0x5c>
 8004568:	68ac      	ldr	r4, [r5, #8]
 800456a:	e7e3      	b.n	8004534 <_puts_r+0x24>
 800456c:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <_puts_r+0xb4>)
 800456e:	429c      	cmp	r4, r3
 8004570:	bf08      	it	eq
 8004572:	68ec      	ldreq	r4, [r5, #12]
 8004574:	e7de      	b.n	8004534 <_puts_r+0x24>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f87f 	bl	800467c <__swsetup_r>
 800457e:	2800      	cmp	r0, #0
 8004580:	d0dd      	beq.n	800453e <_puts_r+0x2e>
 8004582:	f04f 30ff 	mov.w	r0, #4294967295
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	2b00      	cmp	r3, #0
 800458a:	da04      	bge.n	8004596 <_puts_r+0x86>
 800458c:	69a2      	ldr	r2, [r4, #24]
 800458e:	4293      	cmp	r3, r2
 8004590:	db06      	blt.n	80045a0 <_puts_r+0x90>
 8004592:	290a      	cmp	r1, #10
 8004594:	d004      	beq.n	80045a0 <_puts_r+0x90>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	7019      	strb	r1, [r3, #0]
 800459e:	e7cf      	b.n	8004540 <_puts_r+0x30>
 80045a0:	4622      	mov	r2, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 f818 	bl	80045d8 <__swbuf_r>
 80045a8:	3001      	adds	r0, #1
 80045aa:	d1c9      	bne.n	8004540 <_puts_r+0x30>
 80045ac:	e7e9      	b.n	8004582 <_puts_r+0x72>
 80045ae:	200a      	movs	r0, #10
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	6022      	str	r2, [r4, #0]
 80045b6:	7018      	strb	r0, [r3, #0]
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	bf00      	nop
 80045bc:	0800543c 	.word	0x0800543c
 80045c0:	0800545c 	.word	0x0800545c
 80045c4:	0800541c 	.word	0x0800541c

080045c8 <puts>:
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <puts+0xc>)
 80045ca:	4601      	mov	r1, r0
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f7ff bf9f 	b.w	8004510 <_puts_r>
 80045d2:	bf00      	nop
 80045d4:	20000018 	.word	0x20000018

080045d8 <__swbuf_r>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	460e      	mov	r6, r1
 80045dc:	4614      	mov	r4, r2
 80045de:	4605      	mov	r5, r0
 80045e0:	b118      	cbz	r0, 80045ea <__swbuf_r+0x12>
 80045e2:	6983      	ldr	r3, [r0, #24]
 80045e4:	b90b      	cbnz	r3, 80045ea <__swbuf_r+0x12>
 80045e6:	f000 f9a9 	bl	800493c <__sinit>
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <__swbuf_r+0x98>)
 80045ec:	429c      	cmp	r4, r3
 80045ee:	d12a      	bne.n	8004646 <__swbuf_r+0x6e>
 80045f0:	686c      	ldr	r4, [r5, #4]
 80045f2:	69a3      	ldr	r3, [r4, #24]
 80045f4:	60a3      	str	r3, [r4, #8]
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	071a      	lsls	r2, r3, #28
 80045fa:	d52e      	bpl.n	800465a <__swbuf_r+0x82>
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	b363      	cbz	r3, 800465a <__swbuf_r+0x82>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	b2f6      	uxtb	r6, r6
 8004606:	1ac0      	subs	r0, r0, r3
 8004608:	6963      	ldr	r3, [r4, #20]
 800460a:	4637      	mov	r7, r6
 800460c:	4298      	cmp	r0, r3
 800460e:	db04      	blt.n	800461a <__swbuf_r+0x42>
 8004610:	4621      	mov	r1, r4
 8004612:	4628      	mov	r0, r5
 8004614:	f000 f928 	bl	8004868 <_fflush_r>
 8004618:	bb28      	cbnz	r0, 8004666 <__swbuf_r+0x8e>
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	3001      	adds	r0, #1
 800461e:	3b01      	subs	r3, #1
 8004620:	60a3      	str	r3, [r4, #8]
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	6022      	str	r2, [r4, #0]
 8004628:	701e      	strb	r6, [r3, #0]
 800462a:	6963      	ldr	r3, [r4, #20]
 800462c:	4298      	cmp	r0, r3
 800462e:	d004      	beq.n	800463a <__swbuf_r+0x62>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	07db      	lsls	r3, r3, #31
 8004634:	d519      	bpl.n	800466a <__swbuf_r+0x92>
 8004636:	2e0a      	cmp	r6, #10
 8004638:	d117      	bne.n	800466a <__swbuf_r+0x92>
 800463a:	4621      	mov	r1, r4
 800463c:	4628      	mov	r0, r5
 800463e:	f000 f913 	bl	8004868 <_fflush_r>
 8004642:	b190      	cbz	r0, 800466a <__swbuf_r+0x92>
 8004644:	e00f      	b.n	8004666 <__swbuf_r+0x8e>
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <__swbuf_r+0x9c>)
 8004648:	429c      	cmp	r4, r3
 800464a:	d101      	bne.n	8004650 <__swbuf_r+0x78>
 800464c:	68ac      	ldr	r4, [r5, #8]
 800464e:	e7d0      	b.n	80045f2 <__swbuf_r+0x1a>
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <__swbuf_r+0xa0>)
 8004652:	429c      	cmp	r4, r3
 8004654:	bf08      	it	eq
 8004656:	68ec      	ldreq	r4, [r5, #12]
 8004658:	e7cb      	b.n	80045f2 <__swbuf_r+0x1a>
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f80d 	bl	800467c <__swsetup_r>
 8004662:	2800      	cmp	r0, #0
 8004664:	d0cc      	beq.n	8004600 <__swbuf_r+0x28>
 8004666:	f04f 37ff 	mov.w	r7, #4294967295
 800466a:	4638      	mov	r0, r7
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466e:	bf00      	nop
 8004670:	0800543c 	.word	0x0800543c
 8004674:	0800545c 	.word	0x0800545c
 8004678:	0800541c 	.word	0x0800541c

0800467c <__swsetup_r>:
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <__swsetup_r+0xcc>)
 800467e:	b570      	push	{r4, r5, r6, lr}
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	4606      	mov	r6, r0
 8004684:	460c      	mov	r4, r1
 8004686:	b125      	cbz	r5, 8004692 <__swsetup_r+0x16>
 8004688:	69ab      	ldr	r3, [r5, #24]
 800468a:	b913      	cbnz	r3, 8004692 <__swsetup_r+0x16>
 800468c:	4628      	mov	r0, r5
 800468e:	f000 f955 	bl	800493c <__sinit>
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <__swsetup_r+0xd0>)
 8004694:	429c      	cmp	r4, r3
 8004696:	d10f      	bne.n	80046b8 <__swsetup_r+0x3c>
 8004698:	686c      	ldr	r4, [r5, #4]
 800469a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	0715      	lsls	r5, r2, #28
 80046a2:	d42c      	bmi.n	80046fe <__swsetup_r+0x82>
 80046a4:	06d0      	lsls	r0, r2, #27
 80046a6:	d411      	bmi.n	80046cc <__swsetup_r+0x50>
 80046a8:	2209      	movs	r2, #9
 80046aa:	6032      	str	r2, [r6, #0]
 80046ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <__swsetup_r+0xd4>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	d101      	bne.n	80046c2 <__swsetup_r+0x46>
 80046be:	68ac      	ldr	r4, [r5, #8]
 80046c0:	e7eb      	b.n	800469a <__swsetup_r+0x1e>
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <__swsetup_r+0xd8>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	bf08      	it	eq
 80046c8:	68ec      	ldreq	r4, [r5, #12]
 80046ca:	e7e6      	b.n	800469a <__swsetup_r+0x1e>
 80046cc:	0751      	lsls	r1, r2, #29
 80046ce:	d512      	bpl.n	80046f6 <__swsetup_r+0x7a>
 80046d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046d2:	b141      	cbz	r1, 80046e6 <__swsetup_r+0x6a>
 80046d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <__swsetup_r+0x66>
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 fa1b 	bl	8004b18 <_free_r>
 80046e2:	2300      	movs	r3, #0
 80046e4:	6363      	str	r3, [r4, #52]	; 0x34
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	2300      	movs	r3, #0
 80046f0:	6063      	str	r3, [r4, #4]
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	f043 0308 	orr.w	r3, r3, #8
 80046fc:	81a3      	strh	r3, [r4, #12]
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	b94b      	cbnz	r3, 8004716 <__swsetup_r+0x9a>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470c:	d003      	beq.n	8004716 <__swsetup_r+0x9a>
 800470e:	4621      	mov	r1, r4
 8004710:	4630      	mov	r0, r6
 8004712:	f000 f9c1 	bl	8004a98 <__smakebuf_r>
 8004716:	89a2      	ldrh	r2, [r4, #12]
 8004718:	f012 0301 	ands.w	r3, r2, #1
 800471c:	d00c      	beq.n	8004738 <__swsetup_r+0xbc>
 800471e:	2300      	movs	r3, #0
 8004720:	60a3      	str	r3, [r4, #8]
 8004722:	6963      	ldr	r3, [r4, #20]
 8004724:	425b      	negs	r3, r3
 8004726:	61a3      	str	r3, [r4, #24]
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	b953      	cbnz	r3, 8004742 <__swsetup_r+0xc6>
 800472c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004730:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004734:	d1ba      	bne.n	80046ac <__swsetup_r+0x30>
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	0792      	lsls	r2, r2, #30
 800473a:	bf58      	it	pl
 800473c:	6963      	ldrpl	r3, [r4, #20]
 800473e:	60a3      	str	r3, [r4, #8]
 8004740:	e7f2      	b.n	8004728 <__swsetup_r+0xac>
 8004742:	2000      	movs	r0, #0
 8004744:	e7f7      	b.n	8004736 <__swsetup_r+0xba>
 8004746:	bf00      	nop
 8004748:	20000018 	.word	0x20000018
 800474c:	0800543c 	.word	0x0800543c
 8004750:	0800545c 	.word	0x0800545c
 8004754:	0800541c 	.word	0x0800541c

08004758 <__sflush_r>:
 8004758:	898a      	ldrh	r2, [r1, #12]
 800475a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475e:	4605      	mov	r5, r0
 8004760:	0710      	lsls	r0, r2, #28
 8004762:	460c      	mov	r4, r1
 8004764:	d45a      	bmi.n	800481c <__sflush_r+0xc4>
 8004766:	684b      	ldr	r3, [r1, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	dc05      	bgt.n	8004778 <__sflush_r+0x20>
 800476c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	dc02      	bgt.n	8004778 <__sflush_r+0x20>
 8004772:	2000      	movs	r0, #0
 8004774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800477a:	2e00      	cmp	r6, #0
 800477c:	d0f9      	beq.n	8004772 <__sflush_r+0x1a>
 800477e:	2300      	movs	r3, #0
 8004780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004784:	682f      	ldr	r7, [r5, #0]
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	d033      	beq.n	80047f2 <__sflush_r+0x9a>
 800478a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	075a      	lsls	r2, r3, #29
 8004790:	d505      	bpl.n	800479e <__sflush_r+0x46>
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004798:	b10b      	cbz	r3, 800479e <__sflush_r+0x46>
 800479a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800479c:	1ac0      	subs	r0, r0, r3
 800479e:	2300      	movs	r3, #0
 80047a0:	4602      	mov	r2, r0
 80047a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a4:	6a21      	ldr	r1, [r4, #32]
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b0      	blx	r6
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	d106      	bne.n	80047be <__sflush_r+0x66>
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	291d      	cmp	r1, #29
 80047b4:	d84b      	bhi.n	800484e <__sflush_r+0xf6>
 80047b6:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <__sflush_r+0x10c>)
 80047b8:	40ca      	lsrs	r2, r1
 80047ba:	07d6      	lsls	r6, r2, #31
 80047bc:	d547      	bpl.n	800484e <__sflush_r+0xf6>
 80047be:	2200      	movs	r2, #0
 80047c0:	6062      	str	r2, [r4, #4]
 80047c2:	6922      	ldr	r2, [r4, #16]
 80047c4:	04d9      	lsls	r1, r3, #19
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	d504      	bpl.n	80047d4 <__sflush_r+0x7c>
 80047ca:	1c42      	adds	r2, r0, #1
 80047cc:	d101      	bne.n	80047d2 <__sflush_r+0x7a>
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	b903      	cbnz	r3, 80047d4 <__sflush_r+0x7c>
 80047d2:	6560      	str	r0, [r4, #84]	; 0x54
 80047d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047d6:	602f      	str	r7, [r5, #0]
 80047d8:	2900      	cmp	r1, #0
 80047da:	d0ca      	beq.n	8004772 <__sflush_r+0x1a>
 80047dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d002      	beq.n	80047ea <__sflush_r+0x92>
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f997 	bl	8004b18 <_free_r>
 80047ea:	2000      	movs	r0, #0
 80047ec:	6360      	str	r0, [r4, #52]	; 0x34
 80047ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047f2:	6a21      	ldr	r1, [r4, #32]
 80047f4:	2301      	movs	r3, #1
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b0      	blx	r6
 80047fa:	1c41      	adds	r1, r0, #1
 80047fc:	d1c6      	bne.n	800478c <__sflush_r+0x34>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0c3      	beq.n	800478c <__sflush_r+0x34>
 8004804:	2b1d      	cmp	r3, #29
 8004806:	d001      	beq.n	800480c <__sflush_r+0xb4>
 8004808:	2b16      	cmp	r3, #22
 800480a:	d101      	bne.n	8004810 <__sflush_r+0xb8>
 800480c:	602f      	str	r7, [r5, #0]
 800480e:	e7b0      	b.n	8004772 <__sflush_r+0x1a>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481c:	690f      	ldr	r7, [r1, #16]
 800481e:	2f00      	cmp	r7, #0
 8004820:	d0a7      	beq.n	8004772 <__sflush_r+0x1a>
 8004822:	0793      	lsls	r3, r2, #30
 8004824:	bf18      	it	ne
 8004826:	2300      	movne	r3, #0
 8004828:	680e      	ldr	r6, [r1, #0]
 800482a:	bf08      	it	eq
 800482c:	694b      	ldreq	r3, [r1, #20]
 800482e:	eba6 0807 	sub.w	r8, r6, r7
 8004832:	600f      	str	r7, [r1, #0]
 8004834:	608b      	str	r3, [r1, #8]
 8004836:	f1b8 0f00 	cmp.w	r8, #0
 800483a:	dd9a      	ble.n	8004772 <__sflush_r+0x1a>
 800483c:	4643      	mov	r3, r8
 800483e:	463a      	mov	r2, r7
 8004840:	6a21      	ldr	r1, [r4, #32]
 8004842:	4628      	mov	r0, r5
 8004844:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004846:	47b0      	blx	r6
 8004848:	2800      	cmp	r0, #0
 800484a:	dc07      	bgt.n	800485c <__sflush_r+0x104>
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	4407      	add	r7, r0
 800485e:	eba8 0800 	sub.w	r8, r8, r0
 8004862:	e7e8      	b.n	8004836 <__sflush_r+0xde>
 8004864:	20400001 	.word	0x20400001

08004868 <_fflush_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	690b      	ldr	r3, [r1, #16]
 800486c:	4605      	mov	r5, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b1db      	cbz	r3, 80048aa <_fflush_r+0x42>
 8004872:	b118      	cbz	r0, 800487c <_fflush_r+0x14>
 8004874:	6983      	ldr	r3, [r0, #24]
 8004876:	b90b      	cbnz	r3, 800487c <_fflush_r+0x14>
 8004878:	f000 f860 	bl	800493c <__sinit>
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <_fflush_r+0x48>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d109      	bne.n	8004896 <_fflush_r+0x2e>
 8004882:	686c      	ldr	r4, [r5, #4]
 8004884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004888:	b17b      	cbz	r3, 80048aa <_fflush_r+0x42>
 800488a:	4621      	mov	r1, r4
 800488c:	4628      	mov	r0, r5
 800488e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004892:	f7ff bf61 	b.w	8004758 <__sflush_r>
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <_fflush_r+0x4c>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d101      	bne.n	80048a0 <_fflush_r+0x38>
 800489c:	68ac      	ldr	r4, [r5, #8]
 800489e:	e7f1      	b.n	8004884 <_fflush_r+0x1c>
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_fflush_r+0x50>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	bf08      	it	eq
 80048a6:	68ec      	ldreq	r4, [r5, #12]
 80048a8:	e7ec      	b.n	8004884 <_fflush_r+0x1c>
 80048aa:	2000      	movs	r0, #0
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
 80048ae:	bf00      	nop
 80048b0:	0800543c 	.word	0x0800543c
 80048b4:	0800545c 	.word	0x0800545c
 80048b8:	0800541c 	.word	0x0800541c

080048bc <_cleanup_r>:
 80048bc:	4901      	ldr	r1, [pc, #4]	; (80048c4 <_cleanup_r+0x8>)
 80048be:	f000 b8a9 	b.w	8004a14 <_fwalk_reent>
 80048c2:	bf00      	nop
 80048c4:	08004869 	.word	0x08004869

080048c8 <std.isra.0>:
 80048c8:	2300      	movs	r3, #0
 80048ca:	b510      	push	{r4, lr}
 80048cc:	4604      	mov	r4, r0
 80048ce:	6003      	str	r3, [r0, #0]
 80048d0:	6043      	str	r3, [r0, #4]
 80048d2:	6083      	str	r3, [r0, #8]
 80048d4:	8181      	strh	r1, [r0, #12]
 80048d6:	6643      	str	r3, [r0, #100]	; 0x64
 80048d8:	81c2      	strh	r2, [r0, #14]
 80048da:	6103      	str	r3, [r0, #16]
 80048dc:	6143      	str	r3, [r0, #20]
 80048de:	6183      	str	r3, [r0, #24]
 80048e0:	4619      	mov	r1, r3
 80048e2:	2208      	movs	r2, #8
 80048e4:	305c      	adds	r0, #92	; 0x5c
 80048e6:	f7ff fdf3 	bl	80044d0 <memset>
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <std.isra.0+0x38>)
 80048ec:	6224      	str	r4, [r4, #32]
 80048ee:	6263      	str	r3, [r4, #36]	; 0x24
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <std.isra.0+0x3c>)
 80048f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <std.isra.0+0x40>)
 80048f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <std.isra.0+0x44>)
 80048fa:	6323      	str	r3, [r4, #48]	; 0x30
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	bf00      	nop
 8004900:	08005239 	.word	0x08005239
 8004904:	0800525b 	.word	0x0800525b
 8004908:	08005293 	.word	0x08005293
 800490c:	080052b7 	.word	0x080052b7

08004910 <__sfmoreglue>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	2568      	movs	r5, #104	; 0x68
 8004914:	1e4a      	subs	r2, r1, #1
 8004916:	4355      	muls	r5, r2
 8004918:	460e      	mov	r6, r1
 800491a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800491e:	f000 f947 	bl	8004bb0 <_malloc_r>
 8004922:	4604      	mov	r4, r0
 8004924:	b140      	cbz	r0, 8004938 <__sfmoreglue+0x28>
 8004926:	2100      	movs	r1, #0
 8004928:	e880 0042 	stmia.w	r0, {r1, r6}
 800492c:	300c      	adds	r0, #12
 800492e:	60a0      	str	r0, [r4, #8]
 8004930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004934:	f7ff fdcc 	bl	80044d0 <memset>
 8004938:	4620      	mov	r0, r4
 800493a:	bd70      	pop	{r4, r5, r6, pc}

0800493c <__sinit>:
 800493c:	6983      	ldr	r3, [r0, #24]
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
 8004942:	bb33      	cbnz	r3, 8004992 <__sinit+0x56>
 8004944:	6483      	str	r3, [r0, #72]	; 0x48
 8004946:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004948:	6503      	str	r3, [r0, #80]	; 0x50
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <__sinit+0x58>)
 800494c:	4a12      	ldr	r2, [pc, #72]	; (8004998 <__sinit+0x5c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6282      	str	r2, [r0, #40]	; 0x28
 8004952:	4298      	cmp	r0, r3
 8004954:	bf04      	itt	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	6183      	streq	r3, [r0, #24]
 800495a:	f000 f81f 	bl	800499c <__sfp>
 800495e:	6060      	str	r0, [r4, #4]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 f81b 	bl	800499c <__sfp>
 8004966:	60a0      	str	r0, [r4, #8]
 8004968:	4620      	mov	r0, r4
 800496a:	f000 f817 	bl	800499c <__sfp>
 800496e:	2200      	movs	r2, #0
 8004970:	60e0      	str	r0, [r4, #12]
 8004972:	2104      	movs	r1, #4
 8004974:	6860      	ldr	r0, [r4, #4]
 8004976:	f7ff ffa7 	bl	80048c8 <std.isra.0>
 800497a:	2201      	movs	r2, #1
 800497c:	2109      	movs	r1, #9
 800497e:	68a0      	ldr	r0, [r4, #8]
 8004980:	f7ff ffa2 	bl	80048c8 <std.isra.0>
 8004984:	2202      	movs	r2, #2
 8004986:	2112      	movs	r1, #18
 8004988:	68e0      	ldr	r0, [r4, #12]
 800498a:	f7ff ff9d 	bl	80048c8 <std.isra.0>
 800498e:	2301      	movs	r3, #1
 8004990:	61a3      	str	r3, [r4, #24]
 8004992:	bd10      	pop	{r4, pc}
 8004994:	08005418 	.word	0x08005418
 8004998:	080048bd 	.word	0x080048bd

0800499c <__sfp>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <__sfp+0x74>)
 80049a0:	4607      	mov	r7, r0
 80049a2:	681e      	ldr	r6, [r3, #0]
 80049a4:	69b3      	ldr	r3, [r6, #24]
 80049a6:	b913      	cbnz	r3, 80049ae <__sfp+0x12>
 80049a8:	4630      	mov	r0, r6
 80049aa:	f7ff ffc7 	bl	800493c <__sinit>
 80049ae:	3648      	adds	r6, #72	; 0x48
 80049b0:	68b4      	ldr	r4, [r6, #8]
 80049b2:	6873      	ldr	r3, [r6, #4]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	d503      	bpl.n	80049c0 <__sfp+0x24>
 80049b8:	6833      	ldr	r3, [r6, #0]
 80049ba:	b133      	cbz	r3, 80049ca <__sfp+0x2e>
 80049bc:	6836      	ldr	r6, [r6, #0]
 80049be:	e7f7      	b.n	80049b0 <__sfp+0x14>
 80049c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049c4:	b16d      	cbz	r5, 80049e2 <__sfp+0x46>
 80049c6:	3468      	adds	r4, #104	; 0x68
 80049c8:	e7f4      	b.n	80049b4 <__sfp+0x18>
 80049ca:	2104      	movs	r1, #4
 80049cc:	4638      	mov	r0, r7
 80049ce:	f7ff ff9f 	bl	8004910 <__sfmoreglue>
 80049d2:	6030      	str	r0, [r6, #0]
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d1f1      	bne.n	80049bc <__sfp+0x20>
 80049d8:	230c      	movs	r3, #12
 80049da:	4604      	mov	r4, r0
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4620      	mov	r0, r4
 80049e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e6:	81e3      	strh	r3, [r4, #14]
 80049e8:	2301      	movs	r3, #1
 80049ea:	6665      	str	r5, [r4, #100]	; 0x64
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	6025      	str	r5, [r4, #0]
 80049f0:	60a5      	str	r5, [r4, #8]
 80049f2:	6065      	str	r5, [r4, #4]
 80049f4:	6125      	str	r5, [r4, #16]
 80049f6:	6165      	str	r5, [r4, #20]
 80049f8:	61a5      	str	r5, [r4, #24]
 80049fa:	2208      	movs	r2, #8
 80049fc:	4629      	mov	r1, r5
 80049fe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a02:	f7ff fd65 	bl	80044d0 <memset>
 8004a06:	6365      	str	r5, [r4, #52]	; 0x34
 8004a08:	63a5      	str	r5, [r4, #56]	; 0x38
 8004a0a:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a0e:	e7e6      	b.n	80049de <__sfp+0x42>
 8004a10:	08005418 	.word	0x08005418

08004a14 <_fwalk_reent>:
 8004a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a18:	4680      	mov	r8, r0
 8004a1a:	4689      	mov	r9, r1
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a22:	b914      	cbnz	r4, 8004a2a <_fwalk_reent+0x16>
 8004a24:	4630      	mov	r0, r6
 8004a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	68a5      	ldr	r5, [r4, #8]
 8004a2c:	6867      	ldr	r7, [r4, #4]
 8004a2e:	3f01      	subs	r7, #1
 8004a30:	d501      	bpl.n	8004a36 <_fwalk_reent+0x22>
 8004a32:	6824      	ldr	r4, [r4, #0]
 8004a34:	e7f5      	b.n	8004a22 <_fwalk_reent+0xe>
 8004a36:	89ab      	ldrh	r3, [r5, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d907      	bls.n	8004a4c <_fwalk_reent+0x38>
 8004a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a40:	3301      	adds	r3, #1
 8004a42:	d003      	beq.n	8004a4c <_fwalk_reent+0x38>
 8004a44:	4629      	mov	r1, r5
 8004a46:	4640      	mov	r0, r8
 8004a48:	47c8      	blx	r9
 8004a4a:	4306      	orrs	r6, r0
 8004a4c:	3568      	adds	r5, #104	; 0x68
 8004a4e:	e7ee      	b.n	8004a2e <_fwalk_reent+0x1a>

08004a50 <__swhatbuf_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460e      	mov	r6, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	b090      	sub	sp, #64	; 0x40
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	da07      	bge.n	8004a72 <__swhatbuf_r+0x22>
 8004a62:	2300      	movs	r3, #0
 8004a64:	602b      	str	r3, [r5, #0]
 8004a66:	89b3      	ldrh	r3, [r6, #12]
 8004a68:	061a      	lsls	r2, r3, #24
 8004a6a:	d410      	bmi.n	8004a8e <__swhatbuf_r+0x3e>
 8004a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a70:	e00e      	b.n	8004a90 <__swhatbuf_r+0x40>
 8004a72:	aa01      	add	r2, sp, #4
 8004a74:	f000 fc46 	bl	8005304 <_fstat_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	dbf2      	blt.n	8004a62 <__swhatbuf_r+0x12>
 8004a7c:	9a02      	ldr	r2, [sp, #8]
 8004a7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a86:	425a      	negs	r2, r3
 8004a88:	415a      	adcs	r2, r3
 8004a8a:	602a      	str	r2, [r5, #0]
 8004a8c:	e7ee      	b.n	8004a6c <__swhatbuf_r+0x1c>
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	2000      	movs	r0, #0
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	b010      	add	sp, #64	; 0x40
 8004a96:	bd70      	pop	{r4, r5, r6, pc}

08004a98 <__smakebuf_r>:
 8004a98:	898b      	ldrh	r3, [r1, #12]
 8004a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a9c:	079d      	lsls	r5, r3, #30
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	d507      	bpl.n	8004ab4 <__smakebuf_r+0x1c>
 8004aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	2301      	movs	r3, #1
 8004aae:	6163      	str	r3, [r4, #20]
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	ab01      	add	r3, sp, #4
 8004ab6:	466a      	mov	r2, sp
 8004ab8:	f7ff ffca 	bl	8004a50 <__swhatbuf_r>
 8004abc:	9900      	ldr	r1, [sp, #0]
 8004abe:	4605      	mov	r5, r0
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f000 f875 	bl	8004bb0 <_malloc_r>
 8004ac6:	b948      	cbnz	r0, 8004adc <__smakebuf_r+0x44>
 8004ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004acc:	059a      	lsls	r2, r3, #22
 8004ace:	d4ef      	bmi.n	8004ab0 <__smakebuf_r+0x18>
 8004ad0:	f023 0303 	bic.w	r3, r3, #3
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	e7e3      	b.n	8004aa4 <__smakebuf_r+0xc>
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <__smakebuf_r+0x7c>)
 8004ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	6020      	str	r0, [r4, #0]
 8004ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	9b00      	ldr	r3, [sp, #0]
 8004aec:	6120      	str	r0, [r4, #16]
 8004aee:	6163      	str	r3, [r4, #20]
 8004af0:	9b01      	ldr	r3, [sp, #4]
 8004af2:	b15b      	cbz	r3, 8004b0c <__smakebuf_r+0x74>
 8004af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 fc15 	bl	8005328 <_isatty_r>
 8004afe:	b128      	cbz	r0, 8004b0c <__smakebuf_r+0x74>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	431d      	orrs	r5, r3
 8004b10:	81a5      	strh	r5, [r4, #12]
 8004b12:	e7cd      	b.n	8004ab0 <__smakebuf_r+0x18>
 8004b14:	080048bd 	.word	0x080048bd

08004b18 <_free_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d043      	beq.n	8004ba8 <_free_r+0x90>
 8004b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b24:	1f0c      	subs	r4, r1, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bfb8      	it	lt
 8004b2a:	18e4      	addlt	r4, r4, r3
 8004b2c:	f000 fc2c 	bl	8005388 <__malloc_lock>
 8004b30:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <_free_r+0x94>)
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	4610      	mov	r0, r2
 8004b36:	b933      	cbnz	r3, 8004b46 <_free_r+0x2e>
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	6014      	str	r4, [r2, #0]
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b42:	f000 bc22 	b.w	800538a <__malloc_unlock>
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	d90b      	bls.n	8004b62 <_free_r+0x4a>
 8004b4a:	6821      	ldr	r1, [r4, #0]
 8004b4c:	1862      	adds	r2, r4, r1
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bf01      	itttt	eq
 8004b52:	681a      	ldreq	r2, [r3, #0]
 8004b54:	685b      	ldreq	r3, [r3, #4]
 8004b56:	1852      	addeq	r2, r2, r1
 8004b58:	6022      	streq	r2, [r4, #0]
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6004      	str	r4, [r0, #0]
 8004b5e:	e7ed      	b.n	8004b3c <_free_r+0x24>
 8004b60:	4613      	mov	r3, r2
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	b10a      	cbz	r2, 8004b6a <_free_r+0x52>
 8004b66:	42a2      	cmp	r2, r4
 8004b68:	d9fa      	bls.n	8004b60 <_free_r+0x48>
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	1858      	adds	r0, r3, r1
 8004b6e:	42a0      	cmp	r0, r4
 8004b70:	d10b      	bne.n	8004b8a <_free_r+0x72>
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	4401      	add	r1, r0
 8004b76:	1858      	adds	r0, r3, r1
 8004b78:	4282      	cmp	r2, r0
 8004b7a:	6019      	str	r1, [r3, #0]
 8004b7c:	d1de      	bne.n	8004b3c <_free_r+0x24>
 8004b7e:	6810      	ldr	r0, [r2, #0]
 8004b80:	6852      	ldr	r2, [r2, #4]
 8004b82:	4401      	add	r1, r0
 8004b84:	6019      	str	r1, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	e7d8      	b.n	8004b3c <_free_r+0x24>
 8004b8a:	d902      	bls.n	8004b92 <_free_r+0x7a>
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	e7d4      	b.n	8004b3c <_free_r+0x24>
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1821      	adds	r1, r4, r0
 8004b96:	428a      	cmp	r2, r1
 8004b98:	bf01      	itttt	eq
 8004b9a:	6811      	ldreq	r1, [r2, #0]
 8004b9c:	6852      	ldreq	r2, [r2, #4]
 8004b9e:	1809      	addeq	r1, r1, r0
 8004ba0:	6021      	streq	r1, [r4, #0]
 8004ba2:	6062      	str	r2, [r4, #4]
 8004ba4:	605c      	str	r4, [r3, #4]
 8004ba6:	e7c9      	b.n	8004b3c <_free_r+0x24>
 8004ba8:	bd38      	pop	{r3, r4, r5, pc}
 8004baa:	bf00      	nop
 8004bac:	200000a8 	.word	0x200000a8

08004bb0 <_malloc_r>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	1ccd      	adds	r5, r1, #3
 8004bb4:	f025 0503 	bic.w	r5, r5, #3
 8004bb8:	3508      	adds	r5, #8
 8004bba:	2d0c      	cmp	r5, #12
 8004bbc:	bf38      	it	cc
 8004bbe:	250c      	movcc	r5, #12
 8004bc0:	2d00      	cmp	r5, #0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	db01      	blt.n	8004bca <_malloc_r+0x1a>
 8004bc6:	42a9      	cmp	r1, r5
 8004bc8:	d903      	bls.n	8004bd2 <_malloc_r+0x22>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	2000      	movs	r0, #0
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	f000 fbd9 	bl	8005388 <__malloc_lock>
 8004bd6:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <_malloc_r+0xb4>)
 8004bd8:	6814      	ldr	r4, [r2, #0]
 8004bda:	4621      	mov	r1, r4
 8004bdc:	b991      	cbnz	r1, 8004c04 <_malloc_r+0x54>
 8004bde:	4c22      	ldr	r4, [pc, #136]	; (8004c68 <_malloc_r+0xb8>)
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	b91b      	cbnz	r3, 8004bec <_malloc_r+0x3c>
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 fb17 	bl	8005218 <_sbrk_r>
 8004bea:	6020      	str	r0, [r4, #0]
 8004bec:	4629      	mov	r1, r5
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 fb12 	bl	8005218 <_sbrk_r>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d126      	bne.n	8004c46 <_malloc_r+0x96>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	f000 fbc4 	bl	800538a <__malloc_unlock>
 8004c02:	e7e4      	b.n	8004bce <_malloc_r+0x1e>
 8004c04:	680b      	ldr	r3, [r1, #0]
 8004c06:	1b5b      	subs	r3, r3, r5
 8004c08:	d41a      	bmi.n	8004c40 <_malloc_r+0x90>
 8004c0a:	2b0b      	cmp	r3, #11
 8004c0c:	d90f      	bls.n	8004c2e <_malloc_r+0x7e>
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	18cc      	adds	r4, r1, r3
 8004c12:	50cd      	str	r5, [r1, r3]
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 fbb8 	bl	800538a <__malloc_unlock>
 8004c1a:	f104 000b 	add.w	r0, r4, #11
 8004c1e:	1d23      	adds	r3, r4, #4
 8004c20:	f020 0007 	bic.w	r0, r0, #7
 8004c24:	1ac3      	subs	r3, r0, r3
 8004c26:	d01b      	beq.n	8004c60 <_malloc_r+0xb0>
 8004c28:	425a      	negs	r2, r3
 8004c2a:	50e2      	str	r2, [r4, r3]
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
 8004c2e:	428c      	cmp	r4, r1
 8004c30:	bf0b      	itete	eq
 8004c32:	6863      	ldreq	r3, [r4, #4]
 8004c34:	684b      	ldrne	r3, [r1, #4]
 8004c36:	6013      	streq	r3, [r2, #0]
 8004c38:	6063      	strne	r3, [r4, #4]
 8004c3a:	bf18      	it	ne
 8004c3c:	460c      	movne	r4, r1
 8004c3e:	e7e9      	b.n	8004c14 <_malloc_r+0x64>
 8004c40:	460c      	mov	r4, r1
 8004c42:	6849      	ldr	r1, [r1, #4]
 8004c44:	e7ca      	b.n	8004bdc <_malloc_r+0x2c>
 8004c46:	1cc4      	adds	r4, r0, #3
 8004c48:	f024 0403 	bic.w	r4, r4, #3
 8004c4c:	42a0      	cmp	r0, r4
 8004c4e:	d005      	beq.n	8004c5c <_malloc_r+0xac>
 8004c50:	1a21      	subs	r1, r4, r0
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 fae0 	bl	8005218 <_sbrk_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d0cd      	beq.n	8004bf8 <_malloc_r+0x48>
 8004c5c:	6025      	str	r5, [r4, #0]
 8004c5e:	e7d9      	b.n	8004c14 <_malloc_r+0x64>
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
 8004c62:	bf00      	nop
 8004c64:	200000a8 	.word	0x200000a8
 8004c68:	200000ac 	.word	0x200000ac

08004c6c <__sfputc_r>:
 8004c6c:	6893      	ldr	r3, [r2, #8]
 8004c6e:	b410      	push	{r4}
 8004c70:	3b01      	subs	r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	6093      	str	r3, [r2, #8]
 8004c76:	da08      	bge.n	8004c8a <__sfputc_r+0x1e>
 8004c78:	6994      	ldr	r4, [r2, #24]
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	db02      	blt.n	8004c84 <__sfputc_r+0x18>
 8004c7e:	b2cb      	uxtb	r3, r1
 8004c80:	2b0a      	cmp	r3, #10
 8004c82:	d102      	bne.n	8004c8a <__sfputc_r+0x1e>
 8004c84:	bc10      	pop	{r4}
 8004c86:	f7ff bca7 	b.w	80045d8 <__swbuf_r>
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	1c58      	adds	r0, r3, #1
 8004c8e:	6010      	str	r0, [r2, #0]
 8004c90:	7019      	strb	r1, [r3, #0]
 8004c92:	b2c8      	uxtb	r0, r1
 8004c94:	bc10      	pop	{r4}
 8004c96:	4770      	bx	lr

08004c98 <__sfputs_r>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460f      	mov	r7, r1
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	18d5      	adds	r5, r2, r3
 8004ca2:	42ac      	cmp	r4, r5
 8004ca4:	d101      	bne.n	8004caa <__sfputs_r+0x12>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e007      	b.n	8004cba <__sfputs_r+0x22>
 8004caa:	463a      	mov	r2, r7
 8004cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f7ff ffdb 	bl	8004c6c <__sfputc_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d1f3      	bne.n	8004ca2 <__sfputs_r+0xa>
 8004cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004cbc <_vfiprintf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	b09d      	sub	sp, #116	; 0x74
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4617      	mov	r7, r2
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	4606      	mov	r6, r0
 8004cca:	b118      	cbz	r0, 8004cd4 <_vfiprintf_r+0x18>
 8004ccc:	6983      	ldr	r3, [r0, #24]
 8004cce:	b90b      	cbnz	r3, 8004cd4 <_vfiprintf_r+0x18>
 8004cd0:	f7ff fe34 	bl	800493c <__sinit>
 8004cd4:	4b7c      	ldr	r3, [pc, #496]	; (8004ec8 <_vfiprintf_r+0x20c>)
 8004cd6:	429c      	cmp	r4, r3
 8004cd8:	d157      	bne.n	8004d8a <_vfiprintf_r+0xce>
 8004cda:	6874      	ldr	r4, [r6, #4]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	0718      	lsls	r0, r3, #28
 8004ce0:	d55d      	bpl.n	8004d9e <_vfiprintf_r+0xe2>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05a      	beq.n	8004d9e <_vfiprintf_r+0xe2>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
 8004cec:	2320      	movs	r3, #32
 8004cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf2:	2330      	movs	r3, #48	; 0x30
 8004cf4:	f04f 0b01 	mov.w	fp, #1
 8004cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfc:	46b8      	mov	r8, r7
 8004cfe:	4645      	mov	r5, r8
 8004d00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d155      	bne.n	8004db4 <_vfiprintf_r+0xf8>
 8004d08:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d0c:	d00b      	beq.n	8004d26 <_vfiprintf_r+0x6a>
 8004d0e:	4653      	mov	r3, sl
 8004d10:	463a      	mov	r2, r7
 8004d12:	4621      	mov	r1, r4
 8004d14:	4630      	mov	r0, r6
 8004d16:	f7ff ffbf 	bl	8004c98 <__sfputs_r>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f000 80c4 	beq.w	8004ea8 <_vfiprintf_r+0x1ec>
 8004d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d22:	4453      	add	r3, sl
 8004d24:	9309      	str	r3, [sp, #36]	; 0x24
 8004d26:	f898 3000 	ldrb.w	r3, [r8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80bc 	beq.w	8004ea8 <_vfiprintf_r+0x1ec>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9307      	str	r3, [sp, #28]
 8004d3a:	9205      	str	r2, [sp, #20]
 8004d3c:	9306      	str	r3, [sp, #24]
 8004d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d42:	931a      	str	r3, [sp, #104]	; 0x68
 8004d44:	2205      	movs	r2, #5
 8004d46:	7829      	ldrb	r1, [r5, #0]
 8004d48:	4860      	ldr	r0, [pc, #384]	; (8004ecc <_vfiprintf_r+0x210>)
 8004d4a:	f000 fb0f 	bl	800536c <memchr>
 8004d4e:	f105 0801 	add.w	r8, r5, #1
 8004d52:	9b04      	ldr	r3, [sp, #16]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d131      	bne.n	8004dbc <_vfiprintf_r+0x100>
 8004d58:	06d9      	lsls	r1, r3, #27
 8004d5a:	bf44      	itt	mi
 8004d5c:	2220      	movmi	r2, #32
 8004d5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d62:	071a      	lsls	r2, r3, #28
 8004d64:	bf44      	itt	mi
 8004d66:	222b      	movmi	r2, #43	; 0x2b
 8004d68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d6c:	782a      	ldrb	r2, [r5, #0]
 8004d6e:	2a2a      	cmp	r2, #42	; 0x2a
 8004d70:	d02c      	beq.n	8004dcc <_vfiprintf_r+0x110>
 8004d72:	2100      	movs	r1, #0
 8004d74:	200a      	movs	r0, #10
 8004d76:	9a07      	ldr	r2, [sp, #28]
 8004d78:	46a8      	mov	r8, r5
 8004d7a:	f898 3000 	ldrb.w	r3, [r8]
 8004d7e:	3501      	adds	r5, #1
 8004d80:	3b30      	subs	r3, #48	; 0x30
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	d96d      	bls.n	8004e62 <_vfiprintf_r+0x1a6>
 8004d86:	b371      	cbz	r1, 8004de6 <_vfiprintf_r+0x12a>
 8004d88:	e026      	b.n	8004dd8 <_vfiprintf_r+0x11c>
 8004d8a:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <_vfiprintf_r+0x214>)
 8004d8c:	429c      	cmp	r4, r3
 8004d8e:	d101      	bne.n	8004d94 <_vfiprintf_r+0xd8>
 8004d90:	68b4      	ldr	r4, [r6, #8]
 8004d92:	e7a3      	b.n	8004cdc <_vfiprintf_r+0x20>
 8004d94:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <_vfiprintf_r+0x218>)
 8004d96:	429c      	cmp	r4, r3
 8004d98:	bf08      	it	eq
 8004d9a:	68f4      	ldreq	r4, [r6, #12]
 8004d9c:	e79e      	b.n	8004cdc <_vfiprintf_r+0x20>
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff fc6b 	bl	800467c <__swsetup_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d09e      	beq.n	8004ce8 <_vfiprintf_r+0x2c>
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	b01d      	add	sp, #116	; 0x74
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	2b25      	cmp	r3, #37	; 0x25
 8004db6:	d0a7      	beq.n	8004d08 <_vfiprintf_r+0x4c>
 8004db8:	46a8      	mov	r8, r5
 8004dba:	e7a0      	b.n	8004cfe <_vfiprintf_r+0x42>
 8004dbc:	4a43      	ldr	r2, [pc, #268]	; (8004ecc <_vfiprintf_r+0x210>)
 8004dbe:	4645      	mov	r5, r8
 8004dc0:	1a80      	subs	r0, r0, r2
 8004dc2:	fa0b f000 	lsl.w	r0, fp, r0
 8004dc6:	4318      	orrs	r0, r3
 8004dc8:	9004      	str	r0, [sp, #16]
 8004dca:	e7bb      	b.n	8004d44 <_vfiprintf_r+0x88>
 8004dcc:	9a03      	ldr	r2, [sp, #12]
 8004dce:	1d11      	adds	r1, r2, #4
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	9103      	str	r1, [sp, #12]
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	db01      	blt.n	8004ddc <_vfiprintf_r+0x120>
 8004dd8:	9207      	str	r2, [sp, #28]
 8004dda:	e004      	b.n	8004de6 <_vfiprintf_r+0x12a>
 8004ddc:	4252      	negs	r2, r2
 8004dde:	f043 0302 	orr.w	r3, r3, #2
 8004de2:	9207      	str	r2, [sp, #28]
 8004de4:	9304      	str	r3, [sp, #16]
 8004de6:	f898 3000 	ldrb.w	r3, [r8]
 8004dea:	2b2e      	cmp	r3, #46	; 0x2e
 8004dec:	d110      	bne.n	8004e10 <_vfiprintf_r+0x154>
 8004dee:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004df2:	f108 0101 	add.w	r1, r8, #1
 8004df6:	2b2a      	cmp	r3, #42	; 0x2a
 8004df8:	d137      	bne.n	8004e6a <_vfiprintf_r+0x1ae>
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	f108 0802 	add.w	r8, r8, #2
 8004e00:	1d1a      	adds	r2, r3, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	9203      	str	r2, [sp, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfb8      	it	lt
 8004e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e0e:	9305      	str	r3, [sp, #20]
 8004e10:	4d31      	ldr	r5, [pc, #196]	; (8004ed8 <_vfiprintf_r+0x21c>)
 8004e12:	2203      	movs	r2, #3
 8004e14:	f898 1000 	ldrb.w	r1, [r8]
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 faa7 	bl	800536c <memchr>
 8004e1e:	b140      	cbz	r0, 8004e32 <_vfiprintf_r+0x176>
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	1b40      	subs	r0, r0, r5
 8004e24:	fa03 f000 	lsl.w	r0, r3, r0
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	f108 0801 	add.w	r8, r8, #1
 8004e2e:	4303      	orrs	r3, r0
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	f898 1000 	ldrb.w	r1, [r8]
 8004e36:	2206      	movs	r2, #6
 8004e38:	4828      	ldr	r0, [pc, #160]	; (8004edc <_vfiprintf_r+0x220>)
 8004e3a:	f108 0701 	add.w	r7, r8, #1
 8004e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e42:	f000 fa93 	bl	800536c <memchr>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d034      	beq.n	8004eb4 <_vfiprintf_r+0x1f8>
 8004e4a:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <_vfiprintf_r+0x224>)
 8004e4c:	bb03      	cbnz	r3, 8004e90 <_vfiprintf_r+0x1d4>
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	3307      	adds	r3, #7
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	3308      	adds	r3, #8
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5c:	444b      	add	r3, r9
 8004e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e60:	e74c      	b.n	8004cfc <_vfiprintf_r+0x40>
 8004e62:	fb00 3202 	mla	r2, r0, r2, r3
 8004e66:	2101      	movs	r1, #1
 8004e68:	e786      	b.n	8004d78 <_vfiprintf_r+0xbc>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	250a      	movs	r5, #10
 8004e6e:	4618      	mov	r0, r3
 8004e70:	9305      	str	r3, [sp, #20]
 8004e72:	4688      	mov	r8, r1
 8004e74:	f898 2000 	ldrb.w	r2, [r8]
 8004e78:	3101      	adds	r1, #1
 8004e7a:	3a30      	subs	r2, #48	; 0x30
 8004e7c:	2a09      	cmp	r2, #9
 8004e7e:	d903      	bls.n	8004e88 <_vfiprintf_r+0x1cc>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0c5      	beq.n	8004e10 <_vfiprintf_r+0x154>
 8004e84:	9005      	str	r0, [sp, #20]
 8004e86:	e7c3      	b.n	8004e10 <_vfiprintf_r+0x154>
 8004e88:	fb05 2000 	mla	r0, r5, r0, r2
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e7f0      	b.n	8004e72 <_vfiprintf_r+0x1b6>
 8004e90:	ab03      	add	r3, sp, #12
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4622      	mov	r2, r4
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <_vfiprintf_r+0x228>)
 8004e98:	a904      	add	r1, sp, #16
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f3af 8000 	nop.w
 8004ea0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ea4:	4681      	mov	r9, r0
 8004ea6:	d1d8      	bne.n	8004e5a <_vfiprintf_r+0x19e>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	065b      	lsls	r3, r3, #25
 8004eac:	f53f af7d 	bmi.w	8004daa <_vfiprintf_r+0xee>
 8004eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eb2:	e77c      	b.n	8004dae <_vfiprintf_r+0xf2>
 8004eb4:	ab03      	add	r3, sp, #12
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <_vfiprintf_r+0x228>)
 8004ebc:	a904      	add	r1, sp, #16
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 f88a 	bl	8004fd8 <_printf_i>
 8004ec4:	e7ec      	b.n	8004ea0 <_vfiprintf_r+0x1e4>
 8004ec6:	bf00      	nop
 8004ec8:	0800543c 	.word	0x0800543c
 8004ecc:	0800547c 	.word	0x0800547c
 8004ed0:	0800545c 	.word	0x0800545c
 8004ed4:	0800541c 	.word	0x0800541c
 8004ed8:	08005482 	.word	0x08005482
 8004edc:	08005486 	.word	0x08005486
 8004ee0:	00000000 	.word	0x00000000
 8004ee4:	08004c99 	.word	0x08004c99

08004ee8 <_printf_common>:
 8004ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	4691      	mov	r9, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	688a      	ldr	r2, [r1, #8]
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bfb8      	it	lt
 8004efa:	4613      	movlt	r3, r2
 8004efc:	f8c9 3000 	str.w	r3, [r9]
 8004f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f04:	460c      	mov	r4, r1
 8004f06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f0a:	b112      	cbz	r2, 8004f12 <_printf_common+0x2a>
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f8c9 3000 	str.w	r3, [r9]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f1c:	3302      	addmi	r3, #2
 8004f1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	f015 0506 	ands.w	r5, r5, #6
 8004f28:	d107      	bne.n	8004f3a <_printf_common+0x52>
 8004f2a:	f104 0a19 	add.w	sl, r4, #25
 8004f2e:	68e3      	ldr	r3, [r4, #12]
 8004f30:	f8d9 2000 	ldr.w	r2, [r9]
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	429d      	cmp	r5, r3
 8004f38:	db2a      	blt.n	8004f90 <_printf_common+0xa8>
 8004f3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	3300      	adds	r3, #0
 8004f42:	bf18      	it	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	0692      	lsls	r2, r2, #26
 8004f48:	d42f      	bmi.n	8004faa <_printf_common+0xc2>
 8004f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4630      	mov	r0, r6
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d022      	beq.n	8004f9e <_printf_common+0xb6>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	68e5      	ldr	r5, [r4, #12]
 8004f5c:	f003 0306 	and.w	r3, r3, #6
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	bf18      	it	ne
 8004f64:	2500      	movne	r5, #0
 8004f66:	f8d9 2000 	ldr.w	r2, [r9]
 8004f6a:	f04f 0900 	mov.w	r9, #0
 8004f6e:	bf08      	it	eq
 8004f70:	1aad      	subeq	r5, r5, r2
 8004f72:	68a3      	ldr	r3, [r4, #8]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	bf08      	it	eq
 8004f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	bfc4      	itt	gt
 8004f80:	1a9b      	subgt	r3, r3, r2
 8004f82:	18ed      	addgt	r5, r5, r3
 8004f84:	341a      	adds	r4, #26
 8004f86:	454d      	cmp	r5, r9
 8004f88:	d11b      	bne.n	8004fc2 <_printf_common+0xda>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	2301      	movs	r3, #1
 8004f92:	4652      	mov	r2, sl
 8004f94:	4639      	mov	r1, r7
 8004f96:	4630      	mov	r0, r6
 8004f98:	47c0      	blx	r8
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d103      	bne.n	8004fa6 <_printf_common+0xbe>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa6:	3501      	adds	r5, #1
 8004fa8:	e7c1      	b.n	8004f2e <_printf_common+0x46>
 8004faa:	2030      	movs	r0, #48	; 0x30
 8004fac:	18e1      	adds	r1, r4, r3
 8004fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb8:	4422      	add	r2, r4
 8004fba:	3302      	adds	r3, #2
 8004fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fc0:	e7c3      	b.n	8004f4a <_printf_common+0x62>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	4630      	mov	r0, r6
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0e6      	beq.n	8004f9e <_printf_common+0xb6>
 8004fd0:	f109 0901 	add.w	r9, r9, #1
 8004fd4:	e7d7      	b.n	8004f86 <_printf_common+0x9e>
	...

08004fd8 <_printf_i>:
 8004fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fdc:	4617      	mov	r7, r2
 8004fde:	7e0a      	ldrb	r2, [r1, #24]
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	2a6e      	cmp	r2, #110	; 0x6e
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004ff0:	f000 80bc 	beq.w	800516c <_printf_i+0x194>
 8004ff4:	d81a      	bhi.n	800502c <_printf_i+0x54>
 8004ff6:	2a63      	cmp	r2, #99	; 0x63
 8004ff8:	d02e      	beq.n	8005058 <_printf_i+0x80>
 8004ffa:	d80a      	bhi.n	8005012 <_printf_i+0x3a>
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	f000 80c8 	beq.w	8005192 <_printf_i+0x1ba>
 8005002:	2a58      	cmp	r2, #88	; 0x58
 8005004:	f000 808a 	beq.w	800511c <_printf_i+0x144>
 8005008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800500c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005010:	e02a      	b.n	8005068 <_printf_i+0x90>
 8005012:	2a64      	cmp	r2, #100	; 0x64
 8005014:	d001      	beq.n	800501a <_printf_i+0x42>
 8005016:	2a69      	cmp	r2, #105	; 0x69
 8005018:	d1f6      	bne.n	8005008 <_printf_i+0x30>
 800501a:	6821      	ldr	r1, [r4, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005022:	d023      	beq.n	800506c <_printf_i+0x94>
 8005024:	1d11      	adds	r1, r2, #4
 8005026:	6019      	str	r1, [r3, #0]
 8005028:	6813      	ldr	r3, [r2, #0]
 800502a:	e027      	b.n	800507c <_printf_i+0xa4>
 800502c:	2a73      	cmp	r2, #115	; 0x73
 800502e:	f000 80b4 	beq.w	800519a <_printf_i+0x1c2>
 8005032:	d808      	bhi.n	8005046 <_printf_i+0x6e>
 8005034:	2a6f      	cmp	r2, #111	; 0x6f
 8005036:	d02a      	beq.n	800508e <_printf_i+0xb6>
 8005038:	2a70      	cmp	r2, #112	; 0x70
 800503a:	d1e5      	bne.n	8005008 <_printf_i+0x30>
 800503c:	680a      	ldr	r2, [r1, #0]
 800503e:	f042 0220 	orr.w	r2, r2, #32
 8005042:	600a      	str	r2, [r1, #0]
 8005044:	e003      	b.n	800504e <_printf_i+0x76>
 8005046:	2a75      	cmp	r2, #117	; 0x75
 8005048:	d021      	beq.n	800508e <_printf_i+0xb6>
 800504a:	2a78      	cmp	r2, #120	; 0x78
 800504c:	d1dc      	bne.n	8005008 <_printf_i+0x30>
 800504e:	2278      	movs	r2, #120	; 0x78
 8005050:	496f      	ldr	r1, [pc, #444]	; (8005210 <_printf_i+0x238>)
 8005052:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005056:	e064      	b.n	8005122 <_printf_i+0x14a>
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800505e:	1d11      	adds	r1, r2, #4
 8005060:	6019      	str	r1, [r3, #0]
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005068:	2301      	movs	r3, #1
 800506a:	e0a3      	b.n	80051b4 <_printf_i+0x1dc>
 800506c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005070:	f102 0104 	add.w	r1, r2, #4
 8005074:	6019      	str	r1, [r3, #0]
 8005076:	d0d7      	beq.n	8005028 <_printf_i+0x50>
 8005078:	f9b2 3000 	ldrsh.w	r3, [r2]
 800507c:	2b00      	cmp	r3, #0
 800507e:	da03      	bge.n	8005088 <_printf_i+0xb0>
 8005080:	222d      	movs	r2, #45	; 0x2d
 8005082:	425b      	negs	r3, r3
 8005084:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005088:	4962      	ldr	r1, [pc, #392]	; (8005214 <_printf_i+0x23c>)
 800508a:	220a      	movs	r2, #10
 800508c:	e017      	b.n	80050be <_printf_i+0xe6>
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005096:	d003      	beq.n	80050a0 <_printf_i+0xc8>
 8005098:	1d08      	adds	r0, r1, #4
 800509a:	6018      	str	r0, [r3, #0]
 800509c:	680b      	ldr	r3, [r1, #0]
 800509e:	e006      	b.n	80050ae <_printf_i+0xd6>
 80050a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050a4:	f101 0004 	add.w	r0, r1, #4
 80050a8:	6018      	str	r0, [r3, #0]
 80050aa:	d0f7      	beq.n	800509c <_printf_i+0xc4>
 80050ac:	880b      	ldrh	r3, [r1, #0]
 80050ae:	2a6f      	cmp	r2, #111	; 0x6f
 80050b0:	bf14      	ite	ne
 80050b2:	220a      	movne	r2, #10
 80050b4:	2208      	moveq	r2, #8
 80050b6:	4957      	ldr	r1, [pc, #348]	; (8005214 <_printf_i+0x23c>)
 80050b8:	2000      	movs	r0, #0
 80050ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80050be:	6865      	ldr	r5, [r4, #4]
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	60a5      	str	r5, [r4, #8]
 80050c4:	f2c0 809c 	blt.w	8005200 <_printf_i+0x228>
 80050c8:	6820      	ldr	r0, [r4, #0]
 80050ca:	f020 0004 	bic.w	r0, r0, #4
 80050ce:	6020      	str	r0, [r4, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d13f      	bne.n	8005154 <_printf_i+0x17c>
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	f040 8095 	bne.w	8005204 <_printf_i+0x22c>
 80050da:	4675      	mov	r5, lr
 80050dc:	2a08      	cmp	r2, #8
 80050de:	d10b      	bne.n	80050f8 <_printf_i+0x120>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07da      	lsls	r2, r3, #31
 80050e4:	d508      	bpl.n	80050f8 <_printf_i+0x120>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	bfde      	ittt	le
 80050ee:	2330      	movle	r3, #48	; 0x30
 80050f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050f8:	ebae 0305 	sub.w	r3, lr, r5
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	f8cd 8000 	str.w	r8, [sp]
 8005102:	463b      	mov	r3, r7
 8005104:	aa03      	add	r2, sp, #12
 8005106:	4621      	mov	r1, r4
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff feed 	bl	8004ee8 <_printf_common>
 800510e:	3001      	adds	r0, #1
 8005110:	d155      	bne.n	80051be <_printf_i+0x1e6>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	b005      	add	sp, #20
 8005118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800511c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005120:	493c      	ldr	r1, [pc, #240]	; (8005214 <_printf_i+0x23c>)
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f012 0f80 	tst.w	r2, #128	; 0x80
 800512a:	f100 0504 	add.w	r5, r0, #4
 800512e:	601d      	str	r5, [r3, #0]
 8005130:	d001      	beq.n	8005136 <_printf_i+0x15e>
 8005132:	6803      	ldr	r3, [r0, #0]
 8005134:	e002      	b.n	800513c <_printf_i+0x164>
 8005136:	0655      	lsls	r5, r2, #25
 8005138:	d5fb      	bpl.n	8005132 <_printf_i+0x15a>
 800513a:	8803      	ldrh	r3, [r0, #0]
 800513c:	07d0      	lsls	r0, r2, #31
 800513e:	bf44      	itt	mi
 8005140:	f042 0220 	orrmi.w	r2, r2, #32
 8005144:	6022      	strmi	r2, [r4, #0]
 8005146:	b91b      	cbnz	r3, 8005150 <_printf_i+0x178>
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	f022 0220 	bic.w	r2, r2, #32
 800514e:	6022      	str	r2, [r4, #0]
 8005150:	2210      	movs	r2, #16
 8005152:	e7b1      	b.n	80050b8 <_printf_i+0xe0>
 8005154:	4675      	mov	r5, lr
 8005156:	fbb3 f0f2 	udiv	r0, r3, r2
 800515a:	fb02 3310 	mls	r3, r2, r0, r3
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005164:	4603      	mov	r3, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	d1f5      	bne.n	8005156 <_printf_i+0x17e>
 800516a:	e7b7      	b.n	80050dc <_printf_i+0x104>
 800516c:	6808      	ldr	r0, [r1, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005174:	6949      	ldr	r1, [r1, #20]
 8005176:	d004      	beq.n	8005182 <_printf_i+0x1aa>
 8005178:	1d10      	adds	r0, r2, #4
 800517a:	6018      	str	r0, [r3, #0]
 800517c:	6813      	ldr	r3, [r2, #0]
 800517e:	6019      	str	r1, [r3, #0]
 8005180:	e007      	b.n	8005192 <_printf_i+0x1ba>
 8005182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005186:	f102 0004 	add.w	r0, r2, #4
 800518a:	6018      	str	r0, [r3, #0]
 800518c:	6813      	ldr	r3, [r2, #0]
 800518e:	d0f6      	beq.n	800517e <_printf_i+0x1a6>
 8005190:	8019      	strh	r1, [r3, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	4675      	mov	r5, lr
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	e7b1      	b.n	80050fe <_printf_i+0x126>
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	1d11      	adds	r1, r2, #4
 800519e:	6019      	str	r1, [r3, #0]
 80051a0:	6815      	ldr	r5, [r2, #0]
 80051a2:	2100      	movs	r1, #0
 80051a4:	6862      	ldr	r2, [r4, #4]
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f8e0 	bl	800536c <memchr>
 80051ac:	b108      	cbz	r0, 80051b2 <_printf_i+0x1da>
 80051ae:	1b40      	subs	r0, r0, r5
 80051b0:	6060      	str	r0, [r4, #4]
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	2300      	movs	r3, #0
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	e79f      	b.n	80050fe <_printf_i+0x126>
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4639      	mov	r1, r7
 80051c4:	4630      	mov	r0, r6
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d0a2      	beq.n	8005112 <_printf_i+0x13a>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	d507      	bpl.n	80051e2 <_printf_i+0x20a>
 80051d2:	2500      	movs	r5, #0
 80051d4:	f104 0919 	add.w	r9, r4, #25
 80051d8:	68e3      	ldr	r3, [r4, #12]
 80051da:	9a03      	ldr	r2, [sp, #12]
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	429d      	cmp	r5, r3
 80051e0:	db05      	blt.n	80051ee <_printf_i+0x216>
 80051e2:	68e0      	ldr	r0, [r4, #12]
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	4298      	cmp	r0, r3
 80051e8:	bfb8      	it	lt
 80051ea:	4618      	movlt	r0, r3
 80051ec:	e793      	b.n	8005116 <_printf_i+0x13e>
 80051ee:	2301      	movs	r3, #1
 80051f0:	464a      	mov	r2, r9
 80051f2:	4639      	mov	r1, r7
 80051f4:	4630      	mov	r0, r6
 80051f6:	47c0      	blx	r8
 80051f8:	3001      	adds	r0, #1
 80051fa:	d08a      	beq.n	8005112 <_printf_i+0x13a>
 80051fc:	3501      	adds	r5, #1
 80051fe:	e7eb      	b.n	80051d8 <_printf_i+0x200>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1a7      	bne.n	8005154 <_printf_i+0x17c>
 8005204:	780b      	ldrb	r3, [r1, #0]
 8005206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800520a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800520e:	e765      	b.n	80050dc <_printf_i+0x104>
 8005210:	0800549e 	.word	0x0800549e
 8005214:	0800548d 	.word	0x0800548d

08005218 <_sbrk_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	2300      	movs	r3, #0
 800521c:	4c05      	ldr	r4, [pc, #20]	; (8005234 <_sbrk_r+0x1c>)
 800521e:	4605      	mov	r5, r0
 8005220:	4608      	mov	r0, r1
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	f7ff f874 	bl	8004310 <_sbrk>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_sbrk_r+0x1a>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	b103      	cbz	r3, 8005232 <_sbrk_r+0x1a>
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	200001e8 	.word	0x200001e8

08005238 <__sread>:
 8005238:	b510      	push	{r4, lr}
 800523a:	460c      	mov	r4, r1
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	f000 f8a4 	bl	800538c <_read_r>
 8005244:	2800      	cmp	r0, #0
 8005246:	bfab      	itete	ge
 8005248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800524a:	89a3      	ldrhlt	r3, [r4, #12]
 800524c:	181b      	addge	r3, r3, r0
 800524e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005252:	bfac      	ite	ge
 8005254:	6563      	strge	r3, [r4, #84]	; 0x54
 8005256:	81a3      	strhlt	r3, [r4, #12]
 8005258:	bd10      	pop	{r4, pc}

0800525a <__swrite>:
 800525a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	461f      	mov	r7, r3
 8005260:	898b      	ldrh	r3, [r1, #12]
 8005262:	4605      	mov	r5, r0
 8005264:	05db      	lsls	r3, r3, #23
 8005266:	460c      	mov	r4, r1
 8005268:	4616      	mov	r6, r2
 800526a:	d505      	bpl.n	8005278 <__swrite+0x1e>
 800526c:	2302      	movs	r3, #2
 800526e:	2200      	movs	r2, #0
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	f000 f868 	bl	8005348 <_lseek_r>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	4632      	mov	r2, r6
 800527c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005286:	463b      	mov	r3, r7
 8005288:	4628      	mov	r0, r5
 800528a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528e:	f000 b817 	b.w	80052c0 <_write_r>

08005292 <__sseek>:
 8005292:	b510      	push	{r4, lr}
 8005294:	460c      	mov	r4, r1
 8005296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529a:	f000 f855 	bl	8005348 <_lseek_r>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	bf15      	itete	ne
 80052a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80052a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ae:	81a3      	strheq	r3, [r4, #12]
 80052b0:	bf18      	it	ne
 80052b2:	81a3      	strhne	r3, [r4, #12]
 80052b4:	bd10      	pop	{r4, pc}

080052b6 <__sclose>:
 80052b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ba:	f000 b813 	b.w	80052e4 <_close_r>
	...

080052c0 <_write_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4605      	mov	r5, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	2200      	movs	r2, #0
 80052ca:	4c05      	ldr	r4, [pc, #20]	; (80052e0 <_write_r+0x20>)
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f7ff f801 	bl	80042d6 <_write>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_write_r+0x1e>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	b103      	cbz	r3, 80052de <_write_r+0x1e>
 80052dc:	602b      	str	r3, [r5, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	200001e8 	.word	0x200001e8

080052e4 <_close_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	2300      	movs	r3, #0
 80052e8:	4c05      	ldr	r4, [pc, #20]	; (8005300 <_close_r+0x1c>)
 80052ea:	4605      	mov	r5, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	f7ff f83a 	bl	8004368 <_close>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_close_r+0x1a>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_close_r+0x1a>
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	200001e8 	.word	0x200001e8

08005304 <_fstat_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	2300      	movs	r3, #0
 8005308:	4c06      	ldr	r4, [pc, #24]	; (8005324 <_fstat_r+0x20>)
 800530a:	4605      	mov	r5, r0
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	f7ff f834 	bl	800437e <_fstat>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	d102      	bne.n	8005320 <_fstat_r+0x1c>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	b103      	cbz	r3, 8005320 <_fstat_r+0x1c>
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	bd38      	pop	{r3, r4, r5, pc}
 8005322:	bf00      	nop
 8005324:	200001e8 	.word	0x200001e8

08005328 <_isatty_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	2300      	movs	r3, #0
 800532c:	4c05      	ldr	r4, [pc, #20]	; (8005344 <_isatty_r+0x1c>)
 800532e:	4605      	mov	r5, r0
 8005330:	4608      	mov	r0, r1
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	f7ff f832 	bl	800439c <_isatty>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_isatty_r+0x1a>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	b103      	cbz	r3, 8005342 <_isatty_r+0x1a>
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	200001e8 	.word	0x200001e8

08005348 <_lseek_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4605      	mov	r5, r0
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	2200      	movs	r2, #0
 8005352:	4c05      	ldr	r4, [pc, #20]	; (8005368 <_lseek_r+0x20>)
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7ff f82a 	bl	80043b0 <_lseek>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_lseek_r+0x1e>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	b103      	cbz	r3, 8005366 <_lseek_r+0x1e>
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	200001e8 	.word	0x200001e8

0800536c <memchr>:
 800536c:	b510      	push	{r4, lr}
 800536e:	b2c9      	uxtb	r1, r1
 8005370:	4402      	add	r2, r0
 8005372:	4290      	cmp	r0, r2
 8005374:	4603      	mov	r3, r0
 8005376:	d101      	bne.n	800537c <memchr+0x10>
 8005378:	2000      	movs	r0, #0
 800537a:	bd10      	pop	{r4, pc}
 800537c:	781c      	ldrb	r4, [r3, #0]
 800537e:	3001      	adds	r0, #1
 8005380:	428c      	cmp	r4, r1
 8005382:	d1f6      	bne.n	8005372 <memchr+0x6>
 8005384:	4618      	mov	r0, r3
 8005386:	bd10      	pop	{r4, pc}

08005388 <__malloc_lock>:
 8005388:	4770      	bx	lr

0800538a <__malloc_unlock>:
 800538a:	4770      	bx	lr

0800538c <_read_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4605      	mov	r5, r0
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	2200      	movs	r2, #0
 8005396:	4c05      	ldr	r4, [pc, #20]	; (80053ac <_read_r+0x20>)
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f7fe ff7e 	bl	800429c <_read>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_read_r+0x1e>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_read_r+0x1e>
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	200001e8 	.word	0x200001e8

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr
