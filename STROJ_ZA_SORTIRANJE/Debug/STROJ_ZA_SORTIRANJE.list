
STROJ_ZA_SORTIRANJE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  20000078  08004b40  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001b4  08004b40  000201b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d56b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f42  00000000  00000000  0002d60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000da0  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ca8  00000000  00000000  000302f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005c50  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f92  00000000  00000000  00036be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ab7a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000413c  00000000  00000000  0003abf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080049cc 	.word	0x080049cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080049cc 	.word	0x080049cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_f2uiz>:
 8000984:	0042      	lsls	r2, r0, #1
 8000986:	d20e      	bcs.n	80009a6 <__aeabi_f2uiz+0x22>
 8000988:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800098c:	d30b      	bcc.n	80009a6 <__aeabi_f2uiz+0x22>
 800098e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000992:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000996:	d409      	bmi.n	80009ac <__aeabi_f2uiz+0x28>
 8000998:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800099c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a0:	fa23 f002 	lsr.w	r0, r3, r2
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr
 80009ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009b0:	d101      	bne.n	80009b6 <__aeabi_f2uiz+0x32>
 80009b2:	0242      	lsls	r2, r0, #9
 80009b4:	d102      	bne.n	80009bc <__aeabi_f2uiz+0x38>
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_Init+0x28>)
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x28>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 fb4d 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f002 fe56 	bl	8003690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fb65 	bl	80010de <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 fb2d 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000010 	.word	0x20000010
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	20000000 	.word	0x20000000

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	200000a0 	.word	0x200000a0

08000a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	200000a0 	.word	0x200000a0

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_Delay+0x40>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad2      	subs	r2, r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d3f7      	bcc.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e0be      	b.n	8000c6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d109      	bne.n	8000b10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f002 fdf2 	bl	80036f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f9ab 	bl	8000e6c <ADC_ConversionStop_Disable>
 8000b16:	4603      	mov	r3, r0
 8000b18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8099 	bne.w	8000c5a <HAL_ADC_Init+0x18e>
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 8095 	bne.w	8000c5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b38:	f023 0302 	bic.w	r3, r3, #2
 8000b3c:	f043 0202 	orr.w	r2, r3, #2
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7b1b      	ldrb	r3, [r3, #12]
 8000b52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b64:	d003      	beq.n	8000b6e <HAL_ADC_Init+0xa2>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d102      	bne.n	8000b74 <HAL_ADC_Init+0xa8>
 8000b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b72:	e000      	b.n	8000b76 <HAL_ADC_Init+0xaa>
 8000b74:	2300      	movs	r3, #0
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7d1b      	ldrb	r3, [r3, #20]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d119      	bne.n	8000bb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7b1b      	ldrb	r3, [r3, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	035a      	lsls	r2, r3, #13
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	e00b      	b.n	8000bb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba4:	f043 0220 	orr.w	r2, r3, #32
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	f043 0201 	orr.w	r2, r3, #1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	6812      	ldr	r2, [r2, #0]
 8000bc0:	6852      	ldr	r2, [r2, #4]
 8000bc2:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6899      	ldr	r1, [r3, #8]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_ADC_Init+0x1a8>)
 8000bd8:	400b      	ands	r3, r1
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be8:	d003      	beq.n	8000bf2 <HAL_ADC_Init+0x126>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d104      	bne.n	8000bfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	051b      	lsls	r3, r3, #20
 8000bfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c06:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_ADC_Init+0x1ac>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d10b      	bne.n	8000c38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	f023 0303 	bic.w	r3, r3, #3
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c36:	e018      	b.n	8000c6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	f023 0312 	bic.w	r3, r3, #18
 8000c40:	f043 0210 	orr.w	r2, r3, #16
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4c:	f043 0201 	orr.w	r2, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c58:	e007      	b.n	8000c6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	f043 0210 	orr.w	r2, r3, #16
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	ffe1f7fd 	.word	0xffe1f7fd
 8000c78:	ff1f0efe 	.word	0xff1f0efe

08000c7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c7c:	b490      	push	{r4, r7}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_ADC_ConfigChannel+0x20>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e0dc      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x1da>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d81c      	bhi.n	8000ce6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6819      	ldr	r1, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3b05      	subs	r3, #5
 8000cc2:	221f      	movs	r2, #31
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4018      	ands	r0, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681c      	ldr	r4, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b05      	subs	r3, #5
 8000cdc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ce0:	4303      	orrs	r3, r0
 8000ce2:	634b      	str	r3, [r1, #52]	; 0x34
 8000ce4:	e03c      	b.n	8000d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b0c      	cmp	r3, #12
 8000cec:	d81c      	bhi.n	8000d28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	3b23      	subs	r3, #35	; 0x23
 8000d04:	221f      	movs	r2, #31
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4018      	ands	r0, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681c      	ldr	r4, [r3, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3b23      	subs	r3, #35	; 0x23
 8000d1e:	fa04 f303 	lsl.w	r3, r4, r3
 8000d22:	4303      	orrs	r3, r0
 8000d24:	630b      	str	r3, [r1, #48]	; 0x30
 8000d26:	e01b      	b.n	8000d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b41      	subs	r3, #65	; 0x41
 8000d3e:	221f      	movs	r2, #31
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4018      	ands	r0, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3b41      	subs	r3, #65	; 0x41
 8000d58:	fa04 f303 	lsl.w	r3, r4, r3
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	d91c      	bls.n	8000da2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68d8      	ldr	r0, [r3, #12]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b1e      	subs	r3, #30
 8000d7e:	2207      	movs	r2, #7
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4018      	ands	r0, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689c      	ldr	r4, [r3, #8]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	3b1e      	subs	r3, #30
 8000d98:	fa04 f303 	lsl.w	r3, r4, r3
 8000d9c:	4303      	orrs	r3, r0
 8000d9e:	60cb      	str	r3, [r1, #12]
 8000da0:	e019      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6918      	ldr	r0, [r3, #16]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	2207      	movs	r2, #7
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4018      	ands	r0, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689c      	ldr	r4, [r3, #8]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	fa04 f303 	lsl.w	r3, r4, r3
 8000dd2:	4303      	orrs	r3, r0
 8000dd4:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d003      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000de2:	2b11      	cmp	r3, #17
 8000de4:	d132      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d125      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d126      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	6892      	ldr	r2, [r2, #8]
 8000e08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b10      	cmp	r3, #16
 8000e14:	d11a      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9a      	lsrs	r2, r3, #18
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e2c:	e002      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <HAL_ADC_ConfigChannel+0x1b2>
 8000e3a:	e007      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	f043 0220 	orr.w	r2, r3, #32
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc90      	pop	{r4, r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40012400 	.word	0x40012400
 8000e64:	20000010 	.word	0x20000010
 8000e68:	431bde83 	.word	0x431bde83

08000e6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d127      	bne.n	8000ed6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	6892      	ldr	r2, [r2, #8]
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e96:	f7ff fded 	bl	8000a74 <HAL_GetTick>
 8000e9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e9c:	e014      	b.n	8000ec8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e9e:	f7ff fde9 	bl	8000a74 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d90d      	bls.n	8000ec8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	f043 0210 	orr.w	r2, r3, #16
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e007      	b.n	8000ed8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d0e3      	beq.n	8000e9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_EnableIRQ+0x34>)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	095b      	lsrs	r3, r3, #5
 8000f5e:	79fa      	ldrb	r2, [r7, #7]
 8000f60:	f002 021f 	and.w	r2, r2, #31
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	4909      	ldr	r1, [pc, #36]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	2201      	movs	r2, #1
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	401a      	ands	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001016:	2101      	movs	r1, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	1e59      	subs	r1, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff92 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2f 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff44 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff92 	bl	8000fd0 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff61 	bl	8000f7c <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff37 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800110a:	2b02      	cmp	r3, #2
 800110c:	d005      	beq.n	800111a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e057      	b.n	80011ca <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	f022 020e 	bic.w	r2, r2, #14
 8001128:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800113a:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_DMA_Abort_IT+0xdc>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_DMA_Abort_IT+0xe0>)
 8001144:	4299      	cmp	r1, r3
 8001146:	d02e      	beq.n	80011a6 <HAL_DMA_Abort_IT+0xae>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_DMA_Abort_IT+0xe4>)
 8001150:	4299      	cmp	r1, r3
 8001152:	d026      	beq.n	80011a2 <HAL_DMA_Abort_IT+0xaa>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_DMA_Abort_IT+0xe8>)
 800115c:	4299      	cmp	r1, r3
 800115e:	d01d      	beq.n	800119c <HAL_DMA_Abort_IT+0xa4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_DMA_Abort_IT+0xec>)
 8001168:	4299      	cmp	r1, r3
 800116a:	d014      	beq.n	8001196 <HAL_DMA_Abort_IT+0x9e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_DMA_Abort_IT+0xf0>)
 8001174:	4299      	cmp	r1, r3
 8001176:	d00b      	beq.n	8001190 <HAL_DMA_Abort_IT+0x98>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_DMA_Abort_IT+0xf4>)
 8001180:	4299      	cmp	r1, r3
 8001182:	d102      	bne.n	800118a <HAL_DMA_Abort_IT+0x92>
 8001184:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001188:	e00e      	b.n	80011a8 <HAL_DMA_Abort_IT+0xb0>
 800118a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118e:	e00b      	b.n	80011a8 <HAL_DMA_Abort_IT+0xb0>
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	e008      	b.n	80011a8 <HAL_DMA_Abort_IT+0xb0>
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	e005      	b.n	80011a8 <HAL_DMA_Abort_IT+0xb0>
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	e002      	b.n	80011a8 <HAL_DMA_Abort_IT+0xb0>
 80011a2:	2310      	movs	r3, #16
 80011a4:	e000      	b.n	80011a8 <HAL_DMA_Abort_IT+0xb0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    } 
  }
  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020008 	.word	0x40020008
 80011dc:	4002001c 	.word	0x4002001c
 80011e0:	40020030 	.word	0x40020030
 80011e4:	40020044 	.word	0x40020044
 80011e8:	40020058 	.word	0x40020058
 80011ec:	4002006c 	.word	0x4002006c

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b08b      	sub	sp, #44	; 0x2c
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	e127      	b.n	8001454 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001204:	2201      	movs	r2, #1
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8116 	bne.w	800144e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d034      	beq.n	8001294 <HAL_GPIO_Init+0xa4>
 800122a:	2b12      	cmp	r3, #18
 800122c:	d80d      	bhi.n	800124a <HAL_GPIO_Init+0x5a>
 800122e:	2b02      	cmp	r3, #2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x9a>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d804      	bhi.n	8001240 <HAL_GPIO_Init+0x50>
 8001236:	2b00      	cmp	r3, #0
 8001238:	d031      	beq.n	800129e <HAL_GPIO_Init+0xae>
 800123a:	2b01      	cmp	r3, #1
 800123c:	d01c      	beq.n	8001278 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123e:	e048      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001240:	2b03      	cmp	r3, #3
 8001242:	d043      	beq.n	80012cc <HAL_GPIO_Init+0xdc>
 8001244:	2b11      	cmp	r3, #17
 8001246:	d01b      	beq.n	8001280 <HAL_GPIO_Init+0x90>
          break;
 8001248:	e043      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800124a:	4a89      	ldr	r2, [pc, #548]	; (8001470 <HAL_GPIO_Init+0x280>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d026      	beq.n	800129e <HAL_GPIO_Init+0xae>
 8001250:	4a87      	ldr	r2, [pc, #540]	; (8001470 <HAL_GPIO_Init+0x280>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d806      	bhi.n	8001264 <HAL_GPIO_Init+0x74>
 8001256:	4a87      	ldr	r2, [pc, #540]	; (8001474 <HAL_GPIO_Init+0x284>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d020      	beq.n	800129e <HAL_GPIO_Init+0xae>
 800125c:	4a86      	ldr	r2, [pc, #536]	; (8001478 <HAL_GPIO_Init+0x288>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01d      	beq.n	800129e <HAL_GPIO_Init+0xae>
          break;
 8001262:	e036      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001264:	4a85      	ldr	r2, [pc, #532]	; (800147c <HAL_GPIO_Init+0x28c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0xae>
 800126a:	4a85      	ldr	r2, [pc, #532]	; (8001480 <HAL_GPIO_Init+0x290>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d016      	beq.n	800129e <HAL_GPIO_Init+0xae>
 8001270:	4a84      	ldr	r2, [pc, #528]	; (8001484 <HAL_GPIO_Init+0x294>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0xae>
          break;
 8001276:	e02c      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e028      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	3304      	adds	r3, #4
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e023      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	3308      	adds	r3, #8
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e01e      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	330c      	adds	r3, #12
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e019      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012a6:	2304      	movs	r3, #4
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e012      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	611a      	str	r2, [r3, #16]
          break;
 80012be:	e008      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c0:	2308      	movs	r3, #8
 80012c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	615a      	str	r2, [r3, #20]
          break;
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2bff      	cmp	r3, #255	; 0xff
 80012d6:	d801      	bhi.n	80012dc <HAL_GPIO_Init+0xec>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	e001      	b.n	80012e0 <HAL_GPIO_Init+0xf0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3304      	adds	r3, #4
 80012e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d802      	bhi.n	80012ee <HAL_GPIO_Init+0xfe>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x104>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3b08      	subs	r3, #8
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	210f      	movs	r1, #15
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	401a      	ands	r2, r3
 8001306:	6a39      	ldr	r1, [r7, #32]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8096 	beq.w	800144e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001322:	4a59      	ldr	r2, [pc, #356]	; (8001488 <HAL_GPIO_Init+0x298>)
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_GPIO_Init+0x298>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_GPIO_Init+0x298>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800133a:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_GPIO_Init+0x29c>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <HAL_GPIO_Init+0x2a0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x19e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <HAL_GPIO_Init+0x2a4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x19a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a49      	ldr	r2, [pc, #292]	; (8001498 <HAL_GPIO_Init+0x2a8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x196>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a48      	ldr	r2, [pc, #288]	; (800149c <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x192>
 800137e:	2303      	movs	r3, #3
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x1a0>
 8001382:	2304      	movs	r3, #4
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x1a0>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x1a0>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x1a0>
 800138e:	2300      	movs	r3, #0
 8001390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a0:	493a      	ldr	r1, [pc, #232]	; (800148c <HAL_GPIO_Init+0x29c>)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ba:	4939      	ldr	r1, [pc, #228]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e2:	492f      	ldr	r1, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f0:	492b      	ldr	r1, [pc, #172]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4013      	ands	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800140a:	4925      	ldr	r1, [pc, #148]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001418:	4921      	ldr	r1, [pc, #132]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	43db      	mvns	r3, r3
 8001422:	4013      	ands	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001432:	491b      	ldr	r1, [pc, #108]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	60cb      	str	r3, [r1, #12]
 800143e:	e006      	b.n	800144e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001440:	4917      	ldr	r1, [pc, #92]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_GPIO_Init+0x2b0>)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	4013      	ands	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f aed0 	bne.w	8001204 <HAL_GPIO_Init+0x14>
  }
}
 8001464:	bf00      	nop
 8001466:	372c      	adds	r7, #44	; 0x2c
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	10210000 	.word	0x10210000
 8001474:	10110000 	.word	0x10110000
 8001478:	10120000 	.word	0x10120000
 800147c:	10310000 	.word	0x10310000
 8001480:	10320000 	.word	0x10320000
 8001484:	10220000 	.word	0x10220000
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00
 8001498:	40011000 	.word	0x40011000
 800149c:	40011400 	.word	0x40011400
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e26c      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d00c      	beq.n	800151a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001500:	4b8f      	ldr	r3, [pc, #572]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d112      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
 800150c:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d10b      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151a:	4b89      	ldr	r3, [pc, #548]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d06c      	beq.n	8001600 <HAL_RCC_OscConfig+0x12c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d168      	bne.n	8001600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e246      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x76>
 800153c:	4a80      	ldr	r2, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800153e:	4b80      	ldr	r3, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001554:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4a78      	ldr	r2, [pc, #480]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001560:	4b77      	ldr	r3, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0xbc>
 8001576:	4a72      	ldr	r2, [pc, #456]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001578:	4b71      	ldr	r3, [pc, #452]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001584:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 8001590:	4a6b      	ldr	r2, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001592:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4a68      	ldr	r2, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa60 	bl	8000a74 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fa5c 	bl	8000a74 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1fa      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe4>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fa4c 	bl	8000a74 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fa48 	bl	8000a74 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1e6      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x10c>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160e:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
 8001626:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1ba      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	493d      	ldr	r1, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800164c:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fa01 	bl	8000a74 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff f9fd 	bl	8000a74 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e19b      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	492a      	ldr	r1, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9e0 	bl	8000a74 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff f9dc 	bl	8000a74 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e17a      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03a      	beq.n	8001758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f9c0 	bl	8000a74 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff f9bc 	bl	8000a74 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e15a      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 fada 	bl	8001cd0 <RCC_Delay>
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff f9a6 	bl	8000a74 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	e00f      	b.n	800174c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff f9a2 	bl	8000a74 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d908      	bls.n	800174c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e140      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	42420000 	.word	0x42420000
 8001748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b9e      	ldr	r3, [pc, #632]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e9      	bne.n	800172c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a6 	beq.w	80018b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b97      	ldr	r3, [pc, #604]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10d      	bne.n	8001792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4a94      	ldr	r2, [pc, #592]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	4b93      	ldr	r3, [pc, #588]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b91      	ldr	r3, [pc, #580]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4a8b      	ldr	r2, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	4b8a      	ldr	r3, [pc, #552]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f963 	bl	8000a74 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff f95f 	bl	8000a74 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0fd      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x312>
 80017d8:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x334>
 80017ee:	4a76      	ldr	r2, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	4a73      	ldr	r2, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	4b72      	ldr	r3, [pc, #456]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x356>
 8001810:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	4a6a      	ldr	r2, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 800182a:	4a67      	ldr	r2, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	4a64      	ldr	r2, [pc, #400]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f913 	bl	8000a74 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f90f 	bl	8000a74 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0ab      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x37e>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff f8fd 	bl	8000a74 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff f8f9 	bl	8000a74 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e095      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8081 	beq.w	80019be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d061      	beq.n	800198c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d146      	bne.n	800195e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x4fc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff f8cd 	bl	8000a74 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f8c9 	bl	8000a74 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e067      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001906:	4930      	ldr	r1, [pc, #192]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	482b      	ldr	r0, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a19      	ldr	r1, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	430b      	orrs	r3, r1
 800192c:	4313      	orrs	r3, r2
 800192e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x4fc>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f89d 	bl	8000a74 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f899 	bl	8000a74 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e037      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x46a>
 800195c:	e02f      	b.n	80019be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_RCC_OscConfig+0x4fc>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f886 	bl	8000a74 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f882 	bl	8000a74 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e020      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x498>
 800198a:	e018      	b.n	80019be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e013      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42420060 	.word	0x42420060

080019d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0207 	and.w	r2, r3, #7
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d210      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4967      	ldr	r1, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 0207 	bic.w	r2, r3, #7
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0207 	and.w	r2, r3, #7
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4950      	ldr	r1, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4939      	ldr	r1, [pc, #228]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 0203 	bic.w	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7fe ffd6 	bl	8000a74 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7fe ffd2 	bl	8000a74 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0207 	and.w	r2, r3, #7
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4924      	ldr	r1, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 0207 	bic.w	r2, r3, #7
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0207 	and.w	r2, r3, #7
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4919      	ldr	r1, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4912      	ldr	r1, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4601      	mov	r1, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	fa21 f303 	lsr.w	r3, r1, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe ff34 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08004a10 	.word	0x08004a10
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b490      	push	{r4, r7}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb0:	1d3c      	adds	r4, r7, #4
 8001bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x46>
 8001be6:	e02d      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bea:	623b      	str	r3, [r7, #32]
      break;
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c5b      	lsrs	r3, r3, #17
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c26:	fb02 f203 	mul.w	r2, r2, r3
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	e004      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c38:	fb02 f303 	mul.w	r3, r2, r3
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	623b      	str	r3, [r7, #32]
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c46:	623b      	str	r3, [r7, #32]
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc90      	pop	{r4, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	080049e4 	.word	0x080049e4
 8001c5c:	080049f4 	.word	0x080049f4
 8001c60:	40021000 	.word	0x40021000
 8001c64:	007a1200 	.word	0x007a1200
 8001c68:	003d0900 	.word	0x003d0900

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000010 	.word	0x20000010

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c84:	f7ff fff2 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08004a20 	.word	0x08004a20

08001ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0adb      	lsrs	r3, r3, #11
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08004a20 	.word	0x08004a20

08001cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <RCC_Delay+0x34>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <RCC_Delay+0x38>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0a5b      	lsrs	r3, r3, #9
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cec:	bf00      	nop
  }
  while (Delay --);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	60fa      	str	r2, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <RCC_Delay+0x1c>
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000010 	.word	0x20000010
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d07d      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10d      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	4a4c      	ldr	r2, [pc, #304]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d42:	61d3      	str	r3, [r2, #28]
 8001d44:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d50:	2301      	movs	r3, #1
 8001d52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d118      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4a43      	ldr	r2, [pc, #268]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6c:	f7fe fe82 	bl	8000a74 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	e008      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7fe fe7e 	bl	8000a74 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e06d      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d02e      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d027      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dba:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d014      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fe4d 	bl	8000a74 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe fe49 	bl	8000a74 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e036      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e00:	491a      	ldr	r1, [pc, #104]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e4e:	4907      	ldr	r1, [pc, #28]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42420440 	.word	0x42420440

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e01d      	b.n	8001ec6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f001 fc64 	bl	800376c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 fa10 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e01d      	b.n	8001f62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f815 	bl	8001f6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 f9c2 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fc24 	bl	80027dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_TIM_PWM_Start+0x60>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d007      	beq.n	8001fd0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40012c00 	.word	0x40012c00

08001fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0b4      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	f200 809f 	bhi.w	8002150 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	0800204d 	.word	0x0800204d
 800201c:	08002151 	.word	0x08002151
 8002020:	08002151 	.word	0x08002151
 8002024:	08002151 	.word	0x08002151
 8002028:	0800208d 	.word	0x0800208d
 800202c:	08002151 	.word	0x08002151
 8002030:	08002151 	.word	0x08002151
 8002034:	08002151 	.word	0x08002151
 8002038:	080020cf 	.word	0x080020cf
 800203c:	08002151 	.word	0x08002151
 8002040:	08002151 	.word	0x08002151
 8002044:	08002151 	.word	0x08002151
 8002048:	0800210f 	.word	0x0800210f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f9a4 	bl	80023a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	6992      	ldr	r2, [r2, #24]
 8002062:	f042 0208 	orr.w	r2, r2, #8
 8002066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	6992      	ldr	r2, [r2, #24]
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6991      	ldr	r1, [r2, #24]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	6912      	ldr	r2, [r2, #16]
 8002086:	430a      	orrs	r2, r1
 8002088:	619a      	str	r2, [r3, #24]
      break;
 800208a:	e062      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f9ea 	bl	800246c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	6992      	ldr	r2, [r2, #24]
 80020a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	6992      	ldr	r2, [r2, #24]
 80020b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	6991      	ldr	r1, [r2, #24]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	6912      	ldr	r2, [r2, #16]
 80020c6:	0212      	lsls	r2, r2, #8
 80020c8:	430a      	orrs	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]
      break;
 80020cc:	e041      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fa33 	bl	8002540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	69d2      	ldr	r2, [r2, #28]
 80020e4:	f042 0208 	orr.w	r2, r2, #8
 80020e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	69d2      	ldr	r2, [r2, #28]
 80020f4:	f022 0204 	bic.w	r2, r2, #4
 80020f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	69d1      	ldr	r1, [r2, #28]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	6912      	ldr	r2, [r2, #16]
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
      break;
 800210c:	e021      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fa7d 	bl	8002614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	69d2      	ldr	r2, [r2, #28]
 8002124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	69d2      	ldr	r2, [r2, #28]
 8002134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	69d1      	ldr	r1, [r2, #28]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	6912      	ldr	r2, [r2, #16]
 8002148:	0212      	lsls	r2, r2, #8
 800214a:	430a      	orrs	r2, r1
 800214c:	61da      	str	r2, [r3, #28]
      break;
 800214e:	e000      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002150:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIM_ConfigClockSource+0x18>
 8002180:	2302      	movs	r3, #2
 8002182:	e0a6      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x166>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d067      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x120>
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d80b      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x6c>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d073      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0x140>
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d802      	bhi.n	80021ce <HAL_TIM_ConfigClockSource+0x62>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d06f      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80021cc:	e078      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d06c      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0x140>
 80021d2:	2b30      	cmp	r3, #48	; 0x30
 80021d4:	d06a      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021d6:	e073      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021d8:	2b70      	cmp	r3, #112	; 0x70
 80021da:	d00d      	beq.n	80021f8 <HAL_TIM_ConfigClockSource+0x8c>
 80021dc:	2b70      	cmp	r3, #112	; 0x70
 80021de:	d804      	bhi.n	80021ea <HAL_TIM_ConfigClockSource+0x7e>
 80021e0:	2b50      	cmp	r3, #80	; 0x50
 80021e2:	d033      	beq.n	800224c <HAL_TIM_ConfigClockSource+0xe0>
 80021e4:	2b60      	cmp	r3, #96	; 0x60
 80021e6:	d041      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021e8:	e06a      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ee:	d066      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x152>
 80021f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f4:	d017      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021f6:	e063      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f000 fac9 	bl	800279e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800221a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	609a      	str	r2, [r3, #8]
      break;
 8002224:	e04c      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f000 fab2 	bl	800279e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	6892      	ldr	r2, [r2, #8]
 8002244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002248:	609a      	str	r2, [r3, #8]
      break;
 800224a:	e039      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	461a      	mov	r2, r3
 800225a:	f000 fa29 	bl	80026b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2150      	movs	r1, #80	; 0x50
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fa80 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 800226a:	e029      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	461a      	mov	r2, r3
 800227a:	f000 fa47 	bl	800270c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2160      	movs	r1, #96	; 0x60
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fa70 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 800228a:	e019      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	461a      	mov	r2, r3
 800229a:	f000 fa09 	bl	80026b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fa60 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 80022aa:	e009      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f000 fa57 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 80022bc:	e000      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80022be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a26      	ldr	r2, [pc, #152]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xc0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <TIM_Base_SetConfig+0xc0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f023 0201 	bic.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f023 0302 	bic.w	r3, r3, #2
 80023e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <TIM_OC1_SetConfig+0xc8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10c      	bne.n	8002416 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0308 	bic.w	r3, r3, #8
 8002402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <TIM_OC1_SetConfig+0xc8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d111      	bne.n	8002442 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800242c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	621a      	str	r2, [r3, #32]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40012c00 	.word	0x40012c00

0800246c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f023 0210 	bic.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800249a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f023 0320 	bic.w	r3, r3, #32
 80024b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <TIM_OC2_SetConfig+0xd0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10d      	bne.n	80024e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <TIM_OC2_SetConfig+0xd0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d113      	bne.n	8002518 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	621a      	str	r2, [r3, #32]
}
 8002532:	bf00      	nop
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40012c00 	.word	0x40012c00

08002540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <TIM_OC3_SetConfig+0xd0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <TIM_OC3_SetConfig+0xd0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d113      	bne.n	80025ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40012c00 	.word	0x40012c00

08002614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <TIM_OC4_SetConfig+0x98>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d109      	bne.n	8002688 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40012c00 	.word	0x40012c00

080026b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 0201 	bic.w	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f023 030a 	bic.w	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f023 0210 	bic.w	r2, r3, #16
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	621a      	str	r2, [r3, #32]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	f043 0307 	orr.w	r3, r3, #7
 800278c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	609a      	str	r2, [r3, #8]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2201      	movs	r2, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	401a      	ands	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1a      	ldr	r2, [r3, #32]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002838:	2302      	movs	r3, #2
 800283a:	e032      	b.n	80028a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002874:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	4313      	orrs	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e03d      	b.n	8002944 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e03f      	b.n	80029e0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 ff57 	bl	8003828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2224      	movs	r2, #36	; 0x24
 800297e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	68d2      	ldr	r2, [r2, #12]
 800298c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002990:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fb40 	bl	8003018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	6912      	ldr	r2, [r2, #16]
 80029a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	6952      	ldr	r2, [r2, #20]
 80029b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	68d2      	ldr	r2, [r2, #12]
 80029c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 8082 	bne.w	8002b0e <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_UART_Transmit+0x2e>
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e07a      	b.n	8002b10 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Transmit+0x40>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e073      	b.n	8002b10 <HAL_UART_Transmit+0x128>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2221      	movs	r2, #33	; 0x21
 8002a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe f819 	bl	8000a74 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a50:	e041      	b.n	8002ad6 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d121      	bne.n	8002aae <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f966 	bl	8002d46 <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e045      	b.n	8002b10 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	8812      	ldrh	r2, [r2, #0]
 8002a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a94:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	e017      	b.n	8002ad6 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	e013      	b.n	8002ad6 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f944 	bl	8002d46 <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e023      	b.n	8002b10 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1b8      	bne.n	8002a52 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f92b 	bl	8002d46 <UART_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e00a      	b.n	8002b10 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_UART_IRQHandler+0x52>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f9d6 	bl	8002f14 <UART_Receive_IT>
      return;
 8002b68:	e0cc      	b.n	8002d04 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ab 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x1b0>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_UART_IRQHandler+0x70>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80a0 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x90>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_UART_IRQHandler+0xb0>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	f043 0202 	orr.w	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_UART_IRQHandler+0xd0>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_UART_IRQHandler+0xf0>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	f043 0208 	orr.w	r2, r3, #8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d078      	beq.n	8002d02 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_UART_IRQHandler+0x112>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f975 	bl	8002f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_UART_IRQHandler+0x13a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d031      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8c1 	bl	8002dda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d023      	beq.n	8002cae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	6952      	ldr	r2, [r2, #20]
 8002c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <HAL_UART_IRQHandler+0x1f4>)
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fa34 	bl	80010f8 <HAL_DMA_Abort_IT>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca4:	e00e      	b.n	8002cc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f844 	bl	8002d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cac:	e00a      	b.n	8002cc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f840 	bl	8002d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	e006      	b.n	8002cc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f83c 	bl	8002d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cc2:	e01e      	b.n	8002d02 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	bf00      	nop
    return;
 8002cc6:	e01c      	b.n	8002d02 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x1cc>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8ad 	bl	8002e3c <UART_Transmit_IT>
    return;
 8002ce2:	e00f      	b.n	8002d04 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1ec>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f8f3 	bl	8002ee4 <UART_EndTransmit_IT>
    return;
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002d02:	bf00      	nop
  }
}
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08002e15 	.word	0x08002e15

08002d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d56:	e02c      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d028      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d66:	f7fd fe85 	bl	8000a74 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d91d      	bls.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	68d2      	ldr	r2, [r2, #12]
 8002d80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	6952      	ldr	r2, [r2, #20]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e00f      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d0c3      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	68d2      	ldr	r2, [r2, #12]
 8002dec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002df0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	6952      	ldr	r2, [r2, #20]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff ff80 	bl	8002d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b21      	cmp	r3, #33	; 0x21
 8002e4e:	d143      	bne.n	8002ed8 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e58:	d119      	bne.n	8002e8e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	621a      	str	r2, [r3, #32]
 8002e80:	e00e      	b.n	8002ea0 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	621a      	str	r2, [r3, #32]
 8002e8c:	e008      	b.n	8002ea0 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	1c58      	adds	r0, r3, #1
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6208      	str	r0, [r1, #32]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4619      	mov	r1, r3
 8002eae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10f      	bne.n	8002ed4 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	68d2      	ldr	r2, [r2, #12]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff03 	bl	8002d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b22      	cmp	r3, #34	; 0x22
 8002f26:	d171      	bne.n	800300c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f30:	d123      	bne.n	8002f7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10e      	bne.n	8002f5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5c:	e029      	b.n	8002fb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
 8002f78:	e01b      	b.n	8002fb2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6291      	str	r1, [r2, #40]	; 0x28
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	6852      	ldr	r2, [r2, #4]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e00c      	b.n	8002fb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	1c59      	adds	r1, r3, #1
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6291      	str	r1, [r2, #40]	; 0x28
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6852      	ldr	r2, [r2, #4]
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d120      	bne.n	8003008 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	68d2      	ldr	r2, [r2, #12]
 8002fd0:	f022 0220 	bic.w	r2, r2, #32
 8002fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	68d2      	ldr	r2, [r2, #12]
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6952      	ldr	r2, [r2, #20]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fe8f 	bl	8002d22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e002      	b.n	800300e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	6912      	ldr	r2, [r2, #16]
 800302a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	430a      	orrs	r2, r1
 8003034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003056:	f023 030c 	bic.w	r3, r3, #12
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	430b      	orrs	r3, r1
 800305e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	6952      	ldr	r2, [r2, #20]
 800306a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6992      	ldr	r2, [r2, #24]
 8003072:	430a      	orrs	r2, r1
 8003074:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <UART_SetConfig+0x1ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d14e      	bne.n	800311e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7fe fe12 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8003084:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	4a49      	ldr	r2, [pc, #292]	; (80031c8 <UART_SetConfig+0x1b0>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	0118      	lsls	r0, r3, #4
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c0:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <UART_SetConfig+0x1b0>)
 80030c2:	fba3 4302 	umull	r4, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2464      	movs	r4, #100	; 0x64
 80030ca:	fb04 f303 	mul.w	r3, r4, r3
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	3332      	adds	r3, #50	; 0x32
 80030d4:	4a3c      	ldr	r2, [pc, #240]	; (80031c8 <UART_SetConfig+0x1b0>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e0:	4418      	add	r0, r3
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <UART_SetConfig+0x1b0>)
 80030fa:	fba3 4302 	umull	r4, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2464      	movs	r4, #100	; 0x64
 8003102:	fb04 f303 	mul.w	r3, r4, r3
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	3332      	adds	r3, #50	; 0x32
 800310c:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <UART_SetConfig+0x1b0>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4403      	add	r3, r0
 800311a:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800311c:	e04d      	b.n	80031ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800311e:	f7fe fdaf 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8003122:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009a      	lsls	r2, r3, #2
 8003132:	441a      	add	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <UART_SetConfig+0x1b0>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	0118      	lsls	r0, r3, #4
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009a      	lsls	r2, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	fbb2 f2f3 	udiv	r2, r2, r3
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <UART_SetConfig+0x1b0>)
 8003160:	fba3 4302 	umull	r4, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2464      	movs	r4, #100	; 0x64
 8003168:	fb04 f303 	mul.w	r3, r4, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <UART_SetConfig+0x1b0>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317e:	4418      	add	r0, r3
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009a      	lsls	r2, r3, #2
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	fbb2 f2f3 	udiv	r2, r2, r3
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <UART_SetConfig+0x1b0>)
 8003198:	fba3 4302 	umull	r4, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	2464      	movs	r4, #100	; 0x64
 80031a0:	fb04 f303 	mul.w	r3, r4, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	3332      	adds	r3, #50	; 0x32
 80031aa:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <UART_SetConfig+0x1b0>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4403      	add	r3, r0
 80031b8:	608b      	str	r3, [r1, #8]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40013800 	.word	0x40013800
 80031c8:	51eb851f 	.word	0x51eb851f

080031cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80031d2:	f7fd fbf7 	bl	80009c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80031d6:	f000 f83f 	bl	8003258 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80031da:	f000 f9ad 	bl	8003538 <MX_GPIO_Init>
	MX_ADC1_Init();
 80031de:	f000 f88b 	bl	80032f8 <MX_ADC1_Init>
	MX_TIM1_Init();
 80031e2:	f000 f8c7 	bl	8003374 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80031e6:	f000 f97d 	bl	80034e4 <MX_USART2_UART_Init>

	/* USER CODE BEGIN 2 */

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // <-------- ENABLE RXNE
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <main+0x80>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <main+0x80>)
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	68d2      	ldr	r2, [r2, #12]
 80031f4:	f042 0220 	orr.w	r2, r2, #32
 80031f8:	60da      	str	r2, [r3, #12]

//  HX711_set_scale(1);
//  HX711_Tare(10);
//  HX711_set_scale(calibration_factor);

	uint8_t podatak[5] = "abcde";
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <main+0x84>)
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003202:	6018      	str	r0, [r3, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	7019      	strb	r1, [r3, #0]
	int masa = 10;
 8003208:	230a      	movs	r3, #10
 800320a:	60fb      	str	r3, [r7, #12]

	//HAL_UART_Transmit(&huart2, podatak, sizeof(podatak), 0xFFFF);

	HAL_TIM_Base_Start(&htim1);
 800320c:	4811      	ldr	r0, [pc, #68]	; (8003254 <main+0x88>)
 800320e:	f7fe fe5e 	bl	8001ece <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Start Pwm signal on PA-8 Pin
 8003212:	2100      	movs	r1, #0
 8003214:	480f      	ldr	r0, [pc, #60]	; (8003254 <main+0x88>)
 8003216:	f7fe feb1 	bl	8001f7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Start Pwm signal on PA-9 Pin
 800321a:	2104      	movs	r1, #4
 800321c:	480d      	ldr	r0, [pc, #52]	; (8003254 <main+0x88>)
 800321e:	f7fe fead 	bl	8001f7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //Start Pwm signal on PA-10 Pin
 8003222:	2108      	movs	r1, #8
 8003224:	480b      	ldr	r0, [pc, #44]	; (8003254 <main+0x88>)
 8003226:	f7fe fea9 	bl	8001f7c <HAL_TIM_PWM_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//  masa=HX711_get_units(10);
		Servo_motor(PWM1,0);
 800322a:	2100      	movs	r1, #0
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f9c3 	bl	80035b8 <Servo_motor>
		HAL_Delay(1000);
 8003232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003236:	f7fd fc27 	bl	8000a88 <HAL_Delay>
		Servo_motor(PWM1,180);
 800323a:	21b4      	movs	r1, #180	; 0xb4
 800323c:	2000      	movs	r0, #0
 800323e:	f000 f9bb 	bl	80035b8 <Servo_motor>
		HAL_Delay(1000);
 8003242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003246:	f7fd fc1f 	bl	8000a88 <HAL_Delay>
		Servo_motor(PWM1,0);
 800324a:	e7ee      	b.n	800322a <main+0x5e>
 800324c:	20000170 	.word	0x20000170
 8003250:	080049f8 	.word	0x080049f8
 8003254:	20000130 	.word	0x20000130

08003258 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b094      	sub	sp, #80	; 0x50
 800325c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800325e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003262:	2228      	movs	r2, #40	; 0x28
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fca4 	bl	8003bb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003288:	2302      	movs	r3, #2
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800328c:	2301      	movs	r3, #1
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003290:	2310      	movs	r3, #16
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003294:	2300      	movs	r3, #0
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe f919 	bl	80014d4 <HAL_RCC_OscConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <SystemClock_Config+0x54>
		Error_Handler();
 80032a8:	f000 f9da 	bl	8003660 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80032ac:	230f      	movs	r3, #15
 80032ae:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fb84 	bl	80019d4 <HAL_RCC_ClockConfig>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <SystemClock_Config+0x7e>
		Error_Handler();
 80032d2:	f000 f9c5 	bl	8003660 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032d6:	2302      	movs	r3, #2
 80032d8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fd13 	bl	8001d0c <HAL_RCCEx_PeriphCLKConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <SystemClock_Config+0x98>
		Error_Handler();
 80032ec:	f000 f9b8 	bl	8003660 <Error_Handler>
	}
}
 80032f0:	bf00      	nop
 80032f2:	3750      	adds	r7, #80	; 0x50
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <MX_ADC1_Init+0x74>)
 800330a:	4a19      	ldr	r2, [pc, #100]	; (8003370 <MX_ADC1_Init+0x78>)
 800330c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <MX_ADC1_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <MX_ADC1_Init+0x74>)
 8003316:	2201      	movs	r2, #1
 8003318:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <MX_ADC1_Init+0x74>)
 800331c:	2200      	movs	r2, #0
 800331e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <MX_ADC1_Init+0x74>)
 8003322:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003326:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <MX_ADC1_Init+0x74>)
 800332a:	2200      	movs	r2, #0
 800332c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800332e:	4b0f      	ldr	r3, [pc, #60]	; (800336c <MX_ADC1_Init+0x74>)
 8003330:	2201      	movs	r2, #1
 8003332:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003334:	480d      	ldr	r0, [pc, #52]	; (800336c <MX_ADC1_Init+0x74>)
 8003336:	f7fd fbc9 	bl	8000acc <HAL_ADC_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8003340:	f000 f98e 	bl	8003660 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8003344:	2300      	movs	r3, #0
 8003346:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003348:	2301      	movs	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	; (800336c <MX_ADC1_Init+0x74>)
 8003356:	f7fd fc91 	bl	8000c7c <HAL_ADC_ConfigChannel>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8003360:	f000 f97e 	bl	8003660 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000100 	.word	0x20000100
 8003370:	40012400 	.word	0x40012400

08003374 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b096      	sub	sp, #88	; 0x58
 8003378:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800337a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	615a      	str	r2, [r3, #20]
 80033a4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fc01 	bl	8003bb4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <MX_TIM1_Init+0x168>)
 80033b4:	4a4a      	ldr	r2, [pc, #296]	; (80034e0 <MX_TIM1_Init+0x16c>)
 80033b6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 20;
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <MX_TIM1_Init+0x168>)
 80033ba:	2214      	movs	r2, #20
 80033bc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <MX_TIM1_Init+0x168>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7656;
 80033c4:	4b45      	ldr	r3, [pc, #276]	; (80034dc <MX_TIM1_Init+0x168>)
 80033c6:	f641 52e8 	movw	r2, #7656	; 0x1de8
 80033ca:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033cc:	4b43      	ldr	r3, [pc, #268]	; (80034dc <MX_TIM1_Init+0x168>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80033d2:	4b42      	ldr	r3, [pc, #264]	; (80034dc <MX_TIM1_Init+0x168>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d8:	4b40      	ldr	r3, [pc, #256]	; (80034dc <MX_TIM1_Init+0x168>)
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80033de:	483f      	ldr	r0, [pc, #252]	; (80034dc <MX_TIM1_Init+0x168>)
 80033e0:	f7fe fd4a 	bl	8001e78 <HAL_TIM_Base_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM1_Init+0x7a>
		Error_Handler();
 80033ea:	f000 f939 	bl	8003660 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80033f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033f8:	4619      	mov	r1, r3
 80033fa:	4838      	ldr	r0, [pc, #224]	; (80034dc <MX_TIM1_Init+0x168>)
 80033fc:	f7fe feb6 	bl	800216c <HAL_TIM_ConfigClockSource>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_TIM1_Init+0x96>
		Error_Handler();
 8003406:	f000 f92b 	bl	8003660 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800340a:	4834      	ldr	r0, [pc, #208]	; (80034dc <MX_TIM1_Init+0x168>)
 800340c:	f7fe fd82 	bl	8001f14 <HAL_TIM_PWM_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8003416:	f000 f923 	bl	8003660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800341e:	2300      	movs	r3, #0
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003426:	4619      	mov	r1, r3
 8003428:	482c      	ldr	r0, [pc, #176]	; (80034dc <MX_TIM1_Init+0x168>)
 800342a:	f7ff f9fb 	bl	8002824 <HAL_TIMEx_MasterConfigSynchronization>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8003434:	f000 f914 	bl	8003660 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003438:	2360      	movs	r3, #96	; 0x60
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003444:	2300      	movs	r3, #0
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003458:	2200      	movs	r2, #0
 800345a:	4619      	mov	r1, r3
 800345c:	481f      	ldr	r0, [pc, #124]	; (80034dc <MX_TIM1_Init+0x168>)
 800345e:	f7fe fdbf 	bl	8001fe0 <HAL_TIM_PWM_ConfigChannel>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8003468:	f000 f8fa 	bl	8003660 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800346c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003470:	2204      	movs	r2, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4819      	ldr	r0, [pc, #100]	; (80034dc <MX_TIM1_Init+0x168>)
 8003476:	f7fe fdb3 	bl	8001fe0 <HAL_TIM_PWM_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8003480:	f000 f8ee 	bl	8003660 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8003484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003488:	2208      	movs	r2, #8
 800348a:	4619      	mov	r1, r3
 800348c:	4813      	ldr	r0, [pc, #76]	; (80034dc <MX_TIM1_Init+0x168>)
 800348e:	f7fe fda7 	bl	8001fe0 <HAL_TIM_PWM_ConfigChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8003498:	f000 f8e2 	bl	8003660 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4807      	ldr	r0, [pc, #28]	; (80034dc <MX_TIM1_Init+0x168>)
 80034c0:	f7ff f9f4 	bl	80028ac <HAL_TIMEx_ConfigBreakDeadTime>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM1_Init+0x15a>
			!= HAL_OK) {
		Error_Handler();
 80034ca:	f000 f8c9 	bl	8003660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80034ce:	4803      	ldr	r0, [pc, #12]	; (80034dc <MX_TIM1_Init+0x168>)
 80034d0:	f000 f96a 	bl	80037a8 <HAL_TIM_MspPostInit>

}
 80034d4:	bf00      	nop
 80034d6:	3758      	adds	r7, #88	; 0x58
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000130 	.word	0x20000130
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80034e8:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <MX_USART2_UART_Init+0x50>)
 80034ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 80034f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 800350a:	220c      	movs	r2, #12
 800350c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 8003510:	2200      	movs	r2, #0
 8003512:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_USART2_UART_Init+0x4c>)
 800351c:	f7ff fa17 	bl	800294e <HAL_UART_Init>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003526:	f000 f89b 	bl	8003660 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000170 	.word	0x20000170
 8003534:	40004400 	.word	0x40004400

08003538 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800353e:	f107 0308 	add.w	r3, r7, #8
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <MX_GPIO_Init+0x78>)
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <MX_GPIO_Init+0x78>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6193      	str	r3, [r2, #24]
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <MX_GPIO_Init+0x78>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003564:	2200      	movs	r2, #0
 8003566:	f641 01d2 	movw	r1, #6354	; 0x18d2
 800356a:	4812      	ldr	r0, [pc, #72]	; (80035b4 <MX_GPIO_Init+0x7c>)
 800356c:	f7fd ff9a 	bl	80014a4 <HAL_GPIO_WritePin>
			SENZOR_LED_Pin | VAGA_SCK_Pin | STEPPER_DIR_Pin | STEPPER_STEP_Pin
					| RPI_GPIO_Pin | STEPPER_EN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SENZOR_LED_Pin VAGA_SCK_Pin STEPPER_DIR_Pin STEPPER_STEP_Pin
	 RPI_GPIO_Pin STEPPER_EN_Pin */
	GPIO_InitStruct.Pin = SENZOR_LED_Pin | VAGA_SCK_Pin | STEPPER_DIR_Pin
 8003570:	f641 03d2 	movw	r3, #6354	; 0x18d2
 8003574:	60bb      	str	r3, [r7, #8]
			| STEPPER_STEP_Pin | RPI_GPIO_Pin | STEPPER_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003576:	2301      	movs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2302      	movs	r3, #2
 8003580:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	4619      	mov	r1, r3
 8003588:	480a      	ldr	r0, [pc, #40]	; (80035b4 <MX_GPIO_Init+0x7c>)
 800358a:	f7fd fe31 	bl	80011f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VAGA_DT_Pin */
	GPIO_InitStruct.Pin = VAGA_DT_Pin;
 800358e:	2320      	movs	r3, #32
 8003590:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(VAGA_DT_GPIO_Port, &GPIO_InitStruct);
 800359a:	f107 0308 	add.w	r3, r7, #8
 800359e:	4619      	mov	r1, r3
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <MX_GPIO_Init+0x7c>)
 80035a2:	f7fd fe25 	bl	80011f0 <HAL_GPIO_Init>

}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40010800 	.word	0x40010800

080035b8 <Servo_motor>:
	}
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, GPIO_PIN_RESET);
}

void Servo_motor(PWM_CHANNEL PWM_CH, int kut) {
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	71fb      	strb	r3, [r7, #7]
	float stupnjevi = ((7656/1800.0)*(kut+45.0));
 80035c4:	6838      	ldr	r0, [r7, #0]
 80035c6:	f7fc ff15 	bl	80003f4 <__aeabi_i2d>
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <Servo_motor+0xa0>)
 80035d0:	f7fc fdc4 	bl	800015c <__adddf3>
 80035d4:	4603      	mov	r3, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	4618      	mov	r0, r3
 80035da:	4621      	mov	r1, r4
 80035dc:	a31c      	add	r3, pc, #112	; (adr r3, 8003650 <Servo_motor+0x98>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fc ff6d 	bl	80004c0 <__aeabi_dmul>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	4618      	mov	r0, r3
 80035ec:	4621      	mov	r1, r4
 80035ee:	f7fd f979 	bl	80008e4 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <Servo_motor+0x54>
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <Servo_motor+0xa4>)
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7fd f9bf 	bl	8000984 <__aeabi_f2uiz>
 8003606:	4603      	mov	r3, r0
 8003608:	6363      	str	r3, [r4, #52]	; 0x34
}
 800360a:	e01c      	b.n	8003646 <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <Servo_motor+0x6a>
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <Servo_motor+0xa4>)
 8003614:	681c      	ldr	r4, [r3, #0]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7fd f9b4 	bl	8000984 <__aeabi_f2uiz>
 800361c:	4603      	mov	r3, r0
 800361e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003620:	e011      	b.n	8003646 <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d107      	bne.n	8003638 <Servo_motor+0x80>
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <Servo_motor+0xa4>)
 800362a:	681c      	ldr	r4, [r3, #0]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7fd f9a9 	bl	8000984 <__aeabi_f2uiz>
 8003632:	4603      	mov	r3, r0
 8003634:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8003636:	e006      	b.n	8003646 <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <Servo_motor+0xa4>)
 800363a:	681c      	ldr	r4, [r3, #0]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7fd f9a1 	bl	8000984 <__aeabi_f2uiz>
 8003642:	4603      	mov	r3, r0
 8003644:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bd90      	pop	{r4, r7, pc}
 800364e:	bf00      	nop
 8003650:	d0369d03 	.word	0xd0369d03
 8003654:	40110369 	.word	0x40110369
 8003658:	40468000 	.word	0x40468000
 800365c:	20000130 	.word	0x20000130

08003660 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <__io_putchar>:

PUTCHAR_PROTOTYPE {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of
	 transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8003674:	1d39      	adds	r1, r7, #4
 8003676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800367a:	2201      	movs	r2, #1
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <__io_putchar+0x20>)
 800367e:	f7ff f9b3 	bl	80029e8 <HAL_UART_Transmit>
	return ch;
 8003682:	687b      	ldr	r3, [r7, #4]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000170 	.word	0x20000170

08003690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <HAL_MspInit+0x5c>)
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_MspInit+0x5c>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6193      	str	r3, [r2, #24]
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_MspInit+0x5c>)
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_MspInit+0x5c>)
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_MspInit+0x5c>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	61d3      	str	r3, [r2, #28]
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_MspInit+0x5c>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_MspInit+0x60>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_MspInit+0x60>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40010000 	.word	0x40010000

080036f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 0310 	add.w	r3, r7, #16
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_ADC_MspInit+0x6c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d121      	bne.n	8003758 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <HAL_ADC_MspInit+0x70>)
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_ADC_MspInit+0x70>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371e:	6193      	str	r3, [r2, #24]
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_ADC_MspInit+0x70>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <HAL_ADC_MspInit+0x70>)
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <HAL_ADC_MspInit+0x70>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6193      	str	r3, [r2, #24]
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_ADC_MspInit+0x70>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = SENZOR_ADC_Pin;
 8003744:	2301      	movs	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003748:	2303      	movs	r3, #3
 800374a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SENZOR_ADC_GPIO_Port, &GPIO_InitStruct);
 800374c:	f107 0310 	add.w	r3, r7, #16
 8003750:	4619      	mov	r1, r3
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <HAL_ADC_MspInit+0x74>)
 8003754:	f7fd fd4c 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40012400 	.word	0x40012400
 8003764:	40021000 	.word	0x40021000
 8003768:	40010800 	.word	0x40010800

0800376c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <HAL_TIM_Base_MspInit+0x34>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10b      	bne.n	8003796 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_TIM_Base_MspInit+0x38>)
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <HAL_TIM_Base_MspInit+0x38>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003788:	6193      	str	r3, [r2, #24]
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_TIM_Base_MspInit+0x38>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 0310 	add.w	r3, r7, #16
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <HAL_TIM_MspPostInit+0x74>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d125      	bne.n	8003814 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_TIM_MspPostInit+0x78>)
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_TIM_MspPostInit+0x78>)
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6193      	str	r3, [r2, #24]
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_TIM_MspPostInit+0x78>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80037e0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2302      	movs	r3, #2
 80037ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ee:	f107 0310 	add.w	r3, r7, #16
 80037f2:	4619      	mov	r1, r3
 80037f4:	480b      	ldr	r0, [pc, #44]	; (8003824 <HAL_TIM_MspPostInit+0x7c>)
 80037f6:	f7fd fcfb 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO2_Pin;
 80037fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	4619      	mov	r1, r3
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <HAL_TIM_MspPostInit+0x7c>)
 8003810:	f7fd fcee 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003814:	bf00      	nop
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40021000 	.word	0x40021000
 8003824:	40010800 	.word	0x40010800

08003828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_UART_MspInit+0x98>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d137      	bne.n	80038b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003852:	61d3      	str	r3, [r2, #28]
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6193      	str	r3, [r2, #24]
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003878:	2304      	movs	r3, #4
 800387a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	4619      	mov	r1, r3
 800388a:	480f      	ldr	r0, [pc, #60]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 800388c:	f7fd fcb0 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003890:	2308      	movs	r3, #8
 8003892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4619      	mov	r1, r3
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 80038a4:	f7fd fca4 	bl	80011f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2026      	movs	r0, #38	; 0x26
 80038ae:	f7fd fbec 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038b2:	2026      	movs	r0, #38	; 0x26
 80038b4:	f7fd fc05 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038b8:	bf00      	nop
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40004400 	.word	0x40004400
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010800 	.word	0x40010800

080038cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038dc:	e7fe      	b.n	80038dc <HardFault_Handler+0x4>

080038de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e2:	e7fe      	b.n	80038e2 <MemManage_Handler+0x4>

080038e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e8:	e7fe      	b.n	80038e8 <BusFault_Handler+0x4>

080038ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ee:	e7fe      	b.n	80038ee <UsageFault_Handler+0x4>

080038f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003918:	f7fd f89a 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}

08003920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	  volatile static size_t buff_free=RX_BUFF_SIZE;
	  //*buff_ptr++=huart1.Instance->DR;
	  *buff_ptr++=USART2->DR;
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <USART2_IRQHandler+0x48>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	490f      	ldr	r1, [pc, #60]	; (8003968 <USART2_IRQHandler+0x48>)
 800392c:	600a      	str	r2, [r1, #0]
 800392e:	4a0f      	ldr	r2, [pc, #60]	; (800396c <USART2_IRQHandler+0x4c>)
 8003930:	6852      	ldr	r2, [r2, #4]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
	  buff_free--;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <USART2_IRQHandler+0x50>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	4a0c      	ldr	r2, [pc, #48]	; (8003970 <USART2_IRQHandler+0x50>)
 800393e:	6013      	str	r3, [r2, #0]
	  if(buff_free==0){
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <USART2_IRQHandler+0x50>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <USART2_IRQHandler+0x3c>
		  printf("rx_buff=%s\r\n",rx_buff);
 8003948:	490a      	ldr	r1, [pc, #40]	; (8003974 <USART2_IRQHandler+0x54>)
 800394a:	480b      	ldr	r0, [pc, #44]	; (8003978 <USART2_IRQHandler+0x58>)
 800394c:	f000 f93a 	bl	8003bc4 <iprintf>
		  buff_ptr=rx_buff;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <USART2_IRQHandler+0x48>)
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <USART2_IRQHandler+0x54>)
 8003954:	601a      	str	r2, [r3, #0]
		  buff_free=RX_BUFF_SIZE;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <USART2_IRQHandler+0x50>)
 8003958:	220a      	movs	r2, #10
 800395a:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800395c:	4807      	ldr	r0, [pc, #28]	; (800397c <USART2_IRQHandler+0x5c>)
 800395e:	f7ff f8db 	bl	8002b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000008 	.word	0x20000008
 800396c:	40004400 	.word	0x40004400
 8003970:	2000000c 	.word	0x2000000c
 8003974:	200000e0 	.word	0x200000e0
 8003978:	08004a00 	.word	0x08004a00
 800397c:	20000170 	.word	0x20000170

08003980 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e00a      	b.n	80039a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003992:	68bc      	ldr	r4, [r7, #8]
 8003994:	1c63      	adds	r3, r4, #1
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	f3af 8000 	nop.w
 800399c:	4603      	mov	r3, r0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dbf0      	blt.n	8003992 <_read+0x12>
	}

return len;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}

080039ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e009      	b.n	80039e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	60ba      	str	r2, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fe49 	bl	800366c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3301      	adds	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	dbf1      	blt.n	80039cc <_write+0x12>
	}
	return len;
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <_sbrk+0x50>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <_sbrk+0x16>
		heap_end = &end;
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <_sbrk+0x50>)
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <_sbrk+0x54>)
 8003a08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <_sbrk+0x50>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <_sbrk+0x50>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	466a      	mov	r2, sp
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d907      	bls.n	8003a2e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a1e:	f000 f89f 	bl	8003b60 <__errno>
 8003a22:	4602      	mov	r2, r0
 8003a24:	230c      	movs	r3, #12
 8003a26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	e006      	b.n	8003a3c <_sbrk+0x48>
	}

	heap_end += incr;
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <_sbrk+0x50>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	4a03      	ldr	r2, [pc, #12]	; (8003a44 <_sbrk+0x50>)
 8003a38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000094 	.word	0x20000094
 8003a48:	200001b4 	.word	0x200001b4

08003a4c <_close>:

int _close(int file)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	return -1;
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a72:	605a      	str	r2, [r3, #4]
	return 0;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <_isatty>:

int _isatty(int file)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	return 1;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <SystemInit+0x5c>)
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <SystemInit+0x5c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003abc:	4912      	ldr	r1, [pc, #72]	; (8003b08 <SystemInit+0x5c>)
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <SystemInit+0x5c>)
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <SystemInit+0x60>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <SystemInit+0x5c>)
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <SystemInit+0x5c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <SystemInit+0x5c>)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <SystemInit+0x5c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003ae4:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <SystemInit+0x5c>)
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <SystemInit+0x5c>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003aee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <SystemInit+0x5c>)
 8003af2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003af6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <SystemInit+0x64>)
 8003afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003afe:	609a      	str	r2, [r3, #8]
#endif 
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	f8ff0000 	.word	0xf8ff0000
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b16:	e003      	b.n	8003b20 <LoopCopyDataInit>

08003b18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003b1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b1e:	3104      	adds	r1, #4

08003b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b20:	480a      	ldr	r0, [pc, #40]	; (8003b4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b28:	d3f6      	bcc.n	8003b18 <CopyDataInit>
  ldr r2, =_sbss
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003b2c:	e002      	b.n	8003b34 <LoopFillZerobss>

08003b2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b30:	f842 3b04 	str.w	r3, [r2], #4

08003b34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b38:	d3f9      	bcc.n	8003b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b3a:	f7ff ffb7 	bl	8003aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b3e:	f000 f815 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b42:	f7ff fb43 	bl	80031cc <main>
  bx lr
 8003b46:	4770      	bx	lr
  ldr r3, =_sidata
 8003b48:	08004ac8 	.word	0x08004ac8
  ldr r0, =_sdata
 8003b4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b50:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003b54:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003b58:	200001b4 	.word	0x200001b4

08003b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b5c:	e7fe      	b.n	8003b5c <ADC1_2_IRQHandler>
	...

08003b60 <__errno>:
 8003b60:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <__errno+0x8>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000014 	.word	0x20000014

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	2500      	movs	r5, #0
 8003b70:	4e0c      	ldr	r6, [pc, #48]	; (8003ba4 <__libc_init_array+0x38>)
 8003b72:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b74:	1ba4      	subs	r4, r4, r6
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	42a5      	cmp	r5, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	f000 ff26 	bl	80049cc <_init>
 8003b80:	2500      	movs	r5, #0
 8003b82:	4e0a      	ldr	r6, [pc, #40]	; (8003bac <__libc_init_array+0x40>)
 8003b84:	4c0a      	ldr	r4, [pc, #40]	; (8003bb0 <__libc_init_array+0x44>)
 8003b86:	1ba4      	subs	r4, r4, r6
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	42a5      	cmp	r5, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b94:	4798      	blx	r3
 8003b96:	3501      	adds	r5, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9e:	4798      	blx	r3
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08004ac0 	.word	0x08004ac0
 8003ba8:	08004ac0 	.word	0x08004ac0
 8003bac:	08004ac0 	.word	0x08004ac0
 8003bb0:	08004ac4 	.word	0x08004ac4

08003bb4 <memset>:
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4402      	add	r2, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <iprintf>:
 8003bc4:	b40f      	push	{r0, r1, r2, r3}
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <iprintf+0x2c>)
 8003bc8:	b513      	push	{r0, r1, r4, lr}
 8003bca:	681c      	ldr	r4, [r3, #0]
 8003bcc:	b124      	cbz	r4, 8003bd8 <iprintf+0x14>
 8003bce:	69a3      	ldr	r3, [r4, #24]
 8003bd0:	b913      	cbnz	r3, 8003bd8 <iprintf+0x14>
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f000 f84e 	bl	8003c74 <__sinit>
 8003bd8:	ab05      	add	r3, sp, #20
 8003bda:	9a04      	ldr	r2, [sp, #16]
 8003bdc:	68a1      	ldr	r1, [r4, #8]
 8003bde:	4620      	mov	r0, r4
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	f000 f957 	bl	8003e94 <_vfiprintf_r>
 8003be6:	b002      	add	sp, #8
 8003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bec:	b004      	add	sp, #16
 8003bee:	4770      	bx	lr
 8003bf0:	20000014 	.word	0x20000014

08003bf4 <_cleanup_r>:
 8003bf4:	4901      	ldr	r1, [pc, #4]	; (8003bfc <_cleanup_r+0x8>)
 8003bf6:	f000 b8a9 	b.w	8003d4c <_fwalk_reent>
 8003bfa:	bf00      	nop
 8003bfc:	0800476d 	.word	0x0800476d

08003c00 <std.isra.0>:
 8003c00:	2300      	movs	r3, #0
 8003c02:	b510      	push	{r4, lr}
 8003c04:	4604      	mov	r4, r0
 8003c06:	6003      	str	r3, [r0, #0]
 8003c08:	6043      	str	r3, [r0, #4]
 8003c0a:	6083      	str	r3, [r0, #8]
 8003c0c:	8181      	strh	r1, [r0, #12]
 8003c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c10:	81c2      	strh	r2, [r0, #14]
 8003c12:	6103      	str	r3, [r0, #16]
 8003c14:	6143      	str	r3, [r0, #20]
 8003c16:	6183      	str	r3, [r0, #24]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	305c      	adds	r0, #92	; 0x5c
 8003c1e:	f7ff ffc9 	bl	8003bb4 <memset>
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <std.isra.0+0x38>)
 8003c24:	6224      	str	r4, [r4, #32]
 8003c26:	6263      	str	r3, [r4, #36]	; 0x24
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <std.isra.0+0x3c>)
 8003c2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <std.isra.0+0x40>)
 8003c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <std.isra.0+0x44>)
 8003c32:	6323      	str	r3, [r4, #48]	; 0x30
 8003c34:	bd10      	pop	{r4, pc}
 8003c36:	bf00      	nop
 8003c38:	08004411 	.word	0x08004411
 8003c3c:	08004433 	.word	0x08004433
 8003c40:	0800446b 	.word	0x0800446b
 8003c44:	0800448f 	.word	0x0800448f

08003c48 <__sfmoreglue>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	2568      	movs	r5, #104	; 0x68
 8003c4c:	1e4a      	subs	r2, r1, #1
 8003c4e:	4355      	muls	r5, r2
 8003c50:	460e      	mov	r6, r1
 8003c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c56:	f000 f897 	bl	8003d88 <_malloc_r>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	b140      	cbz	r0, 8003c70 <__sfmoreglue+0x28>
 8003c5e:	2100      	movs	r1, #0
 8003c60:	e880 0042 	stmia.w	r0, {r1, r6}
 8003c64:	300c      	adds	r0, #12
 8003c66:	60a0      	str	r0, [r4, #8]
 8003c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c6c:	f7ff ffa2 	bl	8003bb4 <memset>
 8003c70:	4620      	mov	r0, r4
 8003c72:	bd70      	pop	{r4, r5, r6, pc}

08003c74 <__sinit>:
 8003c74:	6983      	ldr	r3, [r0, #24]
 8003c76:	b510      	push	{r4, lr}
 8003c78:	4604      	mov	r4, r0
 8003c7a:	bb33      	cbnz	r3, 8003cca <__sinit+0x56>
 8003c7c:	6483      	str	r3, [r0, #72]	; 0x48
 8003c7e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003c80:	6503      	str	r3, [r0, #80]	; 0x50
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <__sinit+0x58>)
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <__sinit+0x5c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6282      	str	r2, [r0, #40]	; 0x28
 8003c8a:	4298      	cmp	r0, r3
 8003c8c:	bf04      	itt	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	6183      	streq	r3, [r0, #24]
 8003c92:	f000 f81f 	bl	8003cd4 <__sfp>
 8003c96:	6060      	str	r0, [r4, #4]
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f000 f81b 	bl	8003cd4 <__sfp>
 8003c9e:	60a0      	str	r0, [r4, #8]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 f817 	bl	8003cd4 <__sfp>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60e0      	str	r0, [r4, #12]
 8003caa:	2104      	movs	r1, #4
 8003cac:	6860      	ldr	r0, [r4, #4]
 8003cae:	f7ff ffa7 	bl	8003c00 <std.isra.0>
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2109      	movs	r1, #9
 8003cb6:	68a0      	ldr	r0, [r4, #8]
 8003cb8:	f7ff ffa2 	bl	8003c00 <std.isra.0>
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	2112      	movs	r1, #18
 8003cc0:	68e0      	ldr	r0, [r4, #12]
 8003cc2:	f7ff ff9d 	bl	8003c00 <std.isra.0>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61a3      	str	r3, [r4, #24]
 8003cca:	bd10      	pop	{r4, pc}
 8003ccc:	08004a28 	.word	0x08004a28
 8003cd0:	08003bf5 	.word	0x08003bf5

08003cd4 <__sfp>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <__sfp+0x74>)
 8003cd8:	4607      	mov	r7, r0
 8003cda:	681e      	ldr	r6, [r3, #0]
 8003cdc:	69b3      	ldr	r3, [r6, #24]
 8003cde:	b913      	cbnz	r3, 8003ce6 <__sfp+0x12>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f7ff ffc7 	bl	8003c74 <__sinit>
 8003ce6:	3648      	adds	r6, #72	; 0x48
 8003ce8:	68b4      	ldr	r4, [r6, #8]
 8003cea:	6873      	ldr	r3, [r6, #4]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	d503      	bpl.n	8003cf8 <__sfp+0x24>
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	b133      	cbz	r3, 8003d02 <__sfp+0x2e>
 8003cf4:	6836      	ldr	r6, [r6, #0]
 8003cf6:	e7f7      	b.n	8003ce8 <__sfp+0x14>
 8003cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cfc:	b16d      	cbz	r5, 8003d1a <__sfp+0x46>
 8003cfe:	3468      	adds	r4, #104	; 0x68
 8003d00:	e7f4      	b.n	8003cec <__sfp+0x18>
 8003d02:	2104      	movs	r1, #4
 8003d04:	4638      	mov	r0, r7
 8003d06:	f7ff ff9f 	bl	8003c48 <__sfmoreglue>
 8003d0a:	6030      	str	r0, [r6, #0]
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d1f1      	bne.n	8003cf4 <__sfp+0x20>
 8003d10:	230c      	movs	r3, #12
 8003d12:	4604      	mov	r4, r0
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4620      	mov	r0, r4
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d1e:	81e3      	strh	r3, [r4, #14]
 8003d20:	2301      	movs	r3, #1
 8003d22:	6665      	str	r5, [r4, #100]	; 0x64
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	6025      	str	r5, [r4, #0]
 8003d28:	60a5      	str	r5, [r4, #8]
 8003d2a:	6065      	str	r5, [r4, #4]
 8003d2c:	6125      	str	r5, [r4, #16]
 8003d2e:	6165      	str	r5, [r4, #20]
 8003d30:	61a5      	str	r5, [r4, #24]
 8003d32:	2208      	movs	r2, #8
 8003d34:	4629      	mov	r1, r5
 8003d36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d3a:	f7ff ff3b 	bl	8003bb4 <memset>
 8003d3e:	6365      	str	r5, [r4, #52]	; 0x34
 8003d40:	63a5      	str	r5, [r4, #56]	; 0x38
 8003d42:	64a5      	str	r5, [r4, #72]	; 0x48
 8003d44:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d46:	e7e6      	b.n	8003d16 <__sfp+0x42>
 8003d48:	08004a28 	.word	0x08004a28

08003d4c <_fwalk_reent>:
 8003d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d50:	4680      	mov	r8, r0
 8003d52:	4689      	mov	r9, r1
 8003d54:	2600      	movs	r6, #0
 8003d56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d5a:	b914      	cbnz	r4, 8003d62 <_fwalk_reent+0x16>
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d62:	68a5      	ldr	r5, [r4, #8]
 8003d64:	6867      	ldr	r7, [r4, #4]
 8003d66:	3f01      	subs	r7, #1
 8003d68:	d501      	bpl.n	8003d6e <_fwalk_reent+0x22>
 8003d6a:	6824      	ldr	r4, [r4, #0]
 8003d6c:	e7f5      	b.n	8003d5a <_fwalk_reent+0xe>
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d907      	bls.n	8003d84 <_fwalk_reent+0x38>
 8003d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	d003      	beq.n	8003d84 <_fwalk_reent+0x38>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4640      	mov	r0, r8
 8003d80:	47c8      	blx	r9
 8003d82:	4306      	orrs	r6, r0
 8003d84:	3568      	adds	r5, #104	; 0x68
 8003d86:	e7ee      	b.n	8003d66 <_fwalk_reent+0x1a>

08003d88 <_malloc_r>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	1ccd      	adds	r5, r1, #3
 8003d8c:	f025 0503 	bic.w	r5, r5, #3
 8003d90:	3508      	adds	r5, #8
 8003d92:	2d0c      	cmp	r5, #12
 8003d94:	bf38      	it	cc
 8003d96:	250c      	movcc	r5, #12
 8003d98:	2d00      	cmp	r5, #0
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	db01      	blt.n	8003da2 <_malloc_r+0x1a>
 8003d9e:	42a9      	cmp	r1, r5
 8003da0:	d903      	bls.n	8003daa <_malloc_r+0x22>
 8003da2:	230c      	movs	r3, #12
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	2000      	movs	r0, #0
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	f000 fd8d 	bl	80048c8 <__malloc_lock>
 8003dae:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <_malloc_r+0xb4>)
 8003db0:	6814      	ldr	r4, [r2, #0]
 8003db2:	4621      	mov	r1, r4
 8003db4:	b991      	cbnz	r1, 8003ddc <_malloc_r+0x54>
 8003db6:	4c22      	ldr	r4, [pc, #136]	; (8003e40 <_malloc_r+0xb8>)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	b91b      	cbnz	r3, 8003dc4 <_malloc_r+0x3c>
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f000 fb17 	bl	80043f0 <_sbrk_r>
 8003dc2:	6020      	str	r0, [r4, #0]
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 fb12 	bl	80043f0 <_sbrk_r>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d126      	bne.n	8003e1e <_malloc_r+0x96>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	f000 fd78 	bl	80048ca <__malloc_unlock>
 8003dda:	e7e4      	b.n	8003da6 <_malloc_r+0x1e>
 8003ddc:	680b      	ldr	r3, [r1, #0]
 8003dde:	1b5b      	subs	r3, r3, r5
 8003de0:	d41a      	bmi.n	8003e18 <_malloc_r+0x90>
 8003de2:	2b0b      	cmp	r3, #11
 8003de4:	d90f      	bls.n	8003e06 <_malloc_r+0x7e>
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	18cc      	adds	r4, r1, r3
 8003dea:	50cd      	str	r5, [r1, r3]
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 fd6c 	bl	80048ca <__malloc_unlock>
 8003df2:	f104 000b 	add.w	r0, r4, #11
 8003df6:	1d23      	adds	r3, r4, #4
 8003df8:	f020 0007 	bic.w	r0, r0, #7
 8003dfc:	1ac3      	subs	r3, r0, r3
 8003dfe:	d01b      	beq.n	8003e38 <_malloc_r+0xb0>
 8003e00:	425a      	negs	r2, r3
 8003e02:	50e2      	str	r2, [r4, r3]
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	428c      	cmp	r4, r1
 8003e08:	bf0b      	itete	eq
 8003e0a:	6863      	ldreq	r3, [r4, #4]
 8003e0c:	684b      	ldrne	r3, [r1, #4]
 8003e0e:	6013      	streq	r3, [r2, #0]
 8003e10:	6063      	strne	r3, [r4, #4]
 8003e12:	bf18      	it	ne
 8003e14:	460c      	movne	r4, r1
 8003e16:	e7e9      	b.n	8003dec <_malloc_r+0x64>
 8003e18:	460c      	mov	r4, r1
 8003e1a:	6849      	ldr	r1, [r1, #4]
 8003e1c:	e7ca      	b.n	8003db4 <_malloc_r+0x2c>
 8003e1e:	1cc4      	adds	r4, r0, #3
 8003e20:	f024 0403 	bic.w	r4, r4, #3
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d005      	beq.n	8003e34 <_malloc_r+0xac>
 8003e28:	1a21      	subs	r1, r4, r0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f000 fae0 	bl	80043f0 <_sbrk_r>
 8003e30:	3001      	adds	r0, #1
 8003e32:	d0cd      	beq.n	8003dd0 <_malloc_r+0x48>
 8003e34:	6025      	str	r5, [r4, #0]
 8003e36:	e7d9      	b.n	8003dec <_malloc_r+0x64>
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000098 	.word	0x20000098
 8003e40:	2000009c 	.word	0x2000009c

08003e44 <__sfputc_r>:
 8003e44:	6893      	ldr	r3, [r2, #8]
 8003e46:	b410      	push	{r4}
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	da08      	bge.n	8003e62 <__sfputc_r+0x1e>
 8003e50:	6994      	ldr	r4, [r2, #24]
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	db02      	blt.n	8003e5c <__sfputc_r+0x18>
 8003e56:	b2cb      	uxtb	r3, r1
 8003e58:	2b0a      	cmp	r3, #10
 8003e5a:	d102      	bne.n	8003e62 <__sfputc_r+0x1e>
 8003e5c:	bc10      	pop	{r4}
 8003e5e:	f000 bb1b 	b.w	8004498 <__swbuf_r>
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	1c58      	adds	r0, r3, #1
 8003e66:	6010      	str	r0, [r2, #0]
 8003e68:	7019      	strb	r1, [r3, #0]
 8003e6a:	b2c8      	uxtb	r0, r1
 8003e6c:	bc10      	pop	{r4}
 8003e6e:	4770      	bx	lr

08003e70 <__sfputs_r>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	4606      	mov	r6, r0
 8003e74:	460f      	mov	r7, r1
 8003e76:	4614      	mov	r4, r2
 8003e78:	18d5      	adds	r5, r2, r3
 8003e7a:	42ac      	cmp	r4, r5
 8003e7c:	d101      	bne.n	8003e82 <__sfputs_r+0x12>
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e007      	b.n	8003e92 <__sfputs_r+0x22>
 8003e82:	463a      	mov	r2, r7
 8003e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7ff ffdb 	bl	8003e44 <__sfputc_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d1f3      	bne.n	8003e7a <__sfputs_r+0xa>
 8003e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e94 <_vfiprintf_r>:
 8003e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e98:	b09d      	sub	sp, #116	; 0x74
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4617      	mov	r7, r2
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	b118      	cbz	r0, 8003eac <_vfiprintf_r+0x18>
 8003ea4:	6983      	ldr	r3, [r0, #24]
 8003ea6:	b90b      	cbnz	r3, 8003eac <_vfiprintf_r+0x18>
 8003ea8:	f7ff fee4 	bl	8003c74 <__sinit>
 8003eac:	4b7c      	ldr	r3, [pc, #496]	; (80040a0 <_vfiprintf_r+0x20c>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d157      	bne.n	8003f62 <_vfiprintf_r+0xce>
 8003eb2:	6874      	ldr	r4, [r6, #4]
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	0718      	lsls	r0, r3, #28
 8003eb8:	d55d      	bpl.n	8003f76 <_vfiprintf_r+0xe2>
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05a      	beq.n	8003f76 <_vfiprintf_r+0xe2>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eca:	2330      	movs	r3, #48	; 0x30
 8003ecc:	f04f 0b01 	mov.w	fp, #1
 8003ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ed4:	46b8      	mov	r8, r7
 8003ed6:	4645      	mov	r5, r8
 8003ed8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d155      	bne.n	8003f8c <_vfiprintf_r+0xf8>
 8003ee0:	ebb8 0a07 	subs.w	sl, r8, r7
 8003ee4:	d00b      	beq.n	8003efe <_vfiprintf_r+0x6a>
 8003ee6:	4653      	mov	r3, sl
 8003ee8:	463a      	mov	r2, r7
 8003eea:	4621      	mov	r1, r4
 8003eec:	4630      	mov	r0, r6
 8003eee:	f7ff ffbf 	bl	8003e70 <__sfputs_r>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f000 80c4 	beq.w	8004080 <_vfiprintf_r+0x1ec>
 8003ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003efa:	4453      	add	r3, sl
 8003efc:	9309      	str	r3, [sp, #36]	; 0x24
 8003efe:	f898 3000 	ldrb.w	r3, [r8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80bc 	beq.w	8004080 <_vfiprintf_r+0x1ec>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	9304      	str	r3, [sp, #16]
 8003f10:	9307      	str	r3, [sp, #28]
 8003f12:	9205      	str	r2, [sp, #20]
 8003f14:	9306      	str	r3, [sp, #24]
 8003f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	7829      	ldrb	r1, [r5, #0]
 8003f20:	4860      	ldr	r0, [pc, #384]	; (80040a4 <_vfiprintf_r+0x210>)
 8003f22:	f000 fcc3 	bl	80048ac <memchr>
 8003f26:	f105 0801 	add.w	r8, r5, #1
 8003f2a:	9b04      	ldr	r3, [sp, #16]
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d131      	bne.n	8003f94 <_vfiprintf_r+0x100>
 8003f30:	06d9      	lsls	r1, r3, #27
 8003f32:	bf44      	itt	mi
 8003f34:	2220      	movmi	r2, #32
 8003f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f3a:	071a      	lsls	r2, r3, #28
 8003f3c:	bf44      	itt	mi
 8003f3e:	222b      	movmi	r2, #43	; 0x2b
 8003f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f44:	782a      	ldrb	r2, [r5, #0]
 8003f46:	2a2a      	cmp	r2, #42	; 0x2a
 8003f48:	d02c      	beq.n	8003fa4 <_vfiprintf_r+0x110>
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	200a      	movs	r0, #10
 8003f4e:	9a07      	ldr	r2, [sp, #28]
 8003f50:	46a8      	mov	r8, r5
 8003f52:	f898 3000 	ldrb.w	r3, [r8]
 8003f56:	3501      	adds	r5, #1
 8003f58:	3b30      	subs	r3, #48	; 0x30
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	d96d      	bls.n	800403a <_vfiprintf_r+0x1a6>
 8003f5e:	b371      	cbz	r1, 8003fbe <_vfiprintf_r+0x12a>
 8003f60:	e026      	b.n	8003fb0 <_vfiprintf_r+0x11c>
 8003f62:	4b51      	ldr	r3, [pc, #324]	; (80040a8 <_vfiprintf_r+0x214>)
 8003f64:	429c      	cmp	r4, r3
 8003f66:	d101      	bne.n	8003f6c <_vfiprintf_r+0xd8>
 8003f68:	68b4      	ldr	r4, [r6, #8]
 8003f6a:	e7a3      	b.n	8003eb4 <_vfiprintf_r+0x20>
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <_vfiprintf_r+0x218>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	bf08      	it	eq
 8003f72:	68f4      	ldreq	r4, [r6, #12]
 8003f74:	e79e      	b.n	8003eb4 <_vfiprintf_r+0x20>
 8003f76:	4621      	mov	r1, r4
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f000 faf1 	bl	8004560 <__swsetup_r>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d09e      	beq.n	8003ec0 <_vfiprintf_r+0x2c>
 8003f82:	f04f 30ff 	mov.w	r0, #4294967295
 8003f86:	b01d      	add	sp, #116	; 0x74
 8003f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8c:	2b25      	cmp	r3, #37	; 0x25
 8003f8e:	d0a7      	beq.n	8003ee0 <_vfiprintf_r+0x4c>
 8003f90:	46a8      	mov	r8, r5
 8003f92:	e7a0      	b.n	8003ed6 <_vfiprintf_r+0x42>
 8003f94:	4a43      	ldr	r2, [pc, #268]	; (80040a4 <_vfiprintf_r+0x210>)
 8003f96:	4645      	mov	r5, r8
 8003f98:	1a80      	subs	r0, r0, r2
 8003f9a:	fa0b f000 	lsl.w	r0, fp, r0
 8003f9e:	4318      	orrs	r0, r3
 8003fa0:	9004      	str	r0, [sp, #16]
 8003fa2:	e7bb      	b.n	8003f1c <_vfiprintf_r+0x88>
 8003fa4:	9a03      	ldr	r2, [sp, #12]
 8003fa6:	1d11      	adds	r1, r2, #4
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	9103      	str	r1, [sp, #12]
 8003fac:	2a00      	cmp	r2, #0
 8003fae:	db01      	blt.n	8003fb4 <_vfiprintf_r+0x120>
 8003fb0:	9207      	str	r2, [sp, #28]
 8003fb2:	e004      	b.n	8003fbe <_vfiprintf_r+0x12a>
 8003fb4:	4252      	negs	r2, r2
 8003fb6:	f043 0302 	orr.w	r3, r3, #2
 8003fba:	9207      	str	r2, [sp, #28]
 8003fbc:	9304      	str	r3, [sp, #16]
 8003fbe:	f898 3000 	ldrb.w	r3, [r8]
 8003fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc4:	d110      	bne.n	8003fe8 <_vfiprintf_r+0x154>
 8003fc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003fca:	f108 0101 	add.w	r1, r8, #1
 8003fce:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd0:	d137      	bne.n	8004042 <_vfiprintf_r+0x1ae>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	f108 0802 	add.w	r8, r8, #2
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	9203      	str	r2, [sp, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bfb8      	it	lt
 8003fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fe6:	9305      	str	r3, [sp, #20]
 8003fe8:	4d31      	ldr	r5, [pc, #196]	; (80040b0 <_vfiprintf_r+0x21c>)
 8003fea:	2203      	movs	r2, #3
 8003fec:	f898 1000 	ldrb.w	r1, [r8]
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f000 fc5b 	bl	80048ac <memchr>
 8003ff6:	b140      	cbz	r0, 800400a <_vfiprintf_r+0x176>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	1b40      	subs	r0, r0, r5
 8003ffc:	fa03 f000 	lsl.w	r0, r3, r0
 8004000:	9b04      	ldr	r3, [sp, #16]
 8004002:	f108 0801 	add.w	r8, r8, #1
 8004006:	4303      	orrs	r3, r0
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	f898 1000 	ldrb.w	r1, [r8]
 800400e:	2206      	movs	r2, #6
 8004010:	4828      	ldr	r0, [pc, #160]	; (80040b4 <_vfiprintf_r+0x220>)
 8004012:	f108 0701 	add.w	r7, r8, #1
 8004016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800401a:	f000 fc47 	bl	80048ac <memchr>
 800401e:	2800      	cmp	r0, #0
 8004020:	d034      	beq.n	800408c <_vfiprintf_r+0x1f8>
 8004022:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <_vfiprintf_r+0x224>)
 8004024:	bb03      	cbnz	r3, 8004068 <_vfiprintf_r+0x1d4>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	3307      	adds	r3, #7
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	3308      	adds	r3, #8
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	444b      	add	r3, r9
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	e74c      	b.n	8003ed4 <_vfiprintf_r+0x40>
 800403a:	fb00 3202 	mla	r2, r0, r2, r3
 800403e:	2101      	movs	r1, #1
 8004040:	e786      	b.n	8003f50 <_vfiprintf_r+0xbc>
 8004042:	2300      	movs	r3, #0
 8004044:	250a      	movs	r5, #10
 8004046:	4618      	mov	r0, r3
 8004048:	9305      	str	r3, [sp, #20]
 800404a:	4688      	mov	r8, r1
 800404c:	f898 2000 	ldrb.w	r2, [r8]
 8004050:	3101      	adds	r1, #1
 8004052:	3a30      	subs	r2, #48	; 0x30
 8004054:	2a09      	cmp	r2, #9
 8004056:	d903      	bls.n	8004060 <_vfiprintf_r+0x1cc>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0c5      	beq.n	8003fe8 <_vfiprintf_r+0x154>
 800405c:	9005      	str	r0, [sp, #20]
 800405e:	e7c3      	b.n	8003fe8 <_vfiprintf_r+0x154>
 8004060:	fb05 2000 	mla	r0, r5, r0, r2
 8004064:	2301      	movs	r3, #1
 8004066:	e7f0      	b.n	800404a <_vfiprintf_r+0x1b6>
 8004068:	ab03      	add	r3, sp, #12
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4622      	mov	r2, r4
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <_vfiprintf_r+0x228>)
 8004070:	a904      	add	r1, sp, #16
 8004072:	4630      	mov	r0, r6
 8004074:	f3af 8000 	nop.w
 8004078:	f1b0 3fff 	cmp.w	r0, #4294967295
 800407c:	4681      	mov	r9, r0
 800407e:	d1d8      	bne.n	8004032 <_vfiprintf_r+0x19e>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	065b      	lsls	r3, r3, #25
 8004084:	f53f af7d 	bmi.w	8003f82 <_vfiprintf_r+0xee>
 8004088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800408a:	e77c      	b.n	8003f86 <_vfiprintf_r+0xf2>
 800408c:	ab03      	add	r3, sp, #12
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	4622      	mov	r2, r4
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <_vfiprintf_r+0x228>)
 8004094:	a904      	add	r1, sp, #16
 8004096:	4630      	mov	r0, r6
 8004098:	f000 f88a 	bl	80041b0 <_printf_i>
 800409c:	e7ec      	b.n	8004078 <_vfiprintf_r+0x1e4>
 800409e:	bf00      	nop
 80040a0:	08004a4c 	.word	0x08004a4c
 80040a4:	08004a8c 	.word	0x08004a8c
 80040a8:	08004a6c 	.word	0x08004a6c
 80040ac:	08004a2c 	.word	0x08004a2c
 80040b0:	08004a92 	.word	0x08004a92
 80040b4:	08004a96 	.word	0x08004a96
 80040b8:	00000000 	.word	0x00000000
 80040bc:	08003e71 	.word	0x08003e71

080040c0 <_printf_common>:
 80040c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	4691      	mov	r9, r2
 80040c6:	461f      	mov	r7, r3
 80040c8:	688a      	ldr	r2, [r1, #8]
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	4606      	mov	r6, r0
 80040ce:	4293      	cmp	r3, r2
 80040d0:	bfb8      	it	lt
 80040d2:	4613      	movlt	r3, r2
 80040d4:	f8c9 3000 	str.w	r3, [r9]
 80040d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040dc:	460c      	mov	r4, r1
 80040de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040e2:	b112      	cbz	r2, 80040ea <_printf_common+0x2a>
 80040e4:	3301      	adds	r3, #1
 80040e6:	f8c9 3000 	str.w	r3, [r9]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	0699      	lsls	r1, r3, #26
 80040ee:	bf42      	ittt	mi
 80040f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040f4:	3302      	addmi	r3, #2
 80040f6:	f8c9 3000 	strmi.w	r3, [r9]
 80040fa:	6825      	ldr	r5, [r4, #0]
 80040fc:	f015 0506 	ands.w	r5, r5, #6
 8004100:	d107      	bne.n	8004112 <_printf_common+0x52>
 8004102:	f104 0a19 	add.w	sl, r4, #25
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	f8d9 2000 	ldr.w	r2, [r9]
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	429d      	cmp	r5, r3
 8004110:	db2a      	blt.n	8004168 <_printf_common+0xa8>
 8004112:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	3300      	adds	r3, #0
 800411a:	bf18      	it	ne
 800411c:	2301      	movne	r3, #1
 800411e:	0692      	lsls	r2, r2, #26
 8004120:	d42f      	bmi.n	8004182 <_printf_common+0xc2>
 8004122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004126:	4639      	mov	r1, r7
 8004128:	4630      	mov	r0, r6
 800412a:	47c0      	blx	r8
 800412c:	3001      	adds	r0, #1
 800412e:	d022      	beq.n	8004176 <_printf_common+0xb6>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	68e5      	ldr	r5, [r4, #12]
 8004134:	f003 0306 	and.w	r3, r3, #6
 8004138:	2b04      	cmp	r3, #4
 800413a:	bf18      	it	ne
 800413c:	2500      	movne	r5, #0
 800413e:	f8d9 2000 	ldr.w	r2, [r9]
 8004142:	f04f 0900 	mov.w	r9, #0
 8004146:	bf08      	it	eq
 8004148:	1aad      	subeq	r5, r5, r2
 800414a:	68a3      	ldr	r3, [r4, #8]
 800414c:	6922      	ldr	r2, [r4, #16]
 800414e:	bf08      	it	eq
 8004150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004154:	4293      	cmp	r3, r2
 8004156:	bfc4      	itt	gt
 8004158:	1a9b      	subgt	r3, r3, r2
 800415a:	18ed      	addgt	r5, r5, r3
 800415c:	341a      	adds	r4, #26
 800415e:	454d      	cmp	r5, r9
 8004160:	d11b      	bne.n	800419a <_printf_common+0xda>
 8004162:	2000      	movs	r0, #0
 8004164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004168:	2301      	movs	r3, #1
 800416a:	4652      	mov	r2, sl
 800416c:	4639      	mov	r1, r7
 800416e:	4630      	mov	r0, r6
 8004170:	47c0      	blx	r8
 8004172:	3001      	adds	r0, #1
 8004174:	d103      	bne.n	800417e <_printf_common+0xbe>
 8004176:	f04f 30ff 	mov.w	r0, #4294967295
 800417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417e:	3501      	adds	r5, #1
 8004180:	e7c1      	b.n	8004106 <_printf_common+0x46>
 8004182:	2030      	movs	r0, #48	; 0x30
 8004184:	18e1      	adds	r1, r4, r3
 8004186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004190:	4422      	add	r2, r4
 8004192:	3302      	adds	r3, #2
 8004194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004198:	e7c3      	b.n	8004122 <_printf_common+0x62>
 800419a:	2301      	movs	r3, #1
 800419c:	4622      	mov	r2, r4
 800419e:	4639      	mov	r1, r7
 80041a0:	4630      	mov	r0, r6
 80041a2:	47c0      	blx	r8
 80041a4:	3001      	adds	r0, #1
 80041a6:	d0e6      	beq.n	8004176 <_printf_common+0xb6>
 80041a8:	f109 0901 	add.w	r9, r9, #1
 80041ac:	e7d7      	b.n	800415e <_printf_common+0x9e>
	...

080041b0 <_printf_i>:
 80041b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041b4:	4617      	mov	r7, r2
 80041b6:	7e0a      	ldrb	r2, [r1, #24]
 80041b8:	b085      	sub	sp, #20
 80041ba:	2a6e      	cmp	r2, #110	; 0x6e
 80041bc:	4698      	mov	r8, r3
 80041be:	4606      	mov	r6, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80041c8:	f000 80bc 	beq.w	8004344 <_printf_i+0x194>
 80041cc:	d81a      	bhi.n	8004204 <_printf_i+0x54>
 80041ce:	2a63      	cmp	r2, #99	; 0x63
 80041d0:	d02e      	beq.n	8004230 <_printf_i+0x80>
 80041d2:	d80a      	bhi.n	80041ea <_printf_i+0x3a>
 80041d4:	2a00      	cmp	r2, #0
 80041d6:	f000 80c8 	beq.w	800436a <_printf_i+0x1ba>
 80041da:	2a58      	cmp	r2, #88	; 0x58
 80041dc:	f000 808a 	beq.w	80042f4 <_printf_i+0x144>
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80041e8:	e02a      	b.n	8004240 <_printf_i+0x90>
 80041ea:	2a64      	cmp	r2, #100	; 0x64
 80041ec:	d001      	beq.n	80041f2 <_printf_i+0x42>
 80041ee:	2a69      	cmp	r2, #105	; 0x69
 80041f0:	d1f6      	bne.n	80041e0 <_printf_i+0x30>
 80041f2:	6821      	ldr	r1, [r4, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041fa:	d023      	beq.n	8004244 <_printf_i+0x94>
 80041fc:	1d11      	adds	r1, r2, #4
 80041fe:	6019      	str	r1, [r3, #0]
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	e027      	b.n	8004254 <_printf_i+0xa4>
 8004204:	2a73      	cmp	r2, #115	; 0x73
 8004206:	f000 80b4 	beq.w	8004372 <_printf_i+0x1c2>
 800420a:	d808      	bhi.n	800421e <_printf_i+0x6e>
 800420c:	2a6f      	cmp	r2, #111	; 0x6f
 800420e:	d02a      	beq.n	8004266 <_printf_i+0xb6>
 8004210:	2a70      	cmp	r2, #112	; 0x70
 8004212:	d1e5      	bne.n	80041e0 <_printf_i+0x30>
 8004214:	680a      	ldr	r2, [r1, #0]
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	600a      	str	r2, [r1, #0]
 800421c:	e003      	b.n	8004226 <_printf_i+0x76>
 800421e:	2a75      	cmp	r2, #117	; 0x75
 8004220:	d021      	beq.n	8004266 <_printf_i+0xb6>
 8004222:	2a78      	cmp	r2, #120	; 0x78
 8004224:	d1dc      	bne.n	80041e0 <_printf_i+0x30>
 8004226:	2278      	movs	r2, #120	; 0x78
 8004228:	496f      	ldr	r1, [pc, #444]	; (80043e8 <_printf_i+0x238>)
 800422a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800422e:	e064      	b.n	80042fa <_printf_i+0x14a>
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004236:	1d11      	adds	r1, r2, #4
 8004238:	6019      	str	r1, [r3, #0]
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004240:	2301      	movs	r3, #1
 8004242:	e0a3      	b.n	800438c <_printf_i+0x1dc>
 8004244:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004248:	f102 0104 	add.w	r1, r2, #4
 800424c:	6019      	str	r1, [r3, #0]
 800424e:	d0d7      	beq.n	8004200 <_printf_i+0x50>
 8004250:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004254:	2b00      	cmp	r3, #0
 8004256:	da03      	bge.n	8004260 <_printf_i+0xb0>
 8004258:	222d      	movs	r2, #45	; 0x2d
 800425a:	425b      	negs	r3, r3
 800425c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004260:	4962      	ldr	r1, [pc, #392]	; (80043ec <_printf_i+0x23c>)
 8004262:	220a      	movs	r2, #10
 8004264:	e017      	b.n	8004296 <_printf_i+0xe6>
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800426e:	d003      	beq.n	8004278 <_printf_i+0xc8>
 8004270:	1d08      	adds	r0, r1, #4
 8004272:	6018      	str	r0, [r3, #0]
 8004274:	680b      	ldr	r3, [r1, #0]
 8004276:	e006      	b.n	8004286 <_printf_i+0xd6>
 8004278:	f010 0f40 	tst.w	r0, #64	; 0x40
 800427c:	f101 0004 	add.w	r0, r1, #4
 8004280:	6018      	str	r0, [r3, #0]
 8004282:	d0f7      	beq.n	8004274 <_printf_i+0xc4>
 8004284:	880b      	ldrh	r3, [r1, #0]
 8004286:	2a6f      	cmp	r2, #111	; 0x6f
 8004288:	bf14      	ite	ne
 800428a:	220a      	movne	r2, #10
 800428c:	2208      	moveq	r2, #8
 800428e:	4957      	ldr	r1, [pc, #348]	; (80043ec <_printf_i+0x23c>)
 8004290:	2000      	movs	r0, #0
 8004292:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004296:	6865      	ldr	r5, [r4, #4]
 8004298:	2d00      	cmp	r5, #0
 800429a:	60a5      	str	r5, [r4, #8]
 800429c:	f2c0 809c 	blt.w	80043d8 <_printf_i+0x228>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	f020 0004 	bic.w	r0, r0, #4
 80042a6:	6020      	str	r0, [r4, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d13f      	bne.n	800432c <_printf_i+0x17c>
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	f040 8095 	bne.w	80043dc <_printf_i+0x22c>
 80042b2:	4675      	mov	r5, lr
 80042b4:	2a08      	cmp	r2, #8
 80042b6:	d10b      	bne.n	80042d0 <_printf_i+0x120>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	07da      	lsls	r2, r3, #31
 80042bc:	d508      	bpl.n	80042d0 <_printf_i+0x120>
 80042be:	6923      	ldr	r3, [r4, #16]
 80042c0:	6862      	ldr	r2, [r4, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	bfde      	ittt	le
 80042c6:	2330      	movle	r3, #48	; 0x30
 80042c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042d0:	ebae 0305 	sub.w	r3, lr, r5
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	f8cd 8000 	str.w	r8, [sp]
 80042da:	463b      	mov	r3, r7
 80042dc:	aa03      	add	r2, sp, #12
 80042de:	4621      	mov	r1, r4
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7ff feed 	bl	80040c0 <_printf_common>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d155      	bne.n	8004396 <_printf_i+0x1e6>
 80042ea:	f04f 30ff 	mov.w	r0, #4294967295
 80042ee:	b005      	add	sp, #20
 80042f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042f4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80042f8:	493c      	ldr	r1, [pc, #240]	; (80043ec <_printf_i+0x23c>)
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004302:	f100 0504 	add.w	r5, r0, #4
 8004306:	601d      	str	r5, [r3, #0]
 8004308:	d001      	beq.n	800430e <_printf_i+0x15e>
 800430a:	6803      	ldr	r3, [r0, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0x164>
 800430e:	0655      	lsls	r5, r2, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0x15a>
 8004312:	8803      	ldrh	r3, [r0, #0]
 8004314:	07d0      	lsls	r0, r2, #31
 8004316:	bf44      	itt	mi
 8004318:	f042 0220 	orrmi.w	r2, r2, #32
 800431c:	6022      	strmi	r2, [r4, #0]
 800431e:	b91b      	cbnz	r3, 8004328 <_printf_i+0x178>
 8004320:	6822      	ldr	r2, [r4, #0]
 8004322:	f022 0220 	bic.w	r2, r2, #32
 8004326:	6022      	str	r2, [r4, #0]
 8004328:	2210      	movs	r2, #16
 800432a:	e7b1      	b.n	8004290 <_printf_i+0xe0>
 800432c:	4675      	mov	r5, lr
 800432e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004332:	fb02 3310 	mls	r3, r2, r0, r3
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800433c:	4603      	mov	r3, r0
 800433e:	2800      	cmp	r0, #0
 8004340:	d1f5      	bne.n	800432e <_printf_i+0x17e>
 8004342:	e7b7      	b.n	80042b4 <_printf_i+0x104>
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	f010 0f80 	tst.w	r0, #128	; 0x80
 800434c:	6949      	ldr	r1, [r1, #20]
 800434e:	d004      	beq.n	800435a <_printf_i+0x1aa>
 8004350:	1d10      	adds	r0, r2, #4
 8004352:	6018      	str	r0, [r3, #0]
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	6019      	str	r1, [r3, #0]
 8004358:	e007      	b.n	800436a <_printf_i+0x1ba>
 800435a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800435e:	f102 0004 	add.w	r0, r2, #4
 8004362:	6018      	str	r0, [r3, #0]
 8004364:	6813      	ldr	r3, [r2, #0]
 8004366:	d0f6      	beq.n	8004356 <_printf_i+0x1a6>
 8004368:	8019      	strh	r1, [r3, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	4675      	mov	r5, lr
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	e7b1      	b.n	80042d6 <_printf_i+0x126>
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	1d11      	adds	r1, r2, #4
 8004376:	6019      	str	r1, [r3, #0]
 8004378:	6815      	ldr	r5, [r2, #0]
 800437a:	2100      	movs	r1, #0
 800437c:	6862      	ldr	r2, [r4, #4]
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fa94 	bl	80048ac <memchr>
 8004384:	b108      	cbz	r0, 800438a <_printf_i+0x1da>
 8004386:	1b40      	subs	r0, r0, r5
 8004388:	6060      	str	r0, [r4, #4]
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	2300      	movs	r3, #0
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	e79f      	b.n	80042d6 <_printf_i+0x126>
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	462a      	mov	r2, r5
 800439a:	4639      	mov	r1, r7
 800439c:	4630      	mov	r0, r6
 800439e:	47c0      	blx	r8
 80043a0:	3001      	adds	r0, #1
 80043a2:	d0a2      	beq.n	80042ea <_printf_i+0x13a>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	079b      	lsls	r3, r3, #30
 80043a8:	d507      	bpl.n	80043ba <_printf_i+0x20a>
 80043aa:	2500      	movs	r5, #0
 80043ac:	f104 0919 	add.w	r9, r4, #25
 80043b0:	68e3      	ldr	r3, [r4, #12]
 80043b2:	9a03      	ldr	r2, [sp, #12]
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	429d      	cmp	r5, r3
 80043b8:	db05      	blt.n	80043c6 <_printf_i+0x216>
 80043ba:	68e0      	ldr	r0, [r4, #12]
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	4298      	cmp	r0, r3
 80043c0:	bfb8      	it	lt
 80043c2:	4618      	movlt	r0, r3
 80043c4:	e793      	b.n	80042ee <_printf_i+0x13e>
 80043c6:	2301      	movs	r3, #1
 80043c8:	464a      	mov	r2, r9
 80043ca:	4639      	mov	r1, r7
 80043cc:	4630      	mov	r0, r6
 80043ce:	47c0      	blx	r8
 80043d0:	3001      	adds	r0, #1
 80043d2:	d08a      	beq.n	80042ea <_printf_i+0x13a>
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7eb      	b.n	80043b0 <_printf_i+0x200>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1a7      	bne.n	800432c <_printf_i+0x17c>
 80043dc:	780b      	ldrb	r3, [r1, #0]
 80043de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043e6:	e765      	b.n	80042b4 <_printf_i+0x104>
 80043e8:	08004aae 	.word	0x08004aae
 80043ec:	08004a9d 	.word	0x08004a9d

080043f0 <_sbrk_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	2300      	movs	r3, #0
 80043f4:	4c05      	ldr	r4, [pc, #20]	; (800440c <_sbrk_r+0x1c>)
 80043f6:	4605      	mov	r5, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	f7ff fafa 	bl	80039f4 <_sbrk>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_sbrk_r+0x1a>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	b103      	cbz	r3, 800440a <_sbrk_r+0x1a>
 8004408:	602b      	str	r3, [r5, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	200001b0 	.word	0x200001b0

08004410 <__sread>:
 8004410:	b510      	push	{r4, lr}
 8004412:	460c      	mov	r4, r1
 8004414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004418:	f000 faa4 	bl	8004964 <_read_r>
 800441c:	2800      	cmp	r0, #0
 800441e:	bfab      	itete	ge
 8004420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004422:	89a3      	ldrhlt	r3, [r4, #12]
 8004424:	181b      	addge	r3, r3, r0
 8004426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800442a:	bfac      	ite	ge
 800442c:	6563      	strge	r3, [r4, #84]	; 0x54
 800442e:	81a3      	strhlt	r3, [r4, #12]
 8004430:	bd10      	pop	{r4, pc}

08004432 <__swrite>:
 8004432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	461f      	mov	r7, r3
 8004438:	898b      	ldrh	r3, [r1, #12]
 800443a:	4605      	mov	r5, r0
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	460c      	mov	r4, r1
 8004440:	4616      	mov	r6, r2
 8004442:	d505      	bpl.n	8004450 <__swrite+0x1e>
 8004444:	2302      	movs	r3, #2
 8004446:	2200      	movs	r2, #0
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	f000 f9b8 	bl	80047c0 <_lseek_r>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	4632      	mov	r2, r6
 8004454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004458:	81a3      	strh	r3, [r4, #12]
 800445a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800445e:	463b      	mov	r3, r7
 8004460:	4628      	mov	r0, r5
 8004462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004466:	f000 b869 	b.w	800453c <_write_r>

0800446a <__sseek>:
 800446a:	b510      	push	{r4, lr}
 800446c:	460c      	mov	r4, r1
 800446e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004472:	f000 f9a5 	bl	80047c0 <_lseek_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	bf15      	itete	ne
 800447c:	6560      	strne	r0, [r4, #84]	; 0x54
 800447e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004486:	81a3      	strheq	r3, [r4, #12]
 8004488:	bf18      	it	ne
 800448a:	81a3      	strhne	r3, [r4, #12]
 800448c:	bd10      	pop	{r4, pc}

0800448e <__sclose>:
 800448e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004492:	f000 b8d3 	b.w	800463c <_close_r>
	...

08004498 <__swbuf_r>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	460e      	mov	r6, r1
 800449c:	4614      	mov	r4, r2
 800449e:	4605      	mov	r5, r0
 80044a0:	b118      	cbz	r0, 80044aa <__swbuf_r+0x12>
 80044a2:	6983      	ldr	r3, [r0, #24]
 80044a4:	b90b      	cbnz	r3, 80044aa <__swbuf_r+0x12>
 80044a6:	f7ff fbe5 	bl	8003c74 <__sinit>
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <__swbuf_r+0x98>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d12a      	bne.n	8004506 <__swbuf_r+0x6e>
 80044b0:	686c      	ldr	r4, [r5, #4]
 80044b2:	69a3      	ldr	r3, [r4, #24]
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	071a      	lsls	r2, r3, #28
 80044ba:	d52e      	bpl.n	800451a <__swbuf_r+0x82>
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	b363      	cbz	r3, 800451a <__swbuf_r+0x82>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	b2f6      	uxtb	r6, r6
 80044c6:	1ac0      	subs	r0, r0, r3
 80044c8:	6963      	ldr	r3, [r4, #20]
 80044ca:	4637      	mov	r7, r6
 80044cc:	4298      	cmp	r0, r3
 80044ce:	db04      	blt.n	80044da <__swbuf_r+0x42>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f94a 	bl	800476c <_fflush_r>
 80044d8:	bb28      	cbnz	r0, 8004526 <__swbuf_r+0x8e>
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	3001      	adds	r0, #1
 80044de:	3b01      	subs	r3, #1
 80044e0:	60a3      	str	r3, [r4, #8]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	6022      	str	r2, [r4, #0]
 80044e8:	701e      	strb	r6, [r3, #0]
 80044ea:	6963      	ldr	r3, [r4, #20]
 80044ec:	4298      	cmp	r0, r3
 80044ee:	d004      	beq.n	80044fa <__swbuf_r+0x62>
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	07db      	lsls	r3, r3, #31
 80044f4:	d519      	bpl.n	800452a <__swbuf_r+0x92>
 80044f6:	2e0a      	cmp	r6, #10
 80044f8:	d117      	bne.n	800452a <__swbuf_r+0x92>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f935 	bl	800476c <_fflush_r>
 8004502:	b190      	cbz	r0, 800452a <__swbuf_r+0x92>
 8004504:	e00f      	b.n	8004526 <__swbuf_r+0x8e>
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <__swbuf_r+0x9c>)
 8004508:	429c      	cmp	r4, r3
 800450a:	d101      	bne.n	8004510 <__swbuf_r+0x78>
 800450c:	68ac      	ldr	r4, [r5, #8]
 800450e:	e7d0      	b.n	80044b2 <__swbuf_r+0x1a>
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <__swbuf_r+0xa0>)
 8004512:	429c      	cmp	r4, r3
 8004514:	bf08      	it	eq
 8004516:	68ec      	ldreq	r4, [r5, #12]
 8004518:	e7cb      	b.n	80044b2 <__swbuf_r+0x1a>
 800451a:	4621      	mov	r1, r4
 800451c:	4628      	mov	r0, r5
 800451e:	f000 f81f 	bl	8004560 <__swsetup_r>
 8004522:	2800      	cmp	r0, #0
 8004524:	d0cc      	beq.n	80044c0 <__swbuf_r+0x28>
 8004526:	f04f 37ff 	mov.w	r7, #4294967295
 800452a:	4638      	mov	r0, r7
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452e:	bf00      	nop
 8004530:	08004a4c 	.word	0x08004a4c
 8004534:	08004a6c 	.word	0x08004a6c
 8004538:	08004a2c 	.word	0x08004a2c

0800453c <_write_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4605      	mov	r5, r0
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	2200      	movs	r2, #0
 8004546:	4c05      	ldr	r4, [pc, #20]	; (800455c <_write_r+0x20>)
 8004548:	6022      	str	r2, [r4, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f7ff fa35 	bl	80039ba <_write>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_write_r+0x1e>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	b103      	cbz	r3, 800455a <_write_r+0x1e>
 8004558:	602b      	str	r3, [r5, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200001b0 	.word	0x200001b0

08004560 <__swsetup_r>:
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <__swsetup_r+0xcc>)
 8004562:	b570      	push	{r4, r5, r6, lr}
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	4606      	mov	r6, r0
 8004568:	460c      	mov	r4, r1
 800456a:	b125      	cbz	r5, 8004576 <__swsetup_r+0x16>
 800456c:	69ab      	ldr	r3, [r5, #24]
 800456e:	b913      	cbnz	r3, 8004576 <__swsetup_r+0x16>
 8004570:	4628      	mov	r0, r5
 8004572:	f7ff fb7f 	bl	8003c74 <__sinit>
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <__swsetup_r+0xd0>)
 8004578:	429c      	cmp	r4, r3
 800457a:	d10f      	bne.n	800459c <__swsetup_r+0x3c>
 800457c:	686c      	ldr	r4, [r5, #4]
 800457e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004582:	b29a      	uxth	r2, r3
 8004584:	0715      	lsls	r5, r2, #28
 8004586:	d42c      	bmi.n	80045e2 <__swsetup_r+0x82>
 8004588:	06d0      	lsls	r0, r2, #27
 800458a:	d411      	bmi.n	80045b0 <__swsetup_r+0x50>
 800458c:	2209      	movs	r2, #9
 800458e:	6032      	str	r2, [r6, #0]
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	f04f 30ff 	mov.w	r0, #4294967295
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <__swsetup_r+0xd4>)
 800459e:	429c      	cmp	r4, r3
 80045a0:	d101      	bne.n	80045a6 <__swsetup_r+0x46>
 80045a2:	68ac      	ldr	r4, [r5, #8]
 80045a4:	e7eb      	b.n	800457e <__swsetup_r+0x1e>
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <__swsetup_r+0xd8>)
 80045a8:	429c      	cmp	r4, r3
 80045aa:	bf08      	it	eq
 80045ac:	68ec      	ldreq	r4, [r5, #12]
 80045ae:	e7e6      	b.n	800457e <__swsetup_r+0x1e>
 80045b0:	0751      	lsls	r1, r2, #29
 80045b2:	d512      	bpl.n	80045da <__swsetup_r+0x7a>
 80045b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045b6:	b141      	cbz	r1, 80045ca <__swsetup_r+0x6a>
 80045b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045bc:	4299      	cmp	r1, r3
 80045be:	d002      	beq.n	80045c6 <__swsetup_r+0x66>
 80045c0:	4630      	mov	r0, r6
 80045c2:	f000 f983 	bl	80048cc <_free_r>
 80045c6:	2300      	movs	r3, #0
 80045c8:	6363      	str	r3, [r4, #52]	; 0x34
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	2300      	movs	r3, #0
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	f043 0308 	orr.w	r3, r3, #8
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	b94b      	cbnz	r3, 80045fa <__swsetup_r+0x9a>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d003      	beq.n	80045fa <__swsetup_r+0x9a>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 f919 	bl	800482c <__smakebuf_r>
 80045fa:	89a2      	ldrh	r2, [r4, #12]
 80045fc:	f012 0301 	ands.w	r3, r2, #1
 8004600:	d00c      	beq.n	800461c <__swsetup_r+0xbc>
 8004602:	2300      	movs	r3, #0
 8004604:	60a3      	str	r3, [r4, #8]
 8004606:	6963      	ldr	r3, [r4, #20]
 8004608:	425b      	negs	r3, r3
 800460a:	61a3      	str	r3, [r4, #24]
 800460c:	6923      	ldr	r3, [r4, #16]
 800460e:	b953      	cbnz	r3, 8004626 <__swsetup_r+0xc6>
 8004610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004614:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004618:	d1ba      	bne.n	8004590 <__swsetup_r+0x30>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	0792      	lsls	r2, r2, #30
 800461e:	bf58      	it	pl
 8004620:	6963      	ldrpl	r3, [r4, #20]
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	e7f2      	b.n	800460c <__swsetup_r+0xac>
 8004626:	2000      	movs	r0, #0
 8004628:	e7f7      	b.n	800461a <__swsetup_r+0xba>
 800462a:	bf00      	nop
 800462c:	20000014 	.word	0x20000014
 8004630:	08004a4c 	.word	0x08004a4c
 8004634:	08004a6c 	.word	0x08004a6c
 8004638:	08004a2c 	.word	0x08004a2c

0800463c <_close_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	2300      	movs	r3, #0
 8004640:	4c05      	ldr	r4, [pc, #20]	; (8004658 <_close_r+0x1c>)
 8004642:	4605      	mov	r5, r0
 8004644:	4608      	mov	r0, r1
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	f7ff fa00 	bl	8003a4c <_close>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <_close_r+0x1a>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	b103      	cbz	r3, 8004656 <_close_r+0x1a>
 8004654:	602b      	str	r3, [r5, #0]
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	200001b0 	.word	0x200001b0

0800465c <__sflush_r>:
 800465c:	898a      	ldrh	r2, [r1, #12]
 800465e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	0710      	lsls	r0, r2, #28
 8004666:	460c      	mov	r4, r1
 8004668:	d45a      	bmi.n	8004720 <__sflush_r+0xc4>
 800466a:	684b      	ldr	r3, [r1, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	dc05      	bgt.n	800467c <__sflush_r+0x20>
 8004670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	dc02      	bgt.n	800467c <__sflush_r+0x20>
 8004676:	2000      	movs	r0, #0
 8004678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800467e:	2e00      	cmp	r6, #0
 8004680:	d0f9      	beq.n	8004676 <__sflush_r+0x1a>
 8004682:	2300      	movs	r3, #0
 8004684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004688:	682f      	ldr	r7, [r5, #0]
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	d033      	beq.n	80046f6 <__sflush_r+0x9a>
 800468e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	075a      	lsls	r2, r3, #29
 8004694:	d505      	bpl.n	80046a2 <__sflush_r+0x46>
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	1ac0      	subs	r0, r0, r3
 800469a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800469c:	b10b      	cbz	r3, 80046a2 <__sflush_r+0x46>
 800469e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046a0:	1ac0      	subs	r0, r0, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	4602      	mov	r2, r0
 80046a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046a8:	6a21      	ldr	r1, [r4, #32]
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b0      	blx	r6
 80046ae:	1c43      	adds	r3, r0, #1
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	d106      	bne.n	80046c2 <__sflush_r+0x66>
 80046b4:	6829      	ldr	r1, [r5, #0]
 80046b6:	291d      	cmp	r1, #29
 80046b8:	d84b      	bhi.n	8004752 <__sflush_r+0xf6>
 80046ba:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <__sflush_r+0x10c>)
 80046bc:	40ca      	lsrs	r2, r1
 80046be:	07d6      	lsls	r6, r2, #31
 80046c0:	d547      	bpl.n	8004752 <__sflush_r+0xf6>
 80046c2:	2200      	movs	r2, #0
 80046c4:	6062      	str	r2, [r4, #4]
 80046c6:	6922      	ldr	r2, [r4, #16]
 80046c8:	04d9      	lsls	r1, r3, #19
 80046ca:	6022      	str	r2, [r4, #0]
 80046cc:	d504      	bpl.n	80046d8 <__sflush_r+0x7c>
 80046ce:	1c42      	adds	r2, r0, #1
 80046d0:	d101      	bne.n	80046d6 <__sflush_r+0x7a>
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	b903      	cbnz	r3, 80046d8 <__sflush_r+0x7c>
 80046d6:	6560      	str	r0, [r4, #84]	; 0x54
 80046d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046da:	602f      	str	r7, [r5, #0]
 80046dc:	2900      	cmp	r1, #0
 80046de:	d0ca      	beq.n	8004676 <__sflush_r+0x1a>
 80046e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d002      	beq.n	80046ee <__sflush_r+0x92>
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 f8ef 	bl	80048cc <_free_r>
 80046ee:	2000      	movs	r0, #0
 80046f0:	6360      	str	r0, [r4, #52]	; 0x34
 80046f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f6:	6a21      	ldr	r1, [r4, #32]
 80046f8:	2301      	movs	r3, #1
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b0      	blx	r6
 80046fe:	1c41      	adds	r1, r0, #1
 8004700:	d1c6      	bne.n	8004690 <__sflush_r+0x34>
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0c3      	beq.n	8004690 <__sflush_r+0x34>
 8004708:	2b1d      	cmp	r3, #29
 800470a:	d001      	beq.n	8004710 <__sflush_r+0xb4>
 800470c:	2b16      	cmp	r3, #22
 800470e:	d101      	bne.n	8004714 <__sflush_r+0xb8>
 8004710:	602f      	str	r7, [r5, #0]
 8004712:	e7b0      	b.n	8004676 <__sflush_r+0x1a>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004720:	690f      	ldr	r7, [r1, #16]
 8004722:	2f00      	cmp	r7, #0
 8004724:	d0a7      	beq.n	8004676 <__sflush_r+0x1a>
 8004726:	0793      	lsls	r3, r2, #30
 8004728:	bf18      	it	ne
 800472a:	2300      	movne	r3, #0
 800472c:	680e      	ldr	r6, [r1, #0]
 800472e:	bf08      	it	eq
 8004730:	694b      	ldreq	r3, [r1, #20]
 8004732:	eba6 0807 	sub.w	r8, r6, r7
 8004736:	600f      	str	r7, [r1, #0]
 8004738:	608b      	str	r3, [r1, #8]
 800473a:	f1b8 0f00 	cmp.w	r8, #0
 800473e:	dd9a      	ble.n	8004676 <__sflush_r+0x1a>
 8004740:	4643      	mov	r3, r8
 8004742:	463a      	mov	r2, r7
 8004744:	6a21      	ldr	r1, [r4, #32]
 8004746:	4628      	mov	r0, r5
 8004748:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800474a:	47b0      	blx	r6
 800474c:	2800      	cmp	r0, #0
 800474e:	dc07      	bgt.n	8004760 <__sflush_r+0x104>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	4407      	add	r7, r0
 8004762:	eba8 0800 	sub.w	r8, r8, r0
 8004766:	e7e8      	b.n	800473a <__sflush_r+0xde>
 8004768:	20400001 	.word	0x20400001

0800476c <_fflush_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	690b      	ldr	r3, [r1, #16]
 8004770:	4605      	mov	r5, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b1db      	cbz	r3, 80047ae <_fflush_r+0x42>
 8004776:	b118      	cbz	r0, 8004780 <_fflush_r+0x14>
 8004778:	6983      	ldr	r3, [r0, #24]
 800477a:	b90b      	cbnz	r3, 8004780 <_fflush_r+0x14>
 800477c:	f7ff fa7a 	bl	8003c74 <__sinit>
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <_fflush_r+0x48>)
 8004782:	429c      	cmp	r4, r3
 8004784:	d109      	bne.n	800479a <_fflush_r+0x2e>
 8004786:	686c      	ldr	r4, [r5, #4]
 8004788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800478c:	b17b      	cbz	r3, 80047ae <_fflush_r+0x42>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004796:	f7ff bf61 	b.w	800465c <__sflush_r>
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <_fflush_r+0x4c>)
 800479c:	429c      	cmp	r4, r3
 800479e:	d101      	bne.n	80047a4 <_fflush_r+0x38>
 80047a0:	68ac      	ldr	r4, [r5, #8]
 80047a2:	e7f1      	b.n	8004788 <_fflush_r+0x1c>
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <_fflush_r+0x50>)
 80047a6:	429c      	cmp	r4, r3
 80047a8:	bf08      	it	eq
 80047aa:	68ec      	ldreq	r4, [r5, #12]
 80047ac:	e7ec      	b.n	8004788 <_fflush_r+0x1c>
 80047ae:	2000      	movs	r0, #0
 80047b0:	bd38      	pop	{r3, r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	08004a4c 	.word	0x08004a4c
 80047b8:	08004a6c 	.word	0x08004a6c
 80047bc:	08004a2c 	.word	0x08004a2c

080047c0 <_lseek_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	2200      	movs	r2, #0
 80047ca:	4c05      	ldr	r4, [pc, #20]	; (80047e0 <_lseek_r+0x20>)
 80047cc:	6022      	str	r2, [r4, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f7ff f960 	bl	8003a94 <_lseek>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_lseek_r+0x1e>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	b103      	cbz	r3, 80047de <_lseek_r+0x1e>
 80047dc:	602b      	str	r3, [r5, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200001b0 	.word	0x200001b0

080047e4 <__swhatbuf_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	460e      	mov	r6, r1
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	b090      	sub	sp, #64	; 0x40
 80047ee:	2900      	cmp	r1, #0
 80047f0:	4614      	mov	r4, r2
 80047f2:	461d      	mov	r5, r3
 80047f4:	da07      	bge.n	8004806 <__swhatbuf_r+0x22>
 80047f6:	2300      	movs	r3, #0
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	89b3      	ldrh	r3, [r6, #12]
 80047fc:	061a      	lsls	r2, r3, #24
 80047fe:	d410      	bmi.n	8004822 <__swhatbuf_r+0x3e>
 8004800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004804:	e00e      	b.n	8004824 <__swhatbuf_r+0x40>
 8004806:	aa01      	add	r2, sp, #4
 8004808:	f000 f8be 	bl	8004988 <_fstat_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	dbf2      	blt.n	80047f6 <__swhatbuf_r+0x12>
 8004810:	9a02      	ldr	r2, [sp, #8]
 8004812:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004816:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800481a:	425a      	negs	r2, r3
 800481c:	415a      	adcs	r2, r3
 800481e:	602a      	str	r2, [r5, #0]
 8004820:	e7ee      	b.n	8004800 <__swhatbuf_r+0x1c>
 8004822:	2340      	movs	r3, #64	; 0x40
 8004824:	2000      	movs	r0, #0
 8004826:	6023      	str	r3, [r4, #0]
 8004828:	b010      	add	sp, #64	; 0x40
 800482a:	bd70      	pop	{r4, r5, r6, pc}

0800482c <__smakebuf_r>:
 800482c:	898b      	ldrh	r3, [r1, #12]
 800482e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004830:	079d      	lsls	r5, r3, #30
 8004832:	4606      	mov	r6, r0
 8004834:	460c      	mov	r4, r1
 8004836:	d507      	bpl.n	8004848 <__smakebuf_r+0x1c>
 8004838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	2301      	movs	r3, #1
 8004842:	6163      	str	r3, [r4, #20]
 8004844:	b002      	add	sp, #8
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	ab01      	add	r3, sp, #4
 800484a:	466a      	mov	r2, sp
 800484c:	f7ff ffca 	bl	80047e4 <__swhatbuf_r>
 8004850:	9900      	ldr	r1, [sp, #0]
 8004852:	4605      	mov	r5, r0
 8004854:	4630      	mov	r0, r6
 8004856:	f7ff fa97 	bl	8003d88 <_malloc_r>
 800485a:	b948      	cbnz	r0, 8004870 <__smakebuf_r+0x44>
 800485c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004860:	059a      	lsls	r2, r3, #22
 8004862:	d4ef      	bmi.n	8004844 <__smakebuf_r+0x18>
 8004864:	f023 0303 	bic.w	r3, r3, #3
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	81a3      	strh	r3, [r4, #12]
 800486e:	e7e3      	b.n	8004838 <__smakebuf_r+0xc>
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <__smakebuf_r+0x7c>)
 8004872:	62b3      	str	r3, [r6, #40]	; 0x28
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	6020      	str	r0, [r4, #0]
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	9b00      	ldr	r3, [sp, #0]
 8004880:	6120      	str	r0, [r4, #16]
 8004882:	6163      	str	r3, [r4, #20]
 8004884:	9b01      	ldr	r3, [sp, #4]
 8004886:	b15b      	cbz	r3, 80048a0 <__smakebuf_r+0x74>
 8004888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800488c:	4630      	mov	r0, r6
 800488e:	f000 f88d 	bl	80049ac <_isatty_r>
 8004892:	b128      	cbz	r0, 80048a0 <__smakebuf_r+0x74>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	431d      	orrs	r5, r3
 80048a4:	81a5      	strh	r5, [r4, #12]
 80048a6:	e7cd      	b.n	8004844 <__smakebuf_r+0x18>
 80048a8:	08003bf5 	.word	0x08003bf5

080048ac <memchr>:
 80048ac:	b510      	push	{r4, lr}
 80048ae:	b2c9      	uxtb	r1, r1
 80048b0:	4402      	add	r2, r0
 80048b2:	4290      	cmp	r0, r2
 80048b4:	4603      	mov	r3, r0
 80048b6:	d101      	bne.n	80048bc <memchr+0x10>
 80048b8:	2000      	movs	r0, #0
 80048ba:	bd10      	pop	{r4, pc}
 80048bc:	781c      	ldrb	r4, [r3, #0]
 80048be:	3001      	adds	r0, #1
 80048c0:	428c      	cmp	r4, r1
 80048c2:	d1f6      	bne.n	80048b2 <memchr+0x6>
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <__malloc_lock>:
 80048c8:	4770      	bx	lr

080048ca <__malloc_unlock>:
 80048ca:	4770      	bx	lr

080048cc <_free_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d043      	beq.n	800495c <_free_r+0x90>
 80048d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d8:	1f0c      	subs	r4, r1, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfb8      	it	lt
 80048de:	18e4      	addlt	r4, r4, r3
 80048e0:	f7ff fff2 	bl	80048c8 <__malloc_lock>
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <_free_r+0x94>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	4610      	mov	r0, r2
 80048ea:	b933      	cbnz	r3, 80048fa <_free_r+0x2e>
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6014      	str	r4, [r2, #0]
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f6:	f7ff bfe8 	b.w	80048ca <__malloc_unlock>
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d90b      	bls.n	8004916 <_free_r+0x4a>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	1862      	adds	r2, r4, r1
 8004902:	4293      	cmp	r3, r2
 8004904:	bf01      	itttt	eq
 8004906:	681a      	ldreq	r2, [r3, #0]
 8004908:	685b      	ldreq	r3, [r3, #4]
 800490a:	1852      	addeq	r2, r2, r1
 800490c:	6022      	streq	r2, [r4, #0]
 800490e:	6063      	str	r3, [r4, #4]
 8004910:	6004      	str	r4, [r0, #0]
 8004912:	e7ed      	b.n	80048f0 <_free_r+0x24>
 8004914:	4613      	mov	r3, r2
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	b10a      	cbz	r2, 800491e <_free_r+0x52>
 800491a:	42a2      	cmp	r2, r4
 800491c:	d9fa      	bls.n	8004914 <_free_r+0x48>
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	1858      	adds	r0, r3, r1
 8004922:	42a0      	cmp	r0, r4
 8004924:	d10b      	bne.n	800493e <_free_r+0x72>
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	4401      	add	r1, r0
 800492a:	1858      	adds	r0, r3, r1
 800492c:	4282      	cmp	r2, r0
 800492e:	6019      	str	r1, [r3, #0]
 8004930:	d1de      	bne.n	80048f0 <_free_r+0x24>
 8004932:	6810      	ldr	r0, [r2, #0]
 8004934:	6852      	ldr	r2, [r2, #4]
 8004936:	4401      	add	r1, r0
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e7d8      	b.n	80048f0 <_free_r+0x24>
 800493e:	d902      	bls.n	8004946 <_free_r+0x7a>
 8004940:	230c      	movs	r3, #12
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	e7d4      	b.n	80048f0 <_free_r+0x24>
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1821      	adds	r1, r4, r0
 800494a:	428a      	cmp	r2, r1
 800494c:	bf01      	itttt	eq
 800494e:	6811      	ldreq	r1, [r2, #0]
 8004950:	6852      	ldreq	r2, [r2, #4]
 8004952:	1809      	addeq	r1, r1, r0
 8004954:	6021      	streq	r1, [r4, #0]
 8004956:	6062      	str	r2, [r4, #4]
 8004958:	605c      	str	r4, [r3, #4]
 800495a:	e7c9      	b.n	80048f0 <_free_r+0x24>
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	20000098 	.word	0x20000098

08004964 <_read_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4605      	mov	r5, r0
 8004968:	4608      	mov	r0, r1
 800496a:	4611      	mov	r1, r2
 800496c:	2200      	movs	r2, #0
 800496e:	4c05      	ldr	r4, [pc, #20]	; (8004984 <_read_r+0x20>)
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	f7ff f804 	bl	8003980 <_read>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_read_r+0x1e>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	b103      	cbz	r3, 8004982 <_read_r+0x1e>
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	200001b0 	.word	0x200001b0

08004988 <_fstat_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	2300      	movs	r3, #0
 800498c:	4c06      	ldr	r4, [pc, #24]	; (80049a8 <_fstat_r+0x20>)
 800498e:	4605      	mov	r5, r0
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	f7ff f864 	bl	8003a62 <_fstat>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d102      	bne.n	80049a4 <_fstat_r+0x1c>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	b103      	cbz	r3, 80049a4 <_fstat_r+0x1c>
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	bf00      	nop
 80049a8:	200001b0 	.word	0x200001b0

080049ac <_isatty_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	2300      	movs	r3, #0
 80049b0:	4c05      	ldr	r4, [pc, #20]	; (80049c8 <_isatty_r+0x1c>)
 80049b2:	4605      	mov	r5, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	f7ff f862 	bl	8003a80 <_isatty>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_isatty_r+0x1a>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_isatty_r+0x1a>
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	200001b0 	.word	0x200001b0

080049cc <_init>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

080049d8 <_fini>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr
