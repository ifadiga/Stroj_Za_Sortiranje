
STROJ_ZA_SORTIRANJE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08005e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  20000078  08005efc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000224  08005efc  00020224  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d87a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f3f  00000000  00000000  0002d91b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000de0  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  00030640  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005e10  00000000  00000000  00031328  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000405f  00000000  00000000  00037138  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003b197  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000042b0  00000000  00000000  0003b214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d88 	.word	0x08005d88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005d88 	.word	0x08005d88

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_d2f>:
 8000934:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000938:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800093c:	bf24      	itt	cs
 800093e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000942:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000946:	d90d      	bls.n	8000964 <__aeabi_d2f+0x30>
 8000948:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800094c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000950:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000958:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000968:	d121      	bne.n	80009ae <__aeabi_d2f+0x7a>
 800096a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800096e:	bfbc      	itt	lt
 8000970:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000974:	4770      	bxlt	lr
 8000976:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800097e:	f1c2 0218 	rsb	r2, r2, #24
 8000982:	f1c2 0c20 	rsb	ip, r2, #32
 8000986:	fa10 f30c 	lsls.w	r3, r0, ip
 800098a:	fa20 f002 	lsr.w	r0, r0, r2
 800098e:	bf18      	it	ne
 8000990:	f040 0001 	orrne.w	r0, r0, #1
 8000994:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000998:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800099c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a0:	ea40 000c 	orr.w	r0, r0, ip
 80009a4:	fa23 f302 	lsr.w	r3, r3, r2
 80009a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ac:	e7cc      	b.n	8000948 <__aeabi_d2f+0x14>
 80009ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b2:	d107      	bne.n	80009c4 <__aeabi_d2f+0x90>
 80009b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b8:	bf1e      	ittt	ne
 80009ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009c2:	4770      	bxne	lr
 80009c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <__aeabi_f2iz>:
 80009d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009dc:	d30f      	bcc.n	80009fe <__aeabi_f2iz+0x2a>
 80009de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009e6:	d90d      	bls.n	8000a04 <__aeabi_f2iz+0x30>
 80009e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f4:	fa23 f002 	lsr.w	r0, r3, r2
 80009f8:	bf18      	it	ne
 80009fa:	4240      	negne	r0, r0
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr
 8000a04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a08:	d101      	bne.n	8000a0e <__aeabi_f2iz+0x3a>
 8000a0a:	0242      	lsls	r2, r0, #9
 8000a0c:	d105      	bne.n	8000a1a <__aeabi_f2iz+0x46>
 8000a0e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a12:	bf08      	it	eq
 8000a14:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0000 	mov.w	r0, #0
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_f2uiz>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	d20e      	bcs.n	8000a42 <__aeabi_f2uiz+0x22>
 8000a24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a28:	d30b      	bcc.n	8000a42 <__aeabi_f2uiz+0x22>
 8000a2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a32:	d409      	bmi.n	8000a48 <__aeabi_f2uiz+0x28>
 8000a34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0000 	mov.w	r0, #0
 8000a46:	4770      	bx	lr
 8000a48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a4c:	d101      	bne.n	8000a52 <__aeabi_f2uiz+0x32>
 8000a4e:	0242      	lsls	r2, r0, #9
 8000a50:	d102      	bne.n	8000a58 <__aeabi_f2uiz+0x38>
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_Init+0x28>)
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_Init+0x28>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 fd53 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f003 ff96 	bl	80049ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fd6b 	bl	8001586 <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 fd33 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	20000000 	.word	0x20000000

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	200000bc 	.word	0x200000bc

08000b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	200000bc 	.word	0x200000bc

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_Delay+0x40>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffe0 	bl	8000b10 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad2      	subs	r2, r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d3f7      	bcc.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e0be      	b.n	8000d08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f003 ff32 	bl	8004a10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fbb1 	bl	8001314 <ADC_ConversionStop_Disable>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8099 	bne.w	8000cf6 <HAL_ADC_Init+0x18e>
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8095 	bne.w	8000cf6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bd4:	f023 0302 	bic.w	r3, r3, #2
 8000bd8:	f043 0202 	orr.w	r2, r3, #2
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7b1b      	ldrb	r3, [r3, #12]
 8000bee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c00:	d003      	beq.n	8000c0a <HAL_ADC_Init+0xa2>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d102      	bne.n	8000c10 <HAL_ADC_Init+0xa8>
 8000c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0e:	e000      	b.n	8000c12 <HAL_ADC_Init+0xaa>
 8000c10:	2300      	movs	r3, #0
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7d1b      	ldrb	r3, [r3, #20]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d119      	bne.n	8000c54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7b1b      	ldrb	r3, [r3, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d109      	bne.n	8000c3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	035a      	lsls	r2, r3, #13
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	e00b      	b.n	8000c54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	f043 0220 	orr.w	r2, r3, #32
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4c:	f043 0201 	orr.w	r2, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	6852      	ldr	r2, [r2, #4]
 8000c5e:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6899      	ldr	r1, [r3, #8]
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_ADC_Init+0x1a8>)
 8000c74:	400b      	ands	r3, r1
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c84:	d003      	beq.n	8000c8e <HAL_ADC_Init+0x126>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d104      	bne.n	8000c98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	051b      	lsls	r3, r3, #20
 8000c96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ca2:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_ADC_Init+0x1ac>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d10b      	bne.n	8000cd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	f023 0303 	bic.w	r3, r3, #3
 8000cca:	f043 0201 	orr.w	r2, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd2:	e018      	b.n	8000d06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f023 0312 	bic.w	r3, r3, #18
 8000cdc:	f043 0210 	orr.w	r2, r3, #16
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	f043 0201 	orr.w	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf4:	e007      	b.n	8000d06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfa:	f043 0210 	orr.w	r2, r3, #16
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	ffe1f7fd 	.word	0xffe1f7fd
 8000d14:	ff1f0efe 	.word	0xff1f0efe

08000d18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Start+0x1a>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e098      	b.n	8000e64 <HAL_ADC_Start+0x14c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 fa98 	bl	8001270 <ADC_Enable>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 8087 	bne.w	8000e5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <HAL_ADC_Start+0x154>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d105      	bne.n	8000d76 <HAL_ADC_Start+0x5e>
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d115      	bne.n	8000da2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d026      	beq.n	8000dde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000da0:	e01d      	b.n	8000dde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d004      	beq.n	8000dc2 <HAL_ADC_Start+0xaa>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <HAL_ADC_Start+0x154>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10d      	bne.n	8000dde <HAL_ADC_Start+0xc6>
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	f023 0206 	bic.w	r2, r3, #6
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df6:	e002      	b.n	8000dfe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f06f 0202 	mvn.w	r2, #2
 8000e0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e1e:	d113      	bne.n	8000e48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_ADC_Start+0x154>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d105      	bne.n	8000e36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d108      	bne.n	8000e48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	6892      	ldr	r2, [r2, #8]
 8000e40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	e00c      	b.n	8000e62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6892      	ldr	r2, [r2, #8]
 8000e52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	e003      	b.n	8000e62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40012800 	.word	0x40012800
 8000e70:	40012400 	.word	0x40012400

08000e74 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e8a:	f7ff fe41 	bl	8000b10 <HAL_GetTick>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f043 0220 	orr.w	r2, r3, #32
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0c8      	b.n	8001048 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d12a      	bne.n	8000f1a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d123      	bne.n	8000f1a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ed2:	e01a      	b.n	8000f0a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eda:	d016      	beq.n	8000f0a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d007      	beq.n	8000ef2 <HAL_ADC_PollForConversion+0x7e>
 8000ee2:	f7ff fe15 	bl	8000b10 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	1ad2      	subs	r2, r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d90b      	bls.n	8000f0a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	f043 0204 	orr.w	r2, r3, #4
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e09e      	b.n	8001048 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0dd      	beq.n	8000ed4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f18:	e06c      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_ADC_PollForConversion+0x1dc>)
 8000f1c:	681c      	ldr	r4, [r3, #0]
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f001 fa16 	bl	8002350 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f24:	4603      	mov	r3, r0
 8000f26:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	4b48      	ldr	r3, [pc, #288]	; (8001054 <HAL_ADC_PollForConversion+0x1e0>)
 8000f32:	400b      	ands	r3, r1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d118      	bne.n	8000f6a <HAL_ADC_PollForConversion+0xf6>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68d9      	ldr	r1, [r3, #12]
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <HAL_ADC_PollForConversion+0x1e4>)
 8000f40:	400b      	ands	r3, r1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <HAL_ADC_PollForConversion+0xf6>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6919      	ldr	r1, [r3, #16]
 8000f4c:	4b43      	ldr	r3, [pc, #268]	; (800105c <HAL_ADC_PollForConversion+0x1e8>)
 8000f4e:	400b      	ands	r3, r1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d108      	bne.n	8000f66 <HAL_ADC_PollForConversion+0xf2>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68d9      	ldr	r1, [r3, #12]
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <HAL_ADC_PollForConversion+0x1ec>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_PollForConversion+0xf2>
 8000f62:	2314      	movs	r3, #20
 8000f64:	e020      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x134>
 8000f66:	2329      	movs	r3, #41	; 0x29
 8000f68:	e01e      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x134>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6919      	ldr	r1, [r3, #16]
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_ADC_PollForConversion+0x1e8>)
 8000f72:	400b      	ands	r3, r1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x112>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68d9      	ldr	r1, [r3, #12]
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_ADC_PollForConversion+0x1ec>)
 8000f80:	400b      	ands	r3, r1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00d      	beq.n	8000fa2 <HAL_ADC_PollForConversion+0x12e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6919      	ldr	r1, [r3, #16]
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <HAL_ADC_PollForConversion+0x1f0>)
 8000f8e:	400b      	ands	r3, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <HAL_ADC_PollForConversion+0x132>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68d9      	ldr	r1, [r3, #12]
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <HAL_ADC_PollForConversion+0x1f0>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_PollForConversion+0x132>
 8000fa2:	2354      	movs	r3, #84	; 0x54
 8000fa4:	e000      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x134>
 8000fa6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fa8:	fb03 f302 	mul.w	r3, r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fae:	e01d      	b.n	8000fec <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb6:	d016      	beq.n	8000fe6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_PollForConversion+0x15a>
 8000fbe:	f7ff fda7 	bl	8000b10 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	1ad2      	subs	r2, r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d90b      	bls.n	8000fe6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f043 0204 	orr.w	r2, r3, #4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e030      	b.n	8001048 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3dd      	bcc.n	8000fb0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0212 	mvn.w	r2, #18
 8000ffc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001014:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001018:	d115      	bne.n	8001046 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800101e:	2b00      	cmp	r3, #0
 8001020:	d111      	bne.n	8001046 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	20000010 	.word	0x20000010
 8001054:	24924924 	.word	0x24924924
 8001058:	00924924 	.word	0x00924924
 800105c:	12492492 	.word	0x12492492
 8001060:	00492492 	.word	0x00492492
 8001064:	00249249 	.word	0x00249249

08001068 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001080:	b490      	push	{r4, r7}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x20>
 800109c:	2302      	movs	r3, #2
 800109e:	e0dc      	b.n	800125a <HAL_ADC_ConfigChannel+0x1da>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d81c      	bhi.n	80010ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b05      	subs	r3, #5
 80010c6:	221f      	movs	r2, #31
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4018      	ands	r0, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b05      	subs	r3, #5
 80010e0:	fa04 f303 	lsl.w	r3, r4, r3
 80010e4:	4303      	orrs	r3, r0
 80010e6:	634b      	str	r3, [r1, #52]	; 0x34
 80010e8:	e03c      	b.n	8001164 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d81c      	bhi.n	800112c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b23      	subs	r3, #35	; 0x23
 8001108:	221f      	movs	r2, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	4018      	ands	r0, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b23      	subs	r3, #35	; 0x23
 8001122:	fa04 f303 	lsl.w	r3, r4, r3
 8001126:	4303      	orrs	r3, r0
 8001128:	630b      	str	r3, [r1, #48]	; 0x30
 800112a:	e01b      	b.n	8001164 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	3b41      	subs	r3, #65	; 0x41
 8001142:	221f      	movs	r2, #31
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4018      	ands	r0, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681c      	ldr	r4, [r3, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b41      	subs	r3, #65	; 0x41
 800115c:	fa04 f303 	lsl.w	r3, r4, r3
 8001160:	4303      	orrs	r3, r0
 8001162:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d91c      	bls.n	80011a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68d8      	ldr	r0, [r3, #12]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3b1e      	subs	r3, #30
 8001182:	2207      	movs	r2, #7
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	4018      	ands	r0, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689c      	ldr	r4, [r3, #8]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	3b1e      	subs	r3, #30
 800119c:	fa04 f303 	lsl.w	r3, r4, r3
 80011a0:	4303      	orrs	r3, r0
 80011a2:	60cb      	str	r3, [r1, #12]
 80011a4:	e019      	b.n	80011da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6918      	ldr	r0, [r3, #16]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4018      	ands	r0, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689c      	ldr	r4, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	fa04 f303 	lsl.w	r3, r4, r3
 80011d6:	4303      	orrs	r3, r0
 80011d8:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d003      	beq.n	80011ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d132      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_ADC_ConfigChannel+0x1e4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d125      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d126      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	6892      	ldr	r2, [r2, #8]
 800120c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001210:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d11a      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_ConfigChannel+0x1e8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_ADC_ConfigChannel+0x1ec>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9a      	lsrs	r2, r3, #18
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001230:	e002      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3b01      	subs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f9      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x1b2>
 800123e:	e007      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bc90      	pop	{r4, r7}
 8001262:	4770      	bx	lr
 8001264:	40012400 	.word	0x40012400
 8001268:	20000010 	.word	0x20000010
 800126c:	431bde83 	.word	0x431bde83

08001270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b01      	cmp	r3, #1
 800128c:	d039      	beq.n	8001302 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	6892      	ldr	r2, [r2, #8]
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <ADC_Enable+0x9c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <ADC_Enable+0xa0>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012ac:	e002      	b.n	80012b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fc29 	bl	8000b10 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c0:	e018      	b.n	80012f4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012c2:	f7ff fc25 	bl	8000b10 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d911      	bls.n	80012f4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e007      	b.n	8001304 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d1df      	bne.n	80012c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000010 	.word	0x20000010
 8001310:	431bde83 	.word	0x431bde83

08001314 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d127      	bne.n	800137e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	6892      	ldr	r2, [r2, #8]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800133e:	f7ff fbe7 	bl	8000b10 <HAL_GetTick>
 8001342:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001344:	e014      	b.n	8001370 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001346:	f7ff fbe3 	bl	8000b10 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d90d      	bls.n	8001370 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f043 0210 	orr.w	r2, r3, #16
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e007      	b.n	8001380 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b01      	cmp	r3, #1
 800137c:	d0e3      	beq.n	8001346 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_EnableIRQ+0x34>)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	f002 021f 	and.w	r2, r2, #31
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	490d      	ldr	r1, [pc, #52]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	4909      	ldr	r1, [pc, #36]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	2201      	movs	r2, #1
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	1e5a      	subs	r2, r3, #1
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	401a      	ands	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014be:	2101      	movs	r1, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	1e59      	subs	r1, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff92 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff2f 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff44 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff92 	bl	8001478 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff61 	bl	8001424 <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff37 	bl	80013ec <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d005      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e057      	b.n	8001672 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f022 020e 	bic.w	r2, r2, #14
 80015d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <HAL_DMA_Abort_IT+0xdc>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_DMA_Abort_IT+0xe0>)
 80015ec:	4299      	cmp	r1, r3
 80015ee:	d02e      	beq.n	800164e <HAL_DMA_Abort_IT+0xae>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_DMA_Abort_IT+0xe4>)
 80015f8:	4299      	cmp	r1, r3
 80015fa:	d026      	beq.n	800164a <HAL_DMA_Abort_IT+0xaa>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_DMA_Abort_IT+0xe8>)
 8001604:	4299      	cmp	r1, r3
 8001606:	d01d      	beq.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_DMA_Abort_IT+0xec>)
 8001610:	4299      	cmp	r1, r3
 8001612:	d014      	beq.n	800163e <HAL_DMA_Abort_IT+0x9e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_DMA_Abort_IT+0xf0>)
 800161c:	4299      	cmp	r1, r3
 800161e:	d00b      	beq.n	8001638 <HAL_DMA_Abort_IT+0x98>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_DMA_Abort_IT+0xf4>)
 8001628:	4299      	cmp	r1, r3
 800162a:	d102      	bne.n	8001632 <HAL_DMA_Abort_IT+0x92>
 800162c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001630:	e00e      	b.n	8001650 <HAL_DMA_Abort_IT+0xb0>
 8001632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001636:	e00b      	b.n	8001650 <HAL_DMA_Abort_IT+0xb0>
 8001638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163c:	e008      	b.n	8001650 <HAL_DMA_Abort_IT+0xb0>
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	e005      	b.n	8001650 <HAL_DMA_Abort_IT+0xb0>
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	e002      	b.n	8001650 <HAL_DMA_Abort_IT+0xb0>
 800164a:	2310      	movs	r3, #16
 800164c:	e000      	b.n	8001650 <HAL_DMA_Abort_IT+0xb0>
 800164e:	2301      	movs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
    } 
  }
  return status;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40020000 	.word	0x40020000
 8001680:	40020008 	.word	0x40020008
 8001684:	4002001c 	.word	0x4002001c
 8001688:	40020030 	.word	0x40020030
 800168c:	40020044 	.word	0x40020044
 8001690:	40020058 	.word	0x40020058
 8001694:	4002006c 	.word	0x4002006c

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b08b      	sub	sp, #44	; 0x2c
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e127      	b.n	80018fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ac:	2201      	movs	r2, #1
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8116 	bne.w	80018f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d034      	beq.n	800173c <HAL_GPIO_Init+0xa4>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d80d      	bhi.n	80016f2 <HAL_GPIO_Init+0x5a>
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d02b      	beq.n	8001732 <HAL_GPIO_Init+0x9a>
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d804      	bhi.n	80016e8 <HAL_GPIO_Init+0x50>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d031      	beq.n	8001746 <HAL_GPIO_Init+0xae>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d01c      	beq.n	8001720 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e6:	e048      	b.n	800177a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d043      	beq.n	8001774 <HAL_GPIO_Init+0xdc>
 80016ec:	2b11      	cmp	r3, #17
 80016ee:	d01b      	beq.n	8001728 <HAL_GPIO_Init+0x90>
          break;
 80016f0:	e043      	b.n	800177a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016f2:	4a89      	ldr	r2, [pc, #548]	; (8001918 <HAL_GPIO_Init+0x280>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d026      	beq.n	8001746 <HAL_GPIO_Init+0xae>
 80016f8:	4a87      	ldr	r2, [pc, #540]	; (8001918 <HAL_GPIO_Init+0x280>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d806      	bhi.n	800170c <HAL_GPIO_Init+0x74>
 80016fe:	4a87      	ldr	r2, [pc, #540]	; (800191c <HAL_GPIO_Init+0x284>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d020      	beq.n	8001746 <HAL_GPIO_Init+0xae>
 8001704:	4a86      	ldr	r2, [pc, #536]	; (8001920 <HAL_GPIO_Init+0x288>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01d      	beq.n	8001746 <HAL_GPIO_Init+0xae>
          break;
 800170a:	e036      	b.n	800177a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800170c:	4a85      	ldr	r2, [pc, #532]	; (8001924 <HAL_GPIO_Init+0x28c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0xae>
 8001712:	4a85      	ldr	r2, [pc, #532]	; (8001928 <HAL_GPIO_Init+0x290>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d016      	beq.n	8001746 <HAL_GPIO_Init+0xae>
 8001718:	4a84      	ldr	r2, [pc, #528]	; (800192c <HAL_GPIO_Init+0x294>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0xae>
          break;
 800171e:	e02c      	b.n	800177a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e028      	b.n	800177a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e023      	b.n	800177a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	3308      	adds	r3, #8
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e01e      	b.n	800177a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	330c      	adds	r3, #12
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e019      	b.n	800177a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174e:	2304      	movs	r3, #4
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e012      	b.n	800177a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	611a      	str	r2, [r3, #16]
          break;
 8001766:	e008      	b.n	800177a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001768:	2308      	movs	r3, #8
 800176a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	615a      	str	r2, [r3, #20]
          break;
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2bff      	cmp	r3, #255	; 0xff
 800177e:	d801      	bhi.n	8001784 <HAL_GPIO_Init+0xec>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	e001      	b.n	8001788 <HAL_GPIO_Init+0xf0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3304      	adds	r3, #4
 8001788:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2bff      	cmp	r3, #255	; 0xff
 800178e:	d802      	bhi.n	8001796 <HAL_GPIO_Init+0xfe>
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x104>
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	3b08      	subs	r3, #8
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	210f      	movs	r1, #15
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	6a39      	ldr	r1, [r7, #32]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	431a      	orrs	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8096 	beq.w	80018f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ca:	4a59      	ldr	r2, [pc, #356]	; (8001930 <HAL_GPIO_Init+0x298>)
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_GPIO_Init+0x298>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_GPIO_Init+0x298>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e2:	4a54      	ldr	r2, [pc, #336]	; (8001934 <HAL_GPIO_Init+0x29c>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_GPIO_Init+0x2a0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x19e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_GPIO_Init+0x2a4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x19a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a49      	ldr	r2, [pc, #292]	; (8001940 <HAL_GPIO_Init+0x2a8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x196>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a48      	ldr	r2, [pc, #288]	; (8001944 <HAL_GPIO_Init+0x2ac>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x192>
 8001826:	2303      	movs	r3, #3
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x1a0>
 800182a:	2304      	movs	r3, #4
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x1a0>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x1a0>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x1a0>
 8001836:	2300      	movs	r3, #0
 8001838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001848:	493a      	ldr	r1, [pc, #232]	; (8001934 <HAL_GPIO_Init+0x29c>)
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001862:	4939      	ldr	r1, [pc, #228]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001870:	4935      	ldr	r1, [pc, #212]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	4013      	ands	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800188a:	492f      	ldr	r1, [pc, #188]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001898:	492b      	ldr	r1, [pc, #172]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4013      	ands	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b2:	4925      	ldr	r1, [pc, #148]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c0:	4921      	ldr	r1, [pc, #132]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4013      	ands	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018da:	491b      	ldr	r1, [pc, #108]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60cb      	str	r3, [r1, #12]
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4917      	ldr	r1, [pc, #92]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4013      	ands	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f aed0 	bne.w	80016ac <HAL_GPIO_Init+0x14>
  }
}
 800190c:	bf00      	nop
 800190e:	372c      	adds	r7, #44	; 0x2c
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	10210000 	.word	0x10210000
 800191c:	10110000 	.word	0x10110000
 8001920:	10120000 	.word	0x10120000
 8001924:	10310000 	.word	0x10310000
 8001928:	10320000 	.word	0x10320000
 800192c:	10220000 	.word	0x10220000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	40010800 	.word	0x40010800
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40011400 	.word	0x40011400
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	807b      	strh	r3, [r7, #2]
 8001986:	4613      	mov	r3, r2
 8001988:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198a:	787b      	ldrb	r3, [r7, #1]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001990:	887a      	ldrh	r2, [r7, #2]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001996:	e003      	b.n	80019a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e26c      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d8:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d112      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d168      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e246      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76>
 8001a14:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4a7b      	ldr	r2, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4a78      	ldr	r2, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	4b77      	ldr	r3, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01d      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xbc>
 8001a4e:	4a72      	ldr	r2, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	4b71      	ldr	r3, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a68:	4a6b      	ldr	r2, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f842 	bl	8000b10 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff f83e 	bl	8000b10 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1fa      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe4>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f82e 	bl	8000b10 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f82a 	bl	8000b10 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1e6      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x10c>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d063      	beq.n	8001bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d11c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e1ba      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	493d      	ldr	r1, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	e03a      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe ffe3 	bl	8000b10 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7fe ffdf 	bl	8000b10 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e19b      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	492a      	ldr	r1, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe ffc2 	bl	8000b10 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7fe ffbe 	bl	8000b10 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e17a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03a      	beq.n	8001c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d019      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7fe ffa2 	bl	8000b10 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7fe ff9e 	bl	8000b10 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e15a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 fada 	bl	80021a8 <RCC_Delay>
 8001bf4:	e01c      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7fe ff88 	bl	8000b10 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7fe ff84 	bl	8000b10 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d908      	bls.n	8001c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e140      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	42420000 	.word	0x42420000
 8001c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e9      	bne.n	8001c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a6 	beq.w	8001d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b97      	ldr	r3, [pc, #604]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4a94      	ldr	r2, [pc, #592]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4b93      	ldr	r3, [pc, #588]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4a8b      	ldr	r2, [pc, #556]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	4b8a      	ldr	r3, [pc, #552]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7fe ff45 	bl	8000b10 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7fe ff41 	bl	8000b10 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0fd      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x312>
 8001cb0:	4a7b      	ldr	r2, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02d      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x334>
 8001cc6:	4a76      	ldr	r2, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4a73      	ldr	r2, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x356>
 8001ce8:	4a6d      	ldr	r2, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001d02:	4a67      	ldr	r2, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4a64      	ldr	r2, [pc, #400]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe fef5 	bl	8000b10 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fef1 	bl	8000b10 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0ab      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCC_OscConfig+0x37e>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe fedf 	bl	8000b10 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7fe fedb 	bl	8000b10 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e095      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4a48      	ldr	r2, [pc, #288]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8081 	beq.w	8001e96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d061      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d146      	bne.n	8001e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe feaf 	bl	8000b10 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7fe feab 	bl	8000b10 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e067      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d108      	bne.n	8001df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dde:	4930      	ldr	r1, [pc, #192]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	482b      	ldr	r0, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a19      	ldr	r1, [r3, #32]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	430b      	orrs	r3, r1
 8001e04:	4313      	orrs	r3, r2
 8001e06:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fe7f 	bl	8000b10 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7fe fe7b 	bl	8000b10 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e037      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46a>
 8001e34:	e02f      	b.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fe68 	bl	8000b10 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fe64 	bl	8000b10 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e020      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x498>
 8001e62:	e018      	b.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42420060 	.word	0x42420060

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0207 	and.w	r2, r3, #7
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d210      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4967      	ldr	r1, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	4b66      	ldr	r3, [pc, #408]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 0207 	bic.w	r2, r3, #7
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0207 	and.w	r2, r3, #7
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4a59      	ldr	r2, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4950      	ldr	r1, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4939      	ldr	r1, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 0203 	bic.w	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fdb8 	bl	8000b10 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fdb4 	bl	8000b10 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0207 	and.w	r2, r3, #7
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4924      	ldr	r1, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 0207 	bic.w	r2, r3, #7
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4919      	ldr	r1, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4912      	ldr	r1, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4601      	mov	r1, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	fa21 f303 	lsr.w	r3, r1, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd16 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	08005dcc 	.word	0x08005dcc
 8002078:	20000010 	.word	0x20000010
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b490      	push	{r4, r7}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002088:	1d3c      	adds	r4, r7, #4
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x46>
 80020be:	e02d      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020c2:	623b      	str	r3, [r7, #32]
      break;
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020d2:	4413      	add	r3, r2
 80020d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c5b      	lsrs	r3, r3, #17
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020f2:	4413      	add	r3, r2
 80020f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fe:	fb02 f203 	mul.w	r2, r2, r3
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e004      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	623b      	str	r3, [r7, #32]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 800211e:	623b      	str	r3, [r7, #32]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	6a3b      	ldr	r3, [r7, #32]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc90      	pop	{r4, r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	08005da0 	.word	0x08005da0
 8002134:	08005db0 	.word	0x08005db0
 8002138:	40021000 	.word	0x40021000
 800213c:	007a1200 	.word	0x007a1200
 8002140:	003d0900 	.word	0x003d0900

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_RCC_GetHCLKFreq+0x10>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	20000010 	.word	0x20000010

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff2 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002160:	4601      	mov	r1, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08005ddc 	.word	0x08005ddc

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002184:	f7ff ffde 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002188:	4601      	mov	r1, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0adb      	lsrs	r3, r3, #11
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	fa21 f303 	lsr.w	r3, r1, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08005ddc 	.word	0x08005ddc

080021a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <RCC_Delay+0x34>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <RCC_Delay+0x38>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a5b      	lsrs	r3, r3, #9
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c4:	bf00      	nop
  }
  while (Delay --);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	60fa      	str	r2, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <RCC_Delay+0x1c>
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000010 	.word	0x20000010
 80021e0:	10624dd3 	.word	0x10624dd3

080021e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d07d      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002204:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	61d3      	str	r3, [r2, #28]
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d118      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002238:	4a43      	ldr	r2, [pc, #268]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002244:	f7fe fc64 	bl	8000b10 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	e008      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7fe fc60 	bl	8000b10 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e06d      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800226a:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002272:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d02e      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d027      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002290:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d014      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fc2f 	bl	8000b10 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7fe fc2b 	bl	8000b10 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e036      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d8:	491a      	ldr	r1, [pc, #104]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002326:	4907      	ldr	r1, [pc, #28]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420440 	.word	0x42420440

08002350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b08d      	sub	sp, #52	; 0x34
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800235a:	f107 040c 	add.w	r4, r7, #12
 800235e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d07f      	beq.n	8002484 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002384:	2b10      	cmp	r3, #16
 8002386:	d002      	beq.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002388:	2b01      	cmp	r3, #1
 800238a:	d048      	beq.n	800241e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800238c:	e08b      	b.n	80024a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800238e:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002394:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d07f      	beq.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80023ac:	4413      	add	r3, r2
 80023ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d018      	beq.n	80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023be:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0c5b      	lsrs	r3, r3, #17
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80023cc:	4413      	add	r3, r2
 80023ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023de:	4a37      	ldr	r2, [pc, #220]	; (80024bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	6a3a      	ldr	r2, [r7, #32]
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ee:	e004      	b.n	80023fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002406:	d102      	bne.n	800240e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800240c:	e048      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800241c:	e040      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242e:	d108      	bne.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800243a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002440:	e01f      	b.n	8002482 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244c:	d109      	bne.n	8002462 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800245a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002460:	e00f      	b.n	8002482 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246c:	d11a      	bne.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d014      	beq.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800247a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002480:	e010      	b.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002482:	e00f      	b.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002484:	f7ff fe7c 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0b9b      	lsrs	r3, r3, #14
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	3301      	adds	r3, #1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80024a0:	bf00      	nop
 80024a2:	e000      	b.n	80024a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80024a4:	bf00      	nop
    }
  }
  return (frequency);
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3734      	adds	r7, #52	; 0x34
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	08005db4 	.word	0x08005db4
 80024b4:	08005dc4 	.word	0x08005dc4
 80024b8:	40021000 	.word	0x40021000
 80024bc:	007a1200 	.word	0x007a1200
 80024c0:	003d0900 	.word	0x003d0900
 80024c4:	aaaaaaab 	.word	0xaaaaaaab

080024c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e01d      	b.n	8002516 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f002 fae2 	bl	8004ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 fa10 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d007      	beq.n	8002550 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e01d      	b.n	80025b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f815 	bl	80025ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 f9c2 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fc24 	bl	8002e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_TIM_PWM_Start+0x60>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b06      	cmp	r3, #6
 800260e:	d007      	beq.n	8002620 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40012c00 	.word	0x40012c00

08002630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002646:	2302      	movs	r3, #2
 8002648:	e0b4      	b.n	80027b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	f200 809f 	bhi.w	80027a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002662:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	0800269d 	.word	0x0800269d
 800266c:	080027a1 	.word	0x080027a1
 8002670:	080027a1 	.word	0x080027a1
 8002674:	080027a1 	.word	0x080027a1
 8002678:	080026dd 	.word	0x080026dd
 800267c:	080027a1 	.word	0x080027a1
 8002680:	080027a1 	.word	0x080027a1
 8002684:	080027a1 	.word	0x080027a1
 8002688:	0800271f 	.word	0x0800271f
 800268c:	080027a1 	.word	0x080027a1
 8002690:	080027a1 	.word	0x080027a1
 8002694:	080027a1 	.word	0x080027a1
 8002698:	0800275f 	.word	0x0800275f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f9a4 	bl	80029f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	6992      	ldr	r2, [r2, #24]
 80026b2:	f042 0208 	orr.w	r2, r2, #8
 80026b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	6992      	ldr	r2, [r2, #24]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	6991      	ldr	r1, [r2, #24]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	6912      	ldr	r2, [r2, #16]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	619a      	str	r2, [r3, #24]
      break;
 80026da:	e062      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f9ea 	bl	8002abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	6992      	ldr	r2, [r2, #24]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	6992      	ldr	r2, [r2, #24]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	6991      	ldr	r1, [r2, #24]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	6912      	ldr	r2, [r2, #16]
 8002716:	0212      	lsls	r2, r2, #8
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]
      break;
 800271c:	e041      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fa33 	bl	8002b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	69d2      	ldr	r2, [r2, #28]
 8002734:	f042 0208 	orr.w	r2, r2, #8
 8002738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	69d2      	ldr	r2, [r2, #28]
 8002744:	f022 0204 	bic.w	r2, r2, #4
 8002748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	69d1      	ldr	r1, [r2, #28]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	6912      	ldr	r2, [r2, #16]
 8002758:	430a      	orrs	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
      break;
 800275c:	e021      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa7d 	bl	8002c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	69d2      	ldr	r2, [r2, #28]
 8002774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	69d2      	ldr	r2, [r2, #28]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	69d1      	ldr	r1, [r2, #28]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	6912      	ldr	r2, [r2, #16]
 8002798:	0212      	lsls	r2, r2, #8
 800279a:	430a      	orrs	r2, r1
 800279c:	61da      	str	r2, [r3, #28]
      break;
 800279e:	e000      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIM_ConfigClockSource+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0a6      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x166>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d067      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x120>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d80b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x6c>
 8002810:	2b10      	cmp	r3, #16
 8002812:	d073      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
 8002814:	2b10      	cmp	r3, #16
 8002816:	d802      	bhi.n	800281e <HAL_TIM_ConfigClockSource+0x62>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d06f      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800281c:	e078      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800281e:	2b20      	cmp	r3, #32
 8002820:	d06c      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
 8002822:	2b30      	cmp	r3, #48	; 0x30
 8002824:	d06a      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002826:	e073      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d00d      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0x8c>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d804      	bhi.n	800283a <HAL_TIM_ConfigClockSource+0x7e>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d033      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xe0>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d041      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002838:	e06a      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d066      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x152>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d017      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002846:	e063      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 fac9 	bl	8002dee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800286a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e04c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 fab2 	bl	8002dee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e039      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 fa29 	bl	8002d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2150      	movs	r1, #80	; 0x50
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fa80 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028ba:	e029      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f000 fa47 	bl	8002d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2160      	movs	r1, #96	; 0x60
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fa70 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028da:	e019      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f000 fa09 	bl	8002d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fa60 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028fa:	e009      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fa57 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 800290c:	e000      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800290e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <TIM_Base_SetConfig+0xbc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <TIM_Base_SetConfig+0xc0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <TIM_Base_SetConfig+0xbc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <TIM_Base_SetConfig+0xc0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800

080029f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0302 	bic.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <TIM_OC1_SetConfig+0xc8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10c      	bne.n	8002a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0308 	bic.w	r3, r3, #8
 8002a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <TIM_OC1_SetConfig+0xc8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d111      	bne.n	8002a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0210 	bic.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0320 	bic.w	r3, r3, #32
 8002b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC2_SetConfig+0xd0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10d      	bne.n	8002b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <TIM_OC2_SetConfig+0xd0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d113      	bne.n	8002b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_OC3_SetConfig+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <TIM_OC3_SetConfig+0xd0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d113      	bne.n	8002c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00

08002c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <TIM_OC4_SetConfig+0x98>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d109      	bne.n	8002cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0201 	bic.w	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 030a 	bic.w	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f023 0210 	bic.w	r2, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f043 0307 	orr.w	r3, r3, #7
 8002ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b087      	sub	sp, #28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	021a      	lsls	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e032      	b.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e03d      	b.n	8002f94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e03f      	b.n	8003030 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f001 fdd5 	bl	8004b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	68d2      	ldr	r2, [r2, #12]
 8002fdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fb40 	bl	8003668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	6912      	ldr	r2, [r2, #16]
 8002ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	6952      	ldr	r2, [r2, #20]
 8003002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003006:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	f040 8082 	bne.w	800315e <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_UART_Transmit+0x2e>
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07a      	b.n	8003160 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_UART_Transmit+0x40>
 8003074:	2302      	movs	r3, #2
 8003076:	e073      	b.n	8003160 <HAL_UART_Transmit+0x128>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2221      	movs	r2, #33	; 0x21
 800308a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800308e:	f7fd fd3f 	bl	8000b10 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a0:	e041      	b.n	8003126 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	d121      	bne.n	80030fe <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f966 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e045      	b.n	8003160 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	8812      	ldrh	r2, [r2, #0]
 80030e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3302      	adds	r3, #2
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	e017      	b.n	8003126 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3301      	adds	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	e013      	b.n	8003126 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f944 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e023      	b.n	8003160 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1b8      	bne.n	80030a2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2200      	movs	r2, #0
 8003138:	2140      	movs	r1, #64	; 0x40
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f92b 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e00a      	b.n	8003160 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_UART_IRQHandler+0x52>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f9d6 	bl	8003564 <UART_Receive_IT>
      return;
 80031b8:	e0cc      	b.n	8003354 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80ab 	beq.w	8003318 <HAL_UART_IRQHandler+0x1b0>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_UART_IRQHandler+0x70>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80a0 	beq.w	8003318 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_UART_IRQHandler+0x90>
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_UART_IRQHandler+0xb0>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	f043 0202 	orr.w	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_UART_IRQHandler+0xd0>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_UART_IRQHandler+0xf0>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	f043 0208 	orr.w	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d078      	beq.n	8003352 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_UART_IRQHandler+0x112>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f975 	bl	8003564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <HAL_UART_IRQHandler+0x13a>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d031      	beq.n	8003306 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8c1 	bl	800342a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d023      	beq.n	80032fe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	6952      	ldr	r2, [r2, #20]
 80032c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_UART_IRQHandler+0x1f4>)
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe f960 	bl	80015a0 <HAL_DMA_Abort_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f0:	4610      	mov	r0, r2
 80032f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00e      	b.n	8003314 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f844 	bl	8003384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e00a      	b.n	8003314 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f840 	bl	8003384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e006      	b.n	8003314 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f83c 	bl	8003384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003312:	e01e      	b.n	8003352 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	bf00      	nop
    return;
 8003316:	e01c      	b.n	8003352 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_UART_IRQHandler+0x1cc>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8ad 	bl	800348c <UART_Transmit_IT>
    return;
 8003332:	e00f      	b.n	8003354 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_UART_IRQHandler+0x1ec>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8f3 	bl	8003534 <UART_EndTransmit_IT>
    return;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003352:	bf00      	nop
  }
}
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	08003465 	.word	0x08003465

08003360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	e02c      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d028      	beq.n	8003402 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b6:	f7fd fbab 	bl	8000b10 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d91d      	bls.n	8003402 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	68d2      	ldr	r2, [r2, #12]
 80033d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	6952      	ldr	r2, [r2, #20]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e00f      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	401a      	ands	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	429a      	cmp	r2, r3
 800341e:	d0c3      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	68d2      	ldr	r2, [r2, #12]
 800343c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003440:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	6952      	ldr	r2, [r2, #20]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff ff80 	bl	8003384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b21      	cmp	r3, #33	; 0x21
 800349e:	d143      	bne.n	8003528 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d119      	bne.n	80034de <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d105      	bne.n	80034d2 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]
 80034d0:	e00e      	b.n	80034f0 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	621a      	str	r2, [r3, #32]
 80034dc:	e008      	b.n	80034f0 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	1c58      	adds	r0, r3, #1
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6208      	str	r0, [r1, #32]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4619      	mov	r1, r3
 80034fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003512:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff03 	bl	8003360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b22      	cmp	r3, #34	; 0x22
 8003576:	d171      	bne.n	800365c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003580:	d123      	bne.n	80035ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10e      	bne.n	80035ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
 80035ac:	e029      	b.n	8003602 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28
 80035c8:	e01b      	b.n	8003602 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6291      	str	r1, [r2, #40]	; 0x28
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	6852      	ldr	r2, [r2, #4]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e00c      	b.n	8003602 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	1c59      	adds	r1, r3, #1
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6291      	str	r1, [r2, #40]	; 0x28
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4619      	mov	r1, r3
 8003610:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003612:	2b00      	cmp	r3, #0
 8003614:	d120      	bne.n	8003658 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	68d2      	ldr	r2, [r2, #12]
 8003620:	f022 0220 	bic.w	r2, r2, #32
 8003624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6952      	ldr	r2, [r2, #20]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fe8f 	bl	8003372 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e002      	b.n	800365e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	6912      	ldr	r2, [r2, #16]
 800367a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	430a      	orrs	r2, r1
 8003684:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036a6:	f023 030c 	bic.w	r3, r3, #12
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	6952      	ldr	r2, [r2, #20]
 80036ba:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6992      	ldr	r2, [r2, #24]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a52      	ldr	r2, [pc, #328]	; (8003814 <UART_SetConfig+0x1ac>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d14e      	bne.n	800376e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fd56 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 80036d4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009a      	lsls	r2, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	4a49      	ldr	r2, [pc, #292]	; (8003818 <UART_SetConfig+0x1b0>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	0118      	lsls	r0, r3, #4
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003710:	4b41      	ldr	r3, [pc, #260]	; (8003818 <UART_SetConfig+0x1b0>)
 8003712:	fba3 4302 	umull	r4, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2464      	movs	r4, #100	; 0x64
 800371a:	fb04 f303 	mul.w	r3, r4, r3
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	3332      	adds	r3, #50	; 0x32
 8003724:	4a3c      	ldr	r2, [pc, #240]	; (8003818 <UART_SetConfig+0x1b0>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	4418      	add	r0, r3
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fbb2 f2f3 	udiv	r2, r2, r3
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <UART_SetConfig+0x1b0>)
 800374a:	fba3 4302 	umull	r4, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2464      	movs	r4, #100	; 0x64
 8003752:	fb04 f303 	mul.w	r3, r4, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	; 0x32
 800375c:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <UART_SetConfig+0x1b0>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4403      	add	r3, r0
 800376a:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800376c:	e04d      	b.n	800380a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800376e:	f7fe fcf3 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003772:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009a      	lsls	r2, r3, #2
 8003782:	441a      	add	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	4a22      	ldr	r2, [pc, #136]	; (8003818 <UART_SetConfig+0x1b0>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	0118      	lsls	r0, r3, #4
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <UART_SetConfig+0x1b0>)
 80037b0:	fba3 4302 	umull	r4, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	2464      	movs	r4, #100	; 0x64
 80037b8:	fb04 f303 	mul.w	r3, r4, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	4a15      	ldr	r2, [pc, #84]	; (8003818 <UART_SetConfig+0x1b0>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ce:	4418      	add	r0, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009a      	lsls	r2, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <UART_SetConfig+0x1b0>)
 80037e8:	fba3 4302 	umull	r4, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2464      	movs	r4, #100	; 0x64
 80037f0:	fb04 f303 	mul.w	r3, r4, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	3332      	adds	r3, #50	; 0x32
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <UART_SetConfig+0x1b0>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4403      	add	r3, r0
 8003808:	608b      	str	r3, [r1, #8]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	bf00      	nop
 8003814:	40013800 	.word	0x40013800
 8003818:	51eb851f 	.word	0x51eb851f

0800381c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003822:	f7fd f91d 	bl	8000a60 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003826:	f000 f999 	bl	8003b5c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800382a:	f000 fb17 	bl	8003e5c <MX_GPIO_Init>
	MX_ADC1_Init();
 800382e:	f000 f9e5 	bl	8003bfc <MX_ADC1_Init>
	MX_TIM1_Init();
 8003832:	f000 fa3d 	bl	8003cb0 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8003836:	f000 fae7 	bl	8003e08 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // <-------- ENABLE RXNE
 800383a:	4bba      	ldr	r3, [pc, #744]	; (8003b24 <main+0x308>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4ab9      	ldr	r2, [pc, #740]	; (8003b24 <main+0x308>)
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	68d2      	ldr	r2, [r2, #12]
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	60da      	str	r2, [r3, #12]

	HX711_set_scale(1);
 800384a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800384e:	f000 fe87 	bl	8004560 <HX711_set_scale>
	HX711_Tare(10);
 8003852:	200a      	movs	r0, #10
 8003854:	f000 fe92 	bl	800457c <HX711_Tare>
	HX711_set_scale(calibration_factor);
 8003858:	4bb3      	ldr	r3, [pc, #716]	; (8003b28 <main+0x30c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fe7f 	bl	8004560 <HX711_set_scale>

	//kod za pokretanje TIM1 i PWM signala
	HAL_TIM_Base_Start(&htim1);
 8003862:	48b2      	ldr	r0, [pc, #712]	; (8003b2c <main+0x310>)
 8003864:	f7fe fe5b 	bl	800251e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Start Pwm signal on PA-9 Pin
 8003868:	2104      	movs	r1, #4
 800386a:	48b0      	ldr	r0, [pc, #704]	; (8003b2c <main+0x310>)
 800386c:	f7fe feae 	bl	80025cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //Start Pwm signal on PA-10 Pin
 8003870:	2108      	movs	r1, #8
 8003872:	48ae      	ldr	r0, [pc, #696]	; (8003b2c <main+0x310>)
 8003874:	f7fe feaa 	bl	80025cc <HAL_TIM_PWM_Start>

	//postavljamo servo motore na pozicije u kojima miruju
	Servo_motor(PWM2, 0);
 8003878:	2100      	movs	r1, #0
 800387a:	2004      	movs	r0, #4
 800387c:	f000 fee4 	bl	8004648 <Servo_motor>
	Servo_motor(PWM3, 100);
 8003880:	2164      	movs	r1, #100	; 0x64
 8003882:	2008      	movs	r0, #8
 8003884:	f000 fee0 	bl	8004648 <Servo_motor>

	HAL_GPIO_WritePin(GPIOC, LED_Pin, SET);
 8003888:	2201      	movs	r2, #1
 800388a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800388e:	48a8      	ldr	r0, [pc, #672]	; (8003b30 <main+0x314>)
 8003890:	f7fe f873 	bl	800197a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, SET);
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800389a:	48a6      	ldr	r0, [pc, #664]	; (8003b34 <main+0x318>)
 800389c:	f7fe f86d 	bl	800197a <HAL_GPIO_WritePin>
	sys_flag = 0;
 80038a0:	4ba5      	ldr	r3, [pc, #660]	; (8003b38 <main+0x31c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//glavni kod
		if (sys_flag_changed) {
 80038a6:	4ba5      	ldr	r3, [pc, #660]	; (8003b3c <main+0x320>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <main+0xac>
			Spremnik_zero();
 80038b0:	f001 f804 	bl	80048bc <Spremnik_zero>
			Parse_spremnik();
 80038b4:	f000 fb50 	bl	8003f58 <Parse_spremnik>
			sys_flag_changed = 0;
 80038b8:	4ba0      	ldr	r3, [pc, #640]	; (8003b3c <main+0x320>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, SENZOR_LED_Pin, RESET);
 80038be:	2200      	movs	r2, #0
 80038c0:	2102      	movs	r1, #2
 80038c2:	489c      	ldr	r0, [pc, #624]	; (8003b34 <main+0x318>)
 80038c4:	f7fe f859 	bl	800197a <HAL_GPIO_WritePin>
		}
		//------------------------------SORTIRANJE PREDMETA----------------------------
		if (sys_flag == 1) {
 80038c8:	4b9b      	ldr	r3, [pc, #620]	; (8003b38 <main+0x31c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 808e 	bne.w	80039f0 <main+0x1d4>
			HAL_GPIO_WritePin(GPIOA, SENZOR_LED_Pin, SET);
 80038d4:	2201      	movs	r2, #1
 80038d6:	2102      	movs	r1, #2
 80038d8:	4896      	ldr	r0, [pc, #600]	; (8003b34 <main+0x318>)
 80038da:	f7fe f84e 	bl	800197a <HAL_GPIO_WritePin>
			//ocitava vrijednost senzora te ako ima predmeta na traci krene raditi

			sConfig.Channel = ADC_CHANNEL_0;
 80038de:	4b98      	ldr	r3, [pc, #608]	; (8003b40 <main+0x324>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80038e4:	4996      	ldr	r1, [pc, #600]	; (8003b40 <main+0x324>)
 80038e6:	4897      	ldr	r0, [pc, #604]	; (8003b44 <main+0x328>)
 80038e8:	f7fd fbca 	bl	8001080 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 80038ec:	4895      	ldr	r0, [pc, #596]	; (8003b44 <main+0x328>)
 80038ee:	f7fd fa13 	bl	8000d18 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80038f2:	2164      	movs	r1, #100	; 0x64
 80038f4:	4893      	ldr	r0, [pc, #588]	; (8003b44 <main+0x328>)
 80038f6:	f7fd fabd 	bl	8000e74 <HAL_ADC_PollForConversion>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <main+0xf0>
				val1 = HAL_ADC_GetValue(&hadc1);
 8003900:	4890      	ldr	r0, [pc, #576]	; (8003b44 <main+0x328>)
 8003902:	f7fd fbb1 	bl	8001068 <HAL_ADC_GetValue>
 8003906:	4602      	mov	r2, r0
 8003908:	4b8f      	ldr	r3, [pc, #572]	; (8003b48 <main+0x32c>)
 800390a:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(100);
 800390c:	2064      	movs	r0, #100	; 0x64
 800390e:	f7fd f909 	bl	8000b24 <HAL_Delay>
			sConfig.Channel = ADC_CHANNEL_9;
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <main+0x324>)
 8003914:	2209      	movs	r2, #9
 8003916:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003918:	4989      	ldr	r1, [pc, #548]	; (8003b40 <main+0x324>)
 800391a:	488a      	ldr	r0, [pc, #552]	; (8003b44 <main+0x328>)
 800391c:	f7fd fbb0 	bl	8001080 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 8003920:	4888      	ldr	r0, [pc, #544]	; (8003b44 <main+0x328>)
 8003922:	f7fd f9f9 	bl	8000d18 <HAL_ADC_Start>
			HAL_Delay(100);
 8003926:	2064      	movs	r0, #100	; 0x64
 8003928:	f7fd f8fc 	bl	8000b24 <HAL_Delay>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800392c:	2164      	movs	r1, #100	; 0x64
 800392e:	4885      	ldr	r0, [pc, #532]	; (8003b44 <main+0x328>)
 8003930:	f7fd faa0 	bl	8000e74 <HAL_ADC_PollForConversion>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <main+0x12a>
				val2 = HAL_ADC_GetValue(&hadc1);
 800393a:	4882      	ldr	r0, [pc, #520]	; (8003b44 <main+0x328>)
 800393c:	f7fd fb94 	bl	8001068 <HAL_ADC_GetValue>
 8003940:	4602      	mov	r2, r0
 8003942:	4b82      	ldr	r3, [pc, #520]	; (8003b4c <main+0x330>)
 8003944:	601a      	str	r2, [r3, #0]
			}
			if ((val1 > PRVI_SENZOR) || (val2 > DRUGI_SENZOR)) {
 8003946:	4b80      	ldr	r3, [pc, #512]	; (8003b48 <main+0x32c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800394e:	4293      	cmp	r3, r2
 8003950:	d805      	bhi.n	800395e <main+0x142>
 8003952:	4b7e      	ldr	r3, [pc, #504]	; (8003b4c <main+0x330>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f640 3254 	movw	r2, #2900	; 0xb54
 800395a:	4293      	cmp	r3, r2
 800395c:	d9a3      	bls.n	80038a6 <main+0x8a>
				HAL_GPIO_WritePin(GPIOA, TRAKA_Pin_Pin, SET);
 800395e:	2201      	movs	r2, #1
 8003960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003964:	4873      	ldr	r0, [pc, #460]	; (8003b34 <main+0x318>)
 8003966:	f7fe f808 	bl	800197a <HAL_GPIO_WritePin>
				HAL_Delay(4000);
 800396a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800396e:	f7fd f8d9 	bl	8000b24 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, TRAKA_Pin_Pin, RESET);
 8003972:	2200      	movs	r2, #0
 8003974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003978:	486e      	ldr	r0, [pc, #440]	; (8003b34 <main+0x318>)
 800397a:	f7fd fffe 	bl	800197a <HAL_GPIO_WritePin>
				Pomakni_na_vagu();
 800397e:	f000 feb7 	bl	80046f0 <Pomakni_na_vagu>

				//vaganje i slanje signala rpi za slikanje
				Predmet.masa = HX711_get_units(10);
 8003982:	200a      	movs	r0, #10
 8003984:	f000 fdbc 	bl	8004500 <HX711_get_units>
 8003988:	4603      	mov	r3, r0
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd f822 	bl	80009d4 <__aeabi_f2iz>
 8003990:	4602      	mov	r2, r0
 8003992:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <main+0x334>)
 8003994:	605a      	str	r2, [r3, #4]
				printf("%d\n", Predmet.masa);
 8003996:	4b6e      	ldr	r3, [pc, #440]	; (8003b50 <main+0x334>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4619      	mov	r1, r3
 800399c:	486d      	ldr	r0, [pc, #436]	; (8003b54 <main+0x338>)
 800399e:	f001 faef 	bl	8004f80 <iprintf>
				HAL_Delay(500);
 80039a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039a6:	f7fd f8bd 	bl	8000b24 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RPI_GPIO_Pin, SET);
 80039aa:	2201      	movs	r2, #1
 80039ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039b0:	4860      	ldr	r0, [pc, #384]	; (8003b34 <main+0x318>)
 80039b2:	f7fd ffe2 	bl	800197a <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80039b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ba:	f7fd f8b3 	bl	8000b24 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RPI_GPIO_Pin, RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039c4:	485b      	ldr	r0, [pc, #364]	; (8003b34 <main+0x318>)
 80039c6:	f7fd ffd8 	bl	800197a <HAL_GPIO_WritePin>
				while (det_obj_buff[2] != '#')
 80039ca:	bf00      	nop
 80039cc:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <main+0x33c>)
 80039ce:	789b      	ldrb	r3, [r3, #2]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b23      	cmp	r3, #35	; 0x23
 80039d4:	d1fa      	bne.n	80039cc <main+0x1b0>
					;
				Parse_predmet();
 80039d6:	f000 fb81 	bl	80040dc <Parse_predmet>
				Analiza_predmeta();
 80039da:	f000 fc39 	bl	8004250 <Analiza_predmeta>
				int sprem = Odabir_spremnika();
 80039de:	f000 fcc3 	bl	8004368 <Odabir_spremnika>
 80039e2:	6078      	str	r0, [r7, #4]
				Postavi_spremnik(sprem);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fed3 	bl	8004790 <Postavi_spremnik>
				Makni_sa_vage();
 80039ea:	f000 fe95 	bl	8004718 <Makni_sa_vage>
 80039ee:	e75a      	b.n	80038a6 <main+0x8a>
			}
		}
		//----------------------------ANALIZA PREDMETA----------------------
		else if (sys_flag == 2) {
 80039f0:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <main+0x31c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	f47f af55 	bne.w	80038a6 <main+0x8a>
			//printf("\tUnutar sys_flag==2 if uvjeta\n\n");
			HAL_GPIO_WritePin(GPIOA, SENZOR_LED_Pin, SET);
 80039fc:	2201      	movs	r2, #1
 80039fe:	2102      	movs	r1, #2
 8003a00:	484c      	ldr	r0, [pc, #304]	; (8003b34 <main+0x318>)
 8003a02:	f7fd ffba 	bl	800197a <HAL_GPIO_WritePin>
			sConfig.Channel = ADC_CHANNEL_0;
 8003a06:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <main+0x324>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003a0c:	494c      	ldr	r1, [pc, #304]	; (8003b40 <main+0x324>)
 8003a0e:	484d      	ldr	r0, [pc, #308]	; (8003b44 <main+0x328>)
 8003a10:	f7fd fb36 	bl	8001080 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 8003a14:	484b      	ldr	r0, [pc, #300]	; (8003b44 <main+0x328>)
 8003a16:	f7fd f97f 	bl	8000d18 <HAL_ADC_Start>
			HAL_Delay(100);
 8003a1a:	2064      	movs	r0, #100	; 0x64
 8003a1c:	f7fd f882 	bl	8000b24 <HAL_Delay>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8003a20:	2164      	movs	r1, #100	; 0x64
 8003a22:	4848      	ldr	r0, [pc, #288]	; (8003b44 <main+0x328>)
 8003a24:	f7fd fa26 	bl	8000e74 <HAL_ADC_PollForConversion>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <main+0x21e>
				val1 = HAL_ADC_GetValue(&hadc1);
 8003a2e:	4845      	ldr	r0, [pc, #276]	; (8003b44 <main+0x328>)
 8003a30:	f7fd fb1a 	bl	8001068 <HAL_ADC_GetValue>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <main+0x32c>)
 8003a38:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(100);
 8003a3a:	2064      	movs	r0, #100	; 0x64
 8003a3c:	f7fd f872 	bl	8000b24 <HAL_Delay>
			sConfig.Channel = ADC_CHANNEL_9;
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <main+0x324>)
 8003a42:	2209      	movs	r2, #9
 8003a44:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003a46:	493e      	ldr	r1, [pc, #248]	; (8003b40 <main+0x324>)
 8003a48:	483e      	ldr	r0, [pc, #248]	; (8003b44 <main+0x328>)
 8003a4a:	f7fd fb19 	bl	8001080 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 8003a4e:	483d      	ldr	r0, [pc, #244]	; (8003b44 <main+0x328>)
 8003a50:	f7fd f962 	bl	8000d18 <HAL_ADC_Start>
			HAL_Delay(100);
 8003a54:	2064      	movs	r0, #100	; 0x64
 8003a56:	f7fd f865 	bl	8000b24 <HAL_Delay>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	4839      	ldr	r0, [pc, #228]	; (8003b44 <main+0x328>)
 8003a5e:	f7fd fa09 	bl	8000e74 <HAL_ADC_PollForConversion>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <main+0x258>
				val2 = HAL_ADC_GetValue(&hadc1);
 8003a68:	4836      	ldr	r0, [pc, #216]	; (8003b44 <main+0x328>)
 8003a6a:	f7fd fafd 	bl	8001068 <HAL_ADC_GetValue>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <main+0x330>)
 8003a72:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(100);
 8003a74:	2064      	movs	r0, #100	; 0x64
 8003a76:	f7fd f855 	bl	8000b24 <HAL_Delay>
			if ((val1 > PRVI_SENZOR) || (val2 > DRUGI_SENZOR)) {
 8003a7a:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <main+0x32c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d806      	bhi.n	8003a94 <main+0x278>
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <main+0x330>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f640 3254 	movw	r2, #2900	; 0xb54
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f67f af09 	bls.w	80038a6 <main+0x8a>
				HAL_GPIO_WritePin(GPIOA, TRAKA_Pin_Pin, SET);
 8003a94:	2201      	movs	r2, #1
 8003a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a9a:	4826      	ldr	r0, [pc, #152]	; (8003b34 <main+0x318>)
 8003a9c:	f7fd ff6d 	bl	800197a <HAL_GPIO_WritePin>
				HAL_Delay(4000);
 8003aa0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003aa4:	f7fd f83e 	bl	8000b24 <HAL_Delay>
				Pomakni_na_vagu();
 8003aa8:	f000 fe22 	bl	80046f0 <Pomakni_na_vagu>
				HAL_GPIO_WritePin(GPIOA, TRAKA_Pin_Pin, RESET);
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ab2:	4820      	ldr	r0, [pc, #128]	; (8003b34 <main+0x318>)
 8003ab4:	f7fd ff61 	bl	800197a <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8003ab8:	20c8      	movs	r0, #200	; 0xc8
 8003aba:	f7fd f833 	bl	8000b24 <HAL_Delay>

				//vaganje i slanje signala rpi za slikanje
				Predmet.masa = HX711_get_units(10);
 8003abe:	200a      	movs	r0, #10
 8003ac0:	f000 fd1e 	bl	8004500 <HX711_get_units>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc ff84 	bl	80009d4 <__aeabi_f2iz>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <main+0x334>)
 8003ad0:	605a      	str	r2, [r3, #4]
				printf("%d\n", Predmet.masa);
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <main+0x334>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	481e      	ldr	r0, [pc, #120]	; (8003b54 <main+0x338>)
 8003ada:	f001 fa51 	bl	8004f80 <iprintf>
				HAL_Delay(500);
 8003ade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ae2:	f7fd f81f 	bl	8000b24 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RPI_GPIO_Pin, SET);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aec:	4811      	ldr	r0, [pc, #68]	; (8003b34 <main+0x318>)
 8003aee:	f7fd ff44 	bl	800197a <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8003af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003af6:	f7fd f815 	bl	8000b24 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RPI_GPIO_Pin, RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b00:	480c      	ldr	r0, [pc, #48]	; (8003b34 <main+0x318>)
 8003b02:	f7fd ff3a 	bl	800197a <HAL_GPIO_WritePin>
				while (det_obj_buff[2] != '#')
 8003b06:	bf00      	nop
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <main+0x33c>)
 8003b0a:	789b      	ldrb	r3, [r3, #2]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b23      	cmp	r3, #35	; 0x23
 8003b10:	d1fa      	bne.n	8003b08 <main+0x2ec>
					;
				Postavi_spremnik(1);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f000 fe3c 	bl	8004790 <Postavi_spremnik>
				//izbrise vrijednost iz spremnika za drugi predmet kada dodje
				det_obj_buff[2] = 0;
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <main+0x33c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	709a      	strb	r2, [r3, #2]
				Makni_sa_vage();
 8003b1e:	f000 fdfb 	bl	8004718 <Makni_sa_vage>
		if (sys_flag_changed) {
 8003b22:	e6c0      	b.n	80038a6 <main+0x8a>
 8003b24:	200001dc 	.word	0x200001dc
 8003b28:	20000008 	.word	0x20000008
 8003b2c:	20000178 	.word	0x20000178
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40010800 	.word	0x40010800
 8003b38:	20000094 	.word	0x20000094
 8003b3c:	20000095 	.word	0x20000095
 8003b40:	20000098 	.word	0x20000098
 8003b44:	20000144 	.word	0x20000144
 8003b48:	2000021c 	.word	0x2000021c
 8003b4c:	20000174 	.word	0x20000174
 8003b50:	2000012c 	.word	0x2000012c
 8003b54:	08005dc8 	.word	0x08005dc8
 8003b58:	200000c0 	.word	0x200000c0

08003b5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b094      	sub	sp, #80	; 0x50
 8003b60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b66:	2228      	movs	r2, #40	; 0x28
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f9ff 	bl	8004f6e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b90:	2301      	movs	r3, #1
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b94:	2310      	movs	r3, #16
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd ff03 	bl	80019ac <HAL_RCC_OscConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <SystemClock_Config+0x54>
		Error_Handler();
 8003bac:	f000 fef8 	bl	80049a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003bb0:	230f      	movs	r3, #15
 8003bb2:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe f96e 	bl	8001eac <HAL_RCC_ClockConfig>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <SystemClock_Config+0x7e>
		Error_Handler();
 8003bd6:	f000 fee3 	bl	80049a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fafd 	bl	80021e4 <HAL_RCCEx_PeriphCLKConfig>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <SystemClock_Config+0x98>
		Error_Handler();
 8003bf0:	f000 fed6 	bl	80049a0 <Error_Handler>
	}
}
 8003bf4:	bf00      	nop
 8003bf6:	3750      	adds	r7, #80	; 0x50
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8003c00:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <MX_ADC1_Init+0xac>)
 8003c04:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003c06:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c0c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c1a:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c1c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003c20:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 3;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003c2e:	481d      	ldr	r0, [pc, #116]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c30:	f7fc ff9a 	bl	8000b68 <HAL_ADC_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_ADC1_Init+0x42>
		Error_Handler();
 8003c3a:	f000 feb1 	bl	80049a0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003c4a:	4b18      	ldr	r3, [pc, #96]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c50:	4916      	ldr	r1, [pc, #88]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c52:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c54:	f7fd fa14 	bl	8001080 <HAL_ADC_ConfigChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_ADC1_Init+0x66>
		Error_Handler();
 8003c5e:	f000 fe9f 	bl	80049a0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c64:	2208      	movs	r2, #8
 8003c66:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c6e:	490f      	ldr	r1, [pc, #60]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c70:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c72:	f7fd fa05 	bl	8001080 <HAL_ADC_ConfigChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_ADC1_Init+0x84>
		Error_Handler();
 8003c7c:	f000 fe90 	bl	80049a0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c82:	2209      	movs	r2, #9
 8003c84:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c88:	2203      	movs	r2, #3
 8003c8a:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c8c:	4907      	ldr	r1, [pc, #28]	; (8003cac <MX_ADC1_Init+0xb0>)
 8003c8e:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <MX_ADC1_Init+0xa8>)
 8003c90:	f7fd f9f6 	bl	8001080 <HAL_ADC_ConfigChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_ADC1_Init+0xa2>
		Error_Handler();
 8003c9a:	f000 fe81 	bl	80049a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000144 	.word	0x20000144
 8003ca8:	40012400 	.word	0x40012400
 8003cac:	20000098 	.word	0x20000098

08003cb0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b096      	sub	sp, #88	; 0x58
 8003cb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f940 	bl	8004f6e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003cee:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003cf0:	4a44      	ldr	r2, [pc, #272]	; (8003e04 <MX_TIM1_Init+0x154>)
 8003cf2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 20;
 8003cf4:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003cf6:	2214      	movs	r2, #20
 8003cf8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cfa:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7656;
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d02:	f641 52e8 	movw	r2, #7656	; 0x1de8
 8003d06:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d08:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003d0e:	4b3c      	ldr	r3, [pc, #240]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003d1a:	4839      	ldr	r0, [pc, #228]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d1c:	f7fe fbd4 	bl	80024c8 <HAL_TIM_Base_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8003d26:	f000 fe3b 	bl	80049a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d34:	4619      	mov	r1, r3
 8003d36:	4832      	ldr	r0, [pc, #200]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d38:	f7fe fd40 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM1_Init+0x96>
		Error_Handler();
 8003d42:	f000 fe2d 	bl	80049a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003d46:	482e      	ldr	r0, [pc, #184]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d48:	f7fe fc0c 	bl	8002564 <HAL_TIM_PWM_Init>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8003d52:	f000 fe25 	bl	80049a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d62:	4619      	mov	r1, r3
 8003d64:	4826      	ldr	r0, [pc, #152]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d66:	f7ff f885 	bl	8002e74 <HAL_TIMEx_MasterConfigSynchronization>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8003d70:	f000 fe16 	bl	80049a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d74:	2360      	movs	r3, #96	; 0x60
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d80:	2300      	movs	r3, #0
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8003d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d94:	2204      	movs	r2, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4819      	ldr	r0, [pc, #100]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003d9a:	f7fe fc49 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8003da4:	f000 fdfc 	bl	80049a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8003da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dac:	2208      	movs	r2, #8
 8003dae:	4619      	mov	r1, r3
 8003db0:	4813      	ldr	r0, [pc, #76]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003db2:	f7fe fc3d 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8003dbc:	f000 fdf0 	bl	80049a0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4807      	ldr	r0, [pc, #28]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003de4:	f7ff f88a 	bl	8002efc <HAL_TIMEx_ConfigBreakDeadTime>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8003dee:	f000 fdd7 	bl	80049a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003df2:	4803      	ldr	r0, [pc, #12]	; (8003e00 <MX_TIM1_Init+0x150>)
 8003df4:	f000 fe7e 	bl	8004af4 <HAL_TIM_MspPostInit>

}
 8003df8:	bf00      	nop
 8003dfa:	3758      	adds	r7, #88	; 0x58
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000178 	.word	0x20000178
 8003e04:	40012c00 	.word	0x40012c00

08003e08 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <MX_USART2_UART_Init+0x50>)
 8003e10:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e18:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e2e:	220c      	movs	r2, #12
 8003e30:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003e3e:	4805      	ldr	r0, [pc, #20]	; (8003e54 <MX_USART2_UART_Init+0x4c>)
 8003e40:	f7ff f8ad 	bl	8002f9e <HAL_UART_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003e4a:	f000 fda9 	bl	80049a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200001dc 	.word	0x200001dc
 8003e58:	40004400 	.word	0x40004400

08003e5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003e62:	f107 0310 	add.w	r3, r7, #16
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003e70:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f043 0310 	orr.w	r3, r3, #16
 8003e7a:	6193      	str	r3, [r2, #24]
 8003e7c:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003e88:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003e8a:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f043 0304 	orr.w	r3, r3, #4
 8003e92:	6193      	str	r3, [r2, #24]
 8003e94:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6193      	str	r3, [r2, #24]
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <MX_GPIO_Init+0xf0>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ebe:	4824      	ldr	r0, [pc, #144]	; (8003f50 <MX_GPIO_Init+0xf4>)
 8003ec0:	f7fd fd5b 	bl	800197a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f641 11d2 	movw	r1, #6610	; 0x19d2
 8003eca:	4822      	ldr	r0, [pc, #136]	; (8003f54 <MX_GPIO_Init+0xf8>)
 8003ecc:	f7fd fd55 	bl	800197a <HAL_GPIO_WritePin>
			SENZOR_LED_Pin | VAGA_SCK_Pin | STEPPER_DIR_Pin | STEPPER_STEP_Pin
					| TRAKA_Pin_Pin | RPI_GPIO_Pin | STEPPER_EN_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8003ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f107 0310 	add.w	r3, r7, #16
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4819      	ldr	r0, [pc, #100]	; (8003f50 <MX_GPIO_Init+0xf4>)
 8003eea:	f7fd fbd5 	bl	8001698 <HAL_GPIO_Init>

	/*Configure GPIO pins : SENZOR_LED_Pin VAGA_SCK_Pin STEPPER_DIR_Pin STEPPER_STEP_Pin
	 TRAKA_Pin_Pin RPI_GPIO_Pin STEPPER_EN_Pin */
	GPIO_InitStruct.Pin = SENZOR_LED_Pin | VAGA_SCK_Pin | STEPPER_DIR_Pin
 8003eee:	f641 03d2 	movw	r3, #6354	; 0x18d2
 8003ef2:	613b      	str	r3, [r7, #16]
			| STEPPER_STEP_Pin | RPI_GPIO_Pin | STEPPER_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efc:	2302      	movs	r3, #2
 8003efe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	4619      	mov	r1, r3
 8003f06:	4813      	ldr	r0, [pc, #76]	; (8003f54 <MX_GPIO_Init+0xf8>)
 8003f08:	f7fd fbc6 	bl	8001698 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin =  TRAKA_Pin_Pin;
 8003f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f10:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f12:	2301      	movs	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f16:	2302      	movs	r3, #2
 8003f18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1e:	f107 0310 	add.w	r3, r7, #16
 8003f22:	4619      	mov	r1, r3
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <MX_GPIO_Init+0xf8>)
 8003f26:	f7fd fbb7 	bl	8001698 <HAL_GPIO_Init>


	/*Configure GPIO pin : VAGA_DT_Pin */
	GPIO_InitStruct.Pin = VAGA_DT_Pin;
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(VAGA_DT_GPIO_Port, &GPIO_InitStruct);
 8003f36:	f107 0310 	add.w	r3, r7, #16
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4805      	ldr	r0, [pc, #20]	; (8003f54 <MX_GPIO_Init+0xf8>)
 8003f3e:	f7fd fbab 	bl	8001698 <HAL_GPIO_Init>

}
 8003f42:	bf00      	nop
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40011000 	.word	0x40011000
 8003f54:	40010800 	.word	0x40010800

08003f58 <Parse_spremnik>:

/* USER CODE BEGIN 4 */

//funkcija za parsiranje podataka za spremnike
void Parse_spremnik() {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0

	Spremnik[0].broj_omogucenih=0;
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <Parse_spremnik+0x17c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
	Spremnik[1].broj_omogucenih=0;
 8003f64:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <Parse_spremnik+0x17c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c
	Spremnik[2].broj_omogucenih=0;
 8003f6a:	4b5a      	ldr	r3, [pc, #360]	; (80040d4 <Parse_spremnik+0x17c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44

	for (int j = 0; j < 3; j++) {
 8003f70:	2300      	movs	r3, #0
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	e0a6      	b.n	80040c4 <Parse_spremnik+0x16c>
		Spremnik[j].oblik = msg_protocol[(10 * j + 1)];
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	3301      	adds	r3, #1
 8003f82:	4a55      	ldr	r2, [pc, #340]	; (80040d8 <Parse_spremnik+0x180>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	b2d8      	uxtb	r0, r3
 8003f88:	4952      	ldr	r1, [pc, #328]	; (80040d4 <Parse_spremnik+0x17c>)
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	4602      	mov	r2, r0
 8003f98:	701a      	strb	r2, [r3, #0]
		Spremnik[j].boja = msg_protocol[(10 * j + 2)];
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	4a4c      	ldr	r2, [pc, #304]	; (80040d8 <Parse_spremnik+0x180>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	b2d8      	uxtb	r0, r3
 8003fac:	4949      	ldr	r1, [pc, #292]	; (80040d4 <Parse_spremnik+0x17c>)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	440b      	add	r3, r1
 8003fba:	3301      	adds	r3, #1
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	701a      	strb	r2, [r3, #0]
		Spremnik[j].min_masa = CharToInt3((10 * j + 3), msg_protocol);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	3303      	adds	r3, #3
 8003fcc:	4942      	ldr	r1, [pc, #264]	; (80040d8 <Parse_spremnik+0x180>)
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f89c 	bl	800410c <CharToInt3>
 8003fd4:	493f      	ldr	r1, [pc, #252]	; (80040d4 <Parse_spremnik+0x17c>)
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	6018      	str	r0, [r3, #0]
		Spremnik[j].max_masa = CharToInt4((10 * j + 6), msg_protocol);
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	4939      	ldr	r1, [pc, #228]	; (80040d8 <Parse_spremnik+0x180>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f8d1 	bl	800419c <CharToInt4>
 8003ffa:	4936      	ldr	r1, [pc, #216]	; (80040d4 <Parse_spremnik+0x17c>)
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	330c      	adds	r3, #12
 800400a:	6018      	str	r0, [r3, #0]
		if (Spremnik[j].oblik != '0') {
 800400c:	4931      	ldr	r1, [pc, #196]	; (80040d4 <Parse_spremnik+0x17c>)
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b30      	cmp	r3, #48	; 0x30
 800401e:	d012      	beq.n	8004046 <Parse_spremnik+0xee>
			Spremnik[j].broj_omogucenih++;
 8004020:	492c      	ldr	r1, [pc, #176]	; (80040d4 <Parse_spremnik+0x17c>)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3314      	adds	r3, #20
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1c59      	adds	r1, r3, #1
 8004034:	4827      	ldr	r0, [pc, #156]	; (80040d4 <Parse_spremnik+0x17c>)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4403      	add	r3, r0
 8004042:	3314      	adds	r3, #20
 8004044:	6019      	str	r1, [r3, #0]
		}
		if (Spremnik[j].boja != '0') {
 8004046:	4923      	ldr	r1, [pc, #140]	; (80040d4 <Parse_spremnik+0x17c>)
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	3301      	adds	r3, #1
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b30      	cmp	r3, #48	; 0x30
 800405a:	d012      	beq.n	8004082 <Parse_spremnik+0x12a>
			Spremnik[j].broj_omogucenih++;
 800405c:	491d      	ldr	r1, [pc, #116]	; (80040d4 <Parse_spremnik+0x17c>)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	3314      	adds	r3, #20
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1c59      	adds	r1, r3, #1
 8004070:	4818      	ldr	r0, [pc, #96]	; (80040d4 <Parse_spremnik+0x17c>)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4403      	add	r3, r0
 800407e:	3314      	adds	r3, #20
 8004080:	6019      	str	r1, [r3, #0]
		}
		if (Spremnik[j].max_masa != 0) {
 8004082:	4914      	ldr	r1, [pc, #80]	; (80040d4 <Parse_spremnik+0x17c>)
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	330c      	adds	r3, #12
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <Parse_spremnik+0x166>
			Spremnik[j].broj_omogucenih++;
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <Parse_spremnik+0x17c>)
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	3314      	adds	r3, #20
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	1c59      	adds	r1, r3, #1
 80040ac:	4809      	ldr	r0, [pc, #36]	; (80040d4 <Parse_spremnik+0x17c>)
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4403      	add	r3, r0
 80040ba:	3314      	adds	r3, #20
 80040bc:	6019      	str	r1, [r3, #0]
	for (int j = 0; j < 3; j++) {
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3301      	adds	r3, #1
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	f77f af55 	ble.w	8003f76 <Parse_spremnik+0x1e>
		}
	}

}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200000c4 	.word	0x200000c4
 80040d8:	200001b8 	.word	0x200001b8

080040dc <Parse_predmet>:

//funkcija za parsiranje podataka o slikanom predmetu
void Parse_predmet() {
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
	Predmet.boja = det_obj_buff[0];
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <Parse_predmet+0x28>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <Parse_predmet+0x2c>)
 80040e8:	705a      	strb	r2, [r3, #1]
	Predmet.oblik = det_obj_buff[1];
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <Parse_predmet+0x28>)
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <Parse_predmet+0x2c>)
 80040f2:	701a      	strb	r2, [r3, #0]
	det_obj_buff[2] = 0;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <Parse_predmet+0x28>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	709a      	strb	r2, [r3, #2]

}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	200000c0 	.word	0x200000c0
 8004108:	2000012c 	.word	0x2000012c

0800410c <CharToInt3>:
int CharToInt3(int n, uint8_t* Polje) {
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	int broj = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; i++) {
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	e034      	b.n	800418a <CharToInt3+0x7e>
		if (i == 0 && Polje[n] != '0') {
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <CharToInt3+0x3a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b30      	cmp	r3, #48	; 0x30
 8004130:	d009      	beq.n	8004146 <CharToInt3+0x3a>
			broj = (Polje[n] - 48) * 100;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	4413      	add	r3, r2
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	3b30      	subs	r3, #48	; 0x30
 800413c:	2264      	movs	r2, #100	; 0x64
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e01e      	b.n	8004184 <CharToInt3+0x78>
		} else if (i == 1) {
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10f      	bne.n	800416c <CharToInt3+0x60>
			broj += (Polje[n + 1] - 48) * 10;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3301      	adds	r3, #1
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e00b      	b.n	8004184 <CharToInt3+0x78>
		} else if (i == 2) {
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d108      	bne.n	8004184 <CharToInt3+0x78>
			broj += (Polje[n + 2] - 48);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3302      	adds	r3, #2
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	4413      	add	r3, r2
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	3b30      	subs	r3, #48	; 0x30
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; i++) {
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	3301      	adds	r3, #1
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b02      	cmp	r3, #2
 800418e:	ddc7      	ble.n	8004120 <CharToInt3+0x14>
		}
	}
	return broj;
 8004190:	68fb      	ldr	r3, [r7, #12]

}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <CharToInt4>:
int CharToInt4(int n, uint8_t* Polje) {
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	int broj = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++) {
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	e045      	b.n	800423c <CharToInt4+0xa0>
		if (i == 0 && Polje[n] != '0') {
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d110      	bne.n	80041d8 <CharToInt4+0x3c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	4413      	add	r3, r2
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b30      	cmp	r3, #48	; 0x30
 80041c0:	d00a      	beq.n	80041d8 <CharToInt4+0x3c>
			broj = (Polje[n] - 48) * 1000;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	3b30      	subs	r3, #48	; 0x30
 80041cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e02e      	b.n	8004236 <CharToInt4+0x9a>
		} else if (i == 1) {
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10c      	bne.n	80041f8 <CharToInt4+0x5c>
			broj += (Polje[n + 1] - 48) * 100;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3301      	adds	r3, #1
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	3b30      	subs	r3, #48	; 0x30
 80041ea:	2264      	movs	r2, #100	; 0x64
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e01e      	b.n	8004236 <CharToInt4+0x9a>
		} else if (i == 2) {
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d10f      	bne.n	800421e <CharToInt4+0x82>
			broj += (Polje[n + 2] - 48) * 10;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3302      	adds	r3, #2
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	461a      	mov	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e00b      	b.n	8004236 <CharToInt4+0x9a>
		} else if (i == 3) {
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d108      	bne.n	8004236 <CharToInt4+0x9a>
			broj += (Polje[n + 3] - 48);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3303      	adds	r3, #3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	3b30      	subs	r3, #48	; 0x30
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++) {
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3301      	adds	r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b03      	cmp	r3, #3
 8004240:	ddb6      	ble.n	80041b0 <CharToInt4+0x14>
		}
	}
	return broj;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
	...

08004250 <Analiza_predmeta>:

//funkcija za analizu kriteriaj za svaki spremnik i trenutni predmet-----------------------------------
void Analiza_predmeta(void) {
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
	int i = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
	Spremnik[0].broj_poklapanja = 0;
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <Analiza_predmeta+0x110>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
	Spremnik[1].broj_poklapanja = 0;
 8004260:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <Analiza_predmeta+0x110>)
 8004262:	2200      	movs	r2, #0
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
	Spremnik[2].broj_poklapanja = 0;
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <Analiza_predmeta+0x110>)
 8004268:	2200      	movs	r2, #0
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
	for (i = 0; i < 3; i++) {
 800426c:	2300      	movs	r3, #0
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	e06e      	b.n	8004350 <Analiza_predmeta+0x100>
		if (Spremnik[i].boja == Predmet.boja) {
 8004272:	493b      	ldr	r1, [pc, #236]	; (8004360 <Analiza_predmeta+0x110>)
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3301      	adds	r3, #1
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	4b37      	ldr	r3, [pc, #220]	; (8004364 <Analiza_predmeta+0x114>)
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	429a      	cmp	r2, r3
 800428a:	d112      	bne.n	80042b2 <Analiza_predmeta+0x62>
			Spremnik[i].broj_poklapanja++;
 800428c:	4934      	ldr	r1, [pc, #208]	; (8004360 <Analiza_predmeta+0x110>)
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	3310      	adds	r3, #16
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	1c59      	adds	r1, r3, #1
 80042a0:	482f      	ldr	r0, [pc, #188]	; (8004360 <Analiza_predmeta+0x110>)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4403      	add	r3, r0
 80042ae:	3310      	adds	r3, #16
 80042b0:	6019      	str	r1, [r3, #0]
		}
		if (Spremnik[i].oblik == Predmet.oblik) {
 80042b2:	492b      	ldr	r1, [pc, #172]	; (8004360 <Analiza_predmeta+0x110>)
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	440b      	add	r3, r1
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <Analiza_predmeta+0x114>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d112      	bne.n	80042f0 <Analiza_predmeta+0xa0>
			Spremnik[i].broj_poklapanja++;
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <Analiza_predmeta+0x110>)
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3310      	adds	r3, #16
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	1c59      	adds	r1, r3, #1
 80042de:	4820      	ldr	r0, [pc, #128]	; (8004360 <Analiza_predmeta+0x110>)
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4403      	add	r3, r0
 80042ec:	3310      	adds	r3, #16
 80042ee:	6019      	str	r1, [r3, #0]
		}
		if (Spremnik[i].max_masa >= Predmet.masa
 80042f0:	491b      	ldr	r1, [pc, #108]	; (8004360 <Analiza_predmeta+0x110>)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	440b      	add	r3, r1
 80042fe:	330c      	adds	r3, #12
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <Analiza_predmeta+0x114>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	db1f      	blt.n	800434a <Analiza_predmeta+0xfa>
				&& Predmet.masa >= Spremnik[i].min_masa) {
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <Analiza_predmeta+0x114>)
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	4814      	ldr	r0, [pc, #80]	; (8004360 <Analiza_predmeta+0x110>)
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4403      	add	r3, r0
 800431c:	3308      	adds	r3, #8
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4299      	cmp	r1, r3
 8004322:	db12      	blt.n	800434a <Analiza_predmeta+0xfa>
			Spremnik[i].broj_poklapanja++;
 8004324:	490e      	ldr	r1, [pc, #56]	; (8004360 <Analiza_predmeta+0x110>)
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	440b      	add	r3, r1
 8004332:	3310      	adds	r3, #16
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1c59      	adds	r1, r3, #1
 8004338:	4809      	ldr	r0, [pc, #36]	; (8004360 <Analiza_predmeta+0x110>)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4403      	add	r3, r0
 8004346:	3310      	adds	r3, #16
 8004348:	6019      	str	r1, [r3, #0]
	for (i = 0; i < 3; i++) {
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3301      	adds	r3, #1
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	dd8d      	ble.n	8004272 <Analiza_predmeta+0x22>
		}
	}
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	200000c4 	.word	0x200000c4
 8004364:	2000012c 	.word	0x2000012c

08004368 <Odabir_spremnika>:

//funkcija za odabir spremnika------------------ODABIR SPREMNIKA----------------------------------------
int Odabir_spremnika() {
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
	int max_poklapanja = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
	int index = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	e02f      	b.n	80043dc <Odabir_spremnika+0x74>
		if (Spremnik[i].broj_omogucenih <= Spremnik[i].broj_poklapanja)
 800437c:	491e      	ldr	r1, [pc, #120]	; (80043f8 <Odabir_spremnika+0x90>)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	3314      	adds	r3, #20
 800438c:	6819      	ldr	r1, [r3, #0]
 800438e:	481a      	ldr	r0, [pc, #104]	; (80043f8 <Odabir_spremnika+0x90>)
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4403      	add	r3, r0
 800439c:	3310      	adds	r3, #16
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4299      	cmp	r1, r3
 80043a2:	dc18      	bgt.n	80043d6 <Odabir_spremnika+0x6e>
			if (Spremnik[i].broj_poklapanja > max_poklapanja) {
 80043a4:	4914      	ldr	r1, [pc, #80]	; (80043f8 <Odabir_spremnika+0x90>)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	440b      	add	r3, r1
 80043b2:	3310      	adds	r3, #16
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dd0c      	ble.n	80043d6 <Odabir_spremnika+0x6e>
				max_poklapanja = Spremnik[i].broj_poklapanja;
 80043bc:	490e      	ldr	r1, [pc, #56]	; (80043f8 <Odabir_spremnika+0x90>)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3310      	adds	r3, #16
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
				index = i + 1;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3301      	adds	r3, #1
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	ddcc      	ble.n	800437c <Odabir_spremnika+0x14>
			}
	}
	if (index == 0) {
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <Odabir_spremnika+0x84>
		index = 4;
 80043e8:	2304      	movs	r3, #4
 80043ea:	60bb      	str	r3, [r7, #8]
	}

	return index;
 80043ec:	68bb      	ldr	r3, [r7, #8]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	200000c4 	.word	0x200000c4

080043fc <HX711_read>:

//FUNKCIJE ZA VAGU----------------------------------VAGA------------------------------------------
int HX711_read(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
	int buffer;
	buffer = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]

	while (HAL_GPIO_ReadPin(GPIOA, VAGA_DT_Pin) == 1)
 8004406:	bf00      	nop
 8004408:	2120      	movs	r1, #32
 800440a:	4821      	ldr	r0, [pc, #132]	; (8004490 <HX711_read+0x94>)
 800440c:	f7fd fa9e 	bl	800194c <HAL_GPIO_ReadPin>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d0f8      	beq.n	8004408 <HX711_read+0xc>
		;

	for (uint8_t i = 0; i < 24; i++) {
 8004416:	2300      	movs	r3, #0
 8004418:	72fb      	strb	r3, [r7, #11]
 800441a:	e019      	b.n	8004450 <HX711_read+0x54>
		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_SET);
 800441c:	2201      	movs	r2, #1
 800441e:	2110      	movs	r1, #16
 8004420:	481b      	ldr	r0, [pc, #108]	; (8004490 <HX711_read+0x94>)
 8004422:	f7fd faaa 	bl	800197a <HAL_GPIO_WritePin>

		buffer = buffer << 1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	60fb      	str	r3, [r7, #12]

		if (HAL_GPIO_ReadPin(GPIOA, VAGA_DT_Pin)) {
 800442c:	2120      	movs	r1, #32
 800442e:	4818      	ldr	r0, [pc, #96]	; (8004490 <HX711_read+0x94>)
 8004430:	f7fd fa8c 	bl	800194c <HAL_GPIO_ReadPin>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HX711_read+0x44>
			buffer++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
		}

		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_RESET);
 8004440:	2200      	movs	r2, #0
 8004442:	2110      	movs	r1, #16
 8004444:	4812      	ldr	r0, [pc, #72]	; (8004490 <HX711_read+0x94>)
 8004446:	f7fd fa98 	bl	800197a <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 24; i++) {
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	3301      	adds	r3, #1
 800444e:	72fb      	strb	r3, [r7, #11]
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	2b17      	cmp	r3, #23
 8004454:	d9e2      	bls.n	800441c <HX711_read+0x20>
	}

	for (int i = 0; i < 1; i++) {
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	e00c      	b.n	8004476 <HX711_read+0x7a>
		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_SET);
 800445c:	2201      	movs	r2, #1
 800445e:	2110      	movs	r1, #16
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <HX711_read+0x94>)
 8004462:	f7fd fa8a 	bl	800197a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, VAGA_SCK_Pin, GPIO_PIN_RESET);
 8004466:	2200      	movs	r2, #0
 8004468:	2110      	movs	r1, #16
 800446a:	4809      	ldr	r0, [pc, #36]	; (8004490 <HX711_read+0x94>)
 800446c:	f7fd fa85 	bl	800197a <HAL_GPIO_WritePin>
	for (int i = 0; i < 1; i++) {
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3301      	adds	r3, #1
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	ddef      	ble.n	800445c <HX711_read+0x60>
	}

	buffer = buffer ^ 0x800000;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004482:	60fb      	str	r3, [r7, #12]

	return buffer;
 8004484:	68fb      	ldr	r3, [r7, #12]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40010800 	.word	0x40010800

08004494 <HX711_read_average>:

long HX711_read_average(int times) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	long sum = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < times; i++) {
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	e008      	b.n	80044b8 <HX711_read_average+0x24>
		sum += HX711_read();
 80044a6:	f7ff ffa9 	bl	80043fc <HX711_read>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < times; i++) {
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	dbf2      	blt.n	80044a6 <HX711_read_average+0x12>
	}

	return sum / times;
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HX711_get_value>:
double HX711_get_value(int times) {
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	return HX711_read_average(times) - OFFSET;
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ffdb 	bl	8004494 <HX711_read_average>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HX711_get_value+0x2c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fb ff84 	bl	80003f4 <__aeabi_i2d>
 80044ec:	4603      	mov	r3, r0
 80044ee:	460c      	mov	r4, r1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	4621      	mov	r1, r4
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd90      	pop	{r4, r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200000a4 	.word	0x200000a4

08004500 <HX711_get_units>:

float HX711_get_units(int times) {
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	return HX711_get_value(times) / SCALE;
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ffe1 	bl	80044d0 <HX711_get_value>
 800450e:	4604      	mov	r4, r0
 8004510:	460d      	mov	r5, r1
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HX711_get_units+0x40>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fb ff7e 	bl	8000418 <__aeabi_f2d>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fc f8f6 	bl	8000714 <__aeabi_ddiv>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	4618      	mov	r0, r3
 800452e:	4621      	mov	r1, r4
 8004530:	f7fc fa00 	bl	8000934 <__aeabi_d2f>
 8004534:	4603      	mov	r3, r0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bdb0      	pop	{r4, r5, r7, pc}
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <HX711_set_offset>:

void HX711_set_offset(long offset) {
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	OFFSET = offset;
 800454c:	4a03      	ldr	r2, [pc, #12]	; (800455c <HX711_set_offset+0x18>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6013      	str	r3, [r2, #0]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	200000a4 	.word	0x200000a4

08004560 <HX711_set_scale>:

void HX711_set_scale(float scale) {
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	SCALE = scale;
 8004568:	4a03      	ldr	r2, [pc, #12]	; (8004578 <HX711_set_scale+0x18>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	2000000c 	.word	0x2000000c

0800457c <HX711_Tare>:

void HX711_Tare(int times) {
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	double sum = HX711_read_average(times);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff85 	bl	8004494 <HX711_read_average>
 800458a:	4603      	mov	r3, r0
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb ff31 	bl	80003f4 <__aeabi_i2d>
 8004592:	4603      	mov	r3, r0
 8004594:	460c      	mov	r4, r1
 8004596:	e9c7 3402 	strd	r3, r4, [r7, #8]

	HX711_set_offset(sum);
 800459a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800459e:	f7fc f9a1 	bl	80008e4 <__aeabi_d2iz>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ffcd 	bl	8004544 <HX711_set_offset>
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd90      	pop	{r4, r7, pc}
	...

080045b4 <Stepper_Step>:

//funkcija za stepper motor-------------------------STEPPER-------------------------------
void Stepper_Step(int step, int dir) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, RESET);
 80045be:	2200      	movs	r2, #0
 80045c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045c4:	481e      	ldr	r0, [pc, #120]	; (8004640 <Stepper_Step+0x8c>)
 80045c6:	f7fd f9d8 	bl	800197a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80045ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045ce:	f7fc faa9 	bl	8000b24 <HAL_Delay>
	if (dir == 1) {
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <Stepper_Step+0x30>
		HAL_GPIO_WritePin(GPIOA, STEPPER_DIR_Pin, GPIO_PIN_SET);
 80045d8:	2201      	movs	r2, #1
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	4818      	ldr	r0, [pc, #96]	; (8004640 <Stepper_Step+0x8c>)
 80045de:	f7fd f9cc 	bl	800197a <HAL_GPIO_WritePin>
 80045e2:	e004      	b.n	80045ee <Stepper_Step+0x3a>
	} else {
		HAL_GPIO_WritePin(GPIOA, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 80045e4:	2200      	movs	r2, #0
 80045e6:	2140      	movs	r1, #64	; 0x40
 80045e8:	4815      	ldr	r0, [pc, #84]	; (8004640 <Stepper_Step+0x8c>)
 80045ea:	f7fd f9c6 	bl	800197a <HAL_GPIO_WritePin>
	}
	for (int i = 0; i < step; i++) {
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e012      	b.n	800461a <Stepper_Step+0x66>
		HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin, GPIO_PIN_SET);
 80045f4:	2201      	movs	r2, #1
 80045f6:	2180      	movs	r1, #128	; 0x80
 80045f8:	4811      	ldr	r0, [pc, #68]	; (8004640 <Stepper_Step+0x8c>)
 80045fa:	f7fd f9be 	bl	800197a <HAL_GPIO_WritePin>
		HAL_Delay(4);
 80045fe:	2004      	movs	r0, #4
 8004600:	f7fc fa90 	bl	8000b24 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	480d      	ldr	r0, [pc, #52]	; (8004640 <Stepper_Step+0x8c>)
 800460a:	f7fd f9b6 	bl	800197a <HAL_GPIO_WritePin>
		HAL_Delay(4);
 800460e:	2004      	movs	r0, #4
 8004610:	f7fc fa88 	bl	8000b24 <HAL_Delay>
	for (int i = 0; i < step; i++) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	dbe8      	blt.n	80045f4 <Stepper_Step+0x40>
	}
	HAL_Delay(500);
 8004622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004626:	f7fc fa7d 	bl	8000b24 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, SET);
 800462a:	2201      	movs	r2, #1
 800462c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004630:	4803      	ldr	r0, [pc, #12]	; (8004640 <Stepper_Step+0x8c>)
 8004632:	f7fd f9a2 	bl	800197a <HAL_GPIO_WritePin>
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40010800 	.word	0x40010800
 8004644:	00000000 	.word	0x00000000

08004648 <Servo_motor>:

void Servo_motor(PWM_CHANNEL PWM_CH, int kut) {
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
	float stupnjevi = ((7656 / 1800.0) * (kut + 45.0));
 8004654:	6838      	ldr	r0, [r7, #0]
 8004656:	f7fb fecd 	bl	80003f4 <__aeabi_i2d>
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <Servo_motor+0xa0>)
 8004660:	f7fb fd7c 	bl	800015c <__adddf3>
 8004664:	4603      	mov	r3, r0
 8004666:	460c      	mov	r4, r1
 8004668:	4618      	mov	r0, r3
 800466a:	4621      	mov	r1, r4
 800466c:	a31c      	add	r3, pc, #112	; (adr r3, 80046e0 <Servo_motor+0x98>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb ff25 	bl	80004c0 <__aeabi_dmul>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
 800467a:	4618      	mov	r0, r3
 800467c:	4621      	mov	r1, r4
 800467e:	f7fc f959 	bl	8000934 <__aeabi_d2f>
 8004682:	4603      	mov	r3, r0
 8004684:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <Servo_motor+0x54>
 800468c:	4b17      	ldr	r3, [pc, #92]	; (80046ec <Servo_motor+0xa4>)
 800468e:	681c      	ldr	r4, [r3, #0]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fc f9c5 	bl	8000a20 <__aeabi_f2uiz>
 8004696:	4603      	mov	r3, r0
 8004698:	6363      	str	r3, [r4, #52]	; 0x34
}
 800469a:	e01c      	b.n	80046d6 <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d107      	bne.n	80046b2 <Servo_motor+0x6a>
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <Servo_motor+0xa4>)
 80046a4:	681c      	ldr	r4, [r3, #0]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7fc f9ba 	bl	8000a20 <__aeabi_f2uiz>
 80046ac:	4603      	mov	r3, r0
 80046ae:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80046b0:	e011      	b.n	80046d6 <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d107      	bne.n	80046c8 <Servo_motor+0x80>
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <Servo_motor+0xa4>)
 80046ba:	681c      	ldr	r4, [r3, #0]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7fc f9af 	bl	8000a20 <__aeabi_f2uiz>
 80046c2:	4603      	mov	r3, r0
 80046c4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80046c6:	e006      	b.n	80046d6 <Servo_motor+0x8e>
	__HAL_TIM_SET_COMPARE(&htim1, PWM_CH, (stupnjevi)); //180 stupnjeva 8000*0,125
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <Servo_motor+0xa4>)
 80046ca:	681c      	ldr	r4, [r3, #0]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7fc f9a7 	bl	8000a20 <__aeabi_f2uiz>
 80046d2:	4603      	mov	r3, r0
 80046d4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd90      	pop	{r4, r7, pc}
 80046de:	bf00      	nop
 80046e0:	d0369d03 	.word	0xd0369d03
 80046e4:	40110369 	.word	0x40110369
 80046e8:	40468000 	.word	0x40468000
 80046ec:	20000178 	.word	0x20000178

080046f0 <Pomakni_na_vagu>:

void Pomakni_na_vagu() {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
	Servo_motor(PWM3, 10);
 80046f4:	210a      	movs	r1, #10
 80046f6:	2008      	movs	r0, #8
 80046f8:	f7ff ffa6 	bl	8004648 <Servo_motor>
	HAL_Delay(2000);
 80046fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004700:	f7fc fa10 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM3, 100);
 8004704:	2164      	movs	r1, #100	; 0x64
 8004706:	2008      	movs	r0, #8
 8004708:	f7ff ff9e 	bl	8004648 <Servo_motor>
	HAL_Delay(1000);
 800470c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004710:	f7fc fa08 	bl	8000b24 <HAL_Delay>
	//Servo_motor(PWM3, 80);
	//HAL_Delay(1000);
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}

08004718 <Makni_sa_vage>:
void Makni_sa_vage() {
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
	Servo_motor(PWM2, 10);
 800471c:	210a      	movs	r1, #10
 800471e:	2004      	movs	r0, #4
 8004720:	f7ff ff92 	bl	8004648 <Servo_motor>
	HAL_Delay(300);
 8004724:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004728:	f7fc f9fc 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM2, 25);
 800472c:	2119      	movs	r1, #25
 800472e:	2004      	movs	r0, #4
 8004730:	f7ff ff8a 	bl	8004648 <Servo_motor>
	HAL_Delay(300);
 8004734:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004738:	f7fc f9f4 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM2, 40);
 800473c:	2128      	movs	r1, #40	; 0x28
 800473e:	2004      	movs	r0, #4
 8004740:	f7ff ff82 	bl	8004648 <Servo_motor>
	HAL_Delay(300);
 8004744:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004748:	f7fc f9ec 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM2, 55);
 800474c:	2137      	movs	r1, #55	; 0x37
 800474e:	2004      	movs	r0, #4
 8004750:	f7ff ff7a 	bl	8004648 <Servo_motor>
	HAL_Delay(300);
 8004754:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004758:	f7fc f9e4 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM2, 70);
 800475c:	2146      	movs	r1, #70	; 0x46
 800475e:	2004      	movs	r0, #4
 8004760:	f7ff ff72 	bl	8004648 <Servo_motor>
	HAL_Delay(300);
 8004764:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004768:	f7fc f9dc 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM2, 80);
 800476c:	2150      	movs	r1, #80	; 0x50
 800476e:	2004      	movs	r0, #4
 8004770:	f7ff ff6a 	bl	8004648 <Servo_motor>
	HAL_Delay(300);
 8004774:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004778:	f7fc f9d4 	bl	8000b24 <HAL_Delay>
	Servo_motor(PWM2, 0);
 800477c:	2100      	movs	r1, #0
 800477e:	2004      	movs	r0, #4
 8004780:	f7ff ff62 	bl	8004648 <Servo_motor>
	HAL_Delay(1000);
 8004784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004788:	f7fc f9cc 	bl	8000b24 <HAL_Delay>
}
 800478c:	bf00      	nop
 800478e:	bd80      	pop	{r7, pc}

08004790 <Postavi_spremnik>:
void Postavi_spremnik(int spremnik) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

	switch (spremnik) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	2b03      	cmp	r3, #3
 800479e:	f200 8087 	bhi.w	80048b0 <Postavi_spremnik+0x120>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <Postavi_spremnik+0x18>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047f7 	.word	0x080047f7
 80047b0:	08004835 	.word	0x08004835
 80047b4:	08004873 	.word	0x08004873
	case 1:
		if (stepperPosition == 2) {
 80047b8:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <Postavi_spremnik+0x128>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d104      	bne.n	80047ca <Postavi_spremnik+0x3a>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 80047c0:	2100      	movs	r1, #0
 80047c2:	2064      	movs	r0, #100	; 0x64
 80047c4:	f7ff fef6 	bl	80045b4 <Stepper_Step>
 80047c8:	e011      	b.n	80047ee <Postavi_spremnik+0x5e>
		} else if (stepperPosition == 3) {
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <Postavi_spremnik+0x128>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d104      	bne.n	80047dc <Postavi_spremnik+0x4c>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 80047d2:	2100      	movs	r1, #0
 80047d4:	20c8      	movs	r0, #200	; 0xc8
 80047d6:	f7ff feed 	bl	80045b4 <Stepper_Step>
 80047da:	e008      	b.n	80047ee <Postavi_spremnik+0x5e>
		} else if (stepperPosition == 4) {
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <Postavi_spremnik+0x128>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <Postavi_spremnik+0x5e>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 80047e4:	2100      	movs	r1, #0
 80047e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047ea:	f7ff fee3 	bl	80045b4 <Stepper_Step>
		}
		stepperPosition = 1;
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <Postavi_spremnik+0x128>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
		break;
 80047f4:	e05c      	b.n	80048b0 <Postavi_spremnik+0x120>
	case 2:
		if (stepperPosition == 1) {
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <Postavi_spremnik+0x128>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <Postavi_spremnik+0x7a>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 80047fe:	2100      	movs	r1, #0
 8004800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004804:	f7ff fed6 	bl	80045b4 <Stepper_Step>
 8004808:	e010      	b.n	800482c <Postavi_spremnik+0x9c>
		} else if (stepperPosition == 3) {
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <Postavi_spremnik+0x128>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d104      	bne.n	800481c <Postavi_spremnik+0x8c>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 8004812:	2100      	movs	r1, #0
 8004814:	2064      	movs	r0, #100	; 0x64
 8004816:	f7ff fecd 	bl	80045b4 <Stepper_Step>
 800481a:	e007      	b.n	800482c <Postavi_spremnik+0x9c>
		} else if (stepperPosition == 4) {
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <Postavi_spremnik+0x128>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d103      	bne.n	800482c <Postavi_spremnik+0x9c>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 8004824:	2100      	movs	r1, #0
 8004826:	20c8      	movs	r0, #200	; 0xc8
 8004828:	f7ff fec4 	bl	80045b4 <Stepper_Step>
		}
		stepperPosition = 2;
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <Postavi_spremnik+0x128>)
 800482e:	2202      	movs	r2, #2
 8004830:	601a      	str	r2, [r3, #0]
		break;
 8004832:	e03d      	b.n	80048b0 <Postavi_spremnik+0x120>
	case 3:
		if (stepperPosition == 1) {
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <Postavi_spremnik+0x128>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d104      	bne.n	8004846 <Postavi_spremnik+0xb6>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 800483c:	2100      	movs	r1, #0
 800483e:	20c8      	movs	r0, #200	; 0xc8
 8004840:	f7ff feb8 	bl	80045b4 <Stepper_Step>
 8004844:	e011      	b.n	800486a <Postavi_spremnik+0xda>
		} else if (stepperPosition == 2) {
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <Postavi_spremnik+0x128>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d105      	bne.n	800485a <Postavi_spremnik+0xca>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 800484e:	2100      	movs	r1, #0
 8004850:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004854:	f7ff feae 	bl	80045b4 <Stepper_Step>
 8004858:	e007      	b.n	800486a <Postavi_spremnik+0xda>
		} else if (stepperPosition == 4) {
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <Postavi_spremnik+0x128>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d103      	bne.n	800486a <Postavi_spremnik+0xda>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 8004862:	2100      	movs	r1, #0
 8004864:	2064      	movs	r0, #100	; 0x64
 8004866:	f7ff fea5 	bl	80045b4 <Stepper_Step>
		}
		stepperPosition = 3;
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <Postavi_spremnik+0x128>)
 800486c:	2203      	movs	r2, #3
 800486e:	601a      	str	r2, [r3, #0]
		break;
 8004870:	e01e      	b.n	80048b0 <Postavi_spremnik+0x120>
	case 4:
		if (stepperPosition == 1) {
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <Postavi_spremnik+0x128>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d104      	bne.n	8004884 <Postavi_spremnik+0xf4>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 4), 0);
 800487a:	2100      	movs	r1, #0
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	f7ff fe99 	bl	80045b4 <Stepper_Step>
 8004882:	e011      	b.n	80048a8 <Postavi_spremnik+0x118>
		} else if (stepperPosition == 2) {
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <Postavi_spremnik+0x128>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d104      	bne.n	8004896 <Postavi_spremnik+0x106>
			Stepper_Step((BROJ_KORAKAK_ZA_KRUG / 2), 0);
 800488c:	2100      	movs	r1, #0
 800488e:	20c8      	movs	r0, #200	; 0xc8
 8004890:	f7ff fe90 	bl	80045b4 <Stepper_Step>
 8004894:	e008      	b.n	80048a8 <Postavi_spremnik+0x118>
		} else if (stepperPosition == 3) {
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <Postavi_spremnik+0x128>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d104      	bne.n	80048a8 <Postavi_spremnik+0x118>
			Stepper_Step(((BROJ_KORAKAK_ZA_KRUG / 4) * 3), 0);
 800489e:	2100      	movs	r1, #0
 80048a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048a4:	f7ff fe86 	bl	80045b4 <Stepper_Step>
		}
		stepperPosition = 4;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <Postavi_spremnik+0x128>)
 80048aa:	2204      	movs	r2, #4
 80048ac:	601a      	str	r2, [r3, #0]
		break;
 80048ae:	bf00      	nop
	}

}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200000a8 	.word	0x200000a8

080048bc <Spremnik_zero>:

//funkcija za postaavljanje prvog spremnika
void Spremnik_zero() {
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
	if (stepperPosition != 1) {
 80048c0:	4b29      	ldr	r3, [pc, #164]	; (8004968 <Spremnik_zero+0xac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d046      	beq.n	8004956 <Spremnik_zero+0x9a>
		HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, RESET);
 80048c8:	2200      	movs	r2, #0
 80048ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ce:	4827      	ldr	r0, [pc, #156]	; (800496c <Spremnik_zero+0xb0>)
 80048d0:	f7fd f853 	bl	800197a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2140      	movs	r1, #64	; 0x40
 80048d8:	4824      	ldr	r0, [pc, #144]	; (800496c <Spremnik_zero+0xb0>)
 80048da:	f7fd f84e 	bl	800197a <HAL_GPIO_WritePin>

		sConfig.Channel = ADC_CHANNEL_8;
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <Spremnik_zero+0xb4>)
 80048e0:	2208      	movs	r2, #8
 80048e2:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80048e4:	4922      	ldr	r1, [pc, #136]	; (8004970 <Spremnik_zero+0xb4>)
 80048e6:	4823      	ldr	r0, [pc, #140]	; (8004974 <Spremnik_zero+0xb8>)
 80048e8:	f7fc fbca 	bl	8001080 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80048ec:	4821      	ldr	r0, [pc, #132]	; (8004974 <Spremnik_zero+0xb8>)
 80048ee:	f7fc fa13 	bl	8000d18 <HAL_ADC_Start>
		HAL_Delay(100);
 80048f2:	2064      	movs	r0, #100	; 0x64
 80048f4:	f7fc f916 	bl	8000b24 <HAL_Delay>
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80048f8:	2164      	movs	r1, #100	; 0x64
 80048fa:	481e      	ldr	r0, [pc, #120]	; (8004974 <Spremnik_zero+0xb8>)
 80048fc:	f7fc faba 	bl	8000e74 <HAL_ADC_PollForConversion>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11c      	bne.n	8004940 <Spremnik_zero+0x84>
			hall_val = HAL_ADC_GetValue(&hadc1);
 8004906:	481b      	ldr	r0, [pc, #108]	; (8004974 <Spremnik_zero+0xb8>)
 8004908:	f7fc fbae 	bl	8001068 <HAL_ADC_GetValue>
 800490c:	4602      	mov	r2, r0
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <Spremnik_zero+0xbc>)
 8004910:	601a      	str	r2, [r3, #0]
		}

		while (hall_val > 10) {
 8004912:	e015      	b.n	8004940 <Spremnik_zero+0x84>
			HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin, GPIO_PIN_SET);
 8004914:	2201      	movs	r2, #1
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	4814      	ldr	r0, [pc, #80]	; (800496c <Spremnik_zero+0xb0>)
 800491a:	f7fd f82e 	bl	800197a <HAL_GPIO_WritePin>
			HAL_Delay(8);
 800491e:	2008      	movs	r0, #8
 8004920:	f7fc f900 	bl	8000b24 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 8004924:	2200      	movs	r2, #0
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	4810      	ldr	r0, [pc, #64]	; (800496c <Spremnik_zero+0xb0>)
 800492a:	f7fd f826 	bl	800197a <HAL_GPIO_WritePin>
			HAL_Delay(8);
 800492e:	2008      	movs	r0, #8
 8004930:	f7fc f8f8 	bl	8000b24 <HAL_Delay>
			//HAL_Delay(5);
			hall_val = HAL_ADC_GetValue(&hadc1);
 8004934:	480f      	ldr	r0, [pc, #60]	; (8004974 <Spremnik_zero+0xb8>)
 8004936:	f7fc fb97 	bl	8001068 <HAL_ADC_GetValue>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <Spremnik_zero+0xbc>)
 800493e:	601a      	str	r2, [r3, #0]
		while (hall_val > 10) {
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <Spremnik_zero+0xbc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b0a      	cmp	r3, #10
 8004946:	d8e5      	bhi.n	8004914 <Spremnik_zero+0x58>
		}
		HAL_Delay(500);
 8004948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800494c:	f7fc f8ea 	bl	8000b24 <HAL_Delay>
		stepperPosition = 1;
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <Spremnik_zero+0xac>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOA, STEPPER_EN_Pin, SET);
 8004956:	2201      	movs	r2, #1
 8004958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800495c:	4803      	ldr	r0, [pc, #12]	; (800496c <Spremnik_zero+0xb0>)
 800495e:	f7fd f80c 	bl	800197a <HAL_GPIO_WritePin>
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	200000a8 	.word	0x200000a8
 800496c:	40010800 	.word	0x40010800
 8004970:	20000098 	.word	0x20000098
 8004974:	20000144 	.word	0x20000144
 8004978:	200001d8 	.word	0x200001d8

0800497c <__io_putchar>:

PUTCHAR_PROTOTYPE {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of
	 transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8004984:	1d39      	adds	r1, r7, #4
 8004986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800498a:	2201      	movs	r2, #1
 800498c:	4803      	ldr	r0, [pc, #12]	; (800499c <__io_putchar+0x20>)
 800498e:	f7fe fb53 	bl	8003038 <HAL_UART_Transmit>
	return ch;
 8004992:	687b      	ldr	r3, [r7, #4]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	200001dc 	.word	0x200001dc

080049a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_MspInit+0x5c>)
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <HAL_MspInit+0x5c>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6193      	str	r3, [r2, #24]
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_MspInit+0x5c>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ca:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <HAL_MspInit+0x5c>)
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <HAL_MspInit+0x5c>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	61d3      	str	r3, [r2, #28]
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_MspInit+0x5c>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_MspInit+0x60>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_MspInit+0x60>)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40010000 	.word	0x40010000

08004a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0318 	add.w	r3, r7, #24
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_ADC_MspInit+0x98>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d137      	bne.n	8004aa0 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a30:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	6193      	str	r3, [r2, #24]
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a48:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a4a:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f043 0304 	orr.w	r3, r3, #4
 8004a52:	6193      	str	r3, [r2, #24]
 8004a54:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a60:	4a12      	ldr	r2, [pc, #72]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f043 0308 	orr.w	r3, r3, #8
 8004a6a:	6193      	str	r3, [r2, #24]
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_ADC_MspInit+0x9c>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = SENZOR_ADC1_Pin;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENZOR_ADC1_GPIO_Port, &GPIO_InitStruct);
 8004a80:	f107 0318 	add.w	r3, r7, #24
 8004a84:	4619      	mov	r1, r3
 8004a86:	480a      	ldr	r0, [pc, #40]	; (8004ab0 <HAL_ADC_MspInit+0xa0>)
 8004a88:	f7fc fe06 	bl	8001698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_SENZOR_Pin|SENZOR_ADC2_Pin;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a90:	2303      	movs	r3, #3
 8004a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a94:	f107 0318 	add.w	r3, r7, #24
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <HAL_ADC_MspInit+0xa4>)
 8004a9c:	f7fc fdfc 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004aa0:	bf00      	nop
 8004aa2:	3728      	adds	r7, #40	; 0x28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40012400 	.word	0x40012400
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40010800 	.word	0x40010800
 8004ab4:	40010c00 	.word	0x40010c00

08004ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a09      	ldr	r2, [pc, #36]	; (8004aec <HAL_TIM_Base_MspInit+0x34>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <HAL_TIM_Base_MspInit+0x38>)
 8004acc:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <HAL_TIM_Base_MspInit+0x38>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ad4:	6193      	str	r3, [r2, #24]
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_TIM_Base_MspInit+0x38>)
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <HAL_TIM_MspPostInit+0x74>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d125      	bne.n	8004b60 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b14:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <HAL_TIM_MspPostInit+0x78>)
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_TIM_MspPostInit+0x78>)
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	6193      	str	r3, [r2, #24]
 8004b20:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_TIM_MspPostInit+0x78>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8004b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b36:	2303      	movs	r3, #3
 8004b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8004b3a:	f107 0310 	add.w	r3, r7, #16
 8004b3e:	4619      	mov	r1, r3
 8004b40:	480b      	ldr	r0, [pc, #44]	; (8004b70 <HAL_TIM_MspPostInit+0x7c>)
 8004b42:	f7fc fda9 	bl	8001698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2302      	movs	r3, #2
 8004b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4805      	ldr	r0, [pc, #20]	; (8004b70 <HAL_TIM_MspPostInit+0x7c>)
 8004b5c:	f7fc fd9c 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40010800 	.word	0x40010800

08004b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <HAL_UART_MspInit+0x98>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d137      	bne.n	8004c04 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <HAL_UART_MspInit+0x9c>)
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <HAL_UART_MspInit+0x9c>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9e:	61d3      	str	r3, [r2, #28]
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_UART_MspInit+0x9c>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_UART_MspInit+0x9c>)
 8004bae:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <HAL_UART_MspInit+0x9c>)
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	6193      	str	r3, [r2, #24]
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_UART_MspInit+0x9c>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	480f      	ldr	r0, [pc, #60]	; (8004c14 <HAL_UART_MspInit+0xa0>)
 8004bd8:	f7fc fd5e 	bl	8001698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be8:	f107 0310 	add.w	r3, r7, #16
 8004bec:	4619      	mov	r1, r3
 8004bee:	4809      	ldr	r0, [pc, #36]	; (8004c14 <HAL_UART_MspInit+0xa0>)
 8004bf0:	f7fc fd52 	bl	8001698 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2026      	movs	r0, #38	; 0x26
 8004bfa:	f7fc fc9a 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004bfe:	2026      	movs	r0, #38	; 0x26
 8004c00:	f7fc fcb3 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c04:	bf00      	nop
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40010800 	.word	0x40010800

08004c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c28:	e7fe      	b.n	8004c28 <HardFault_Handler+0x4>

08004c2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c2e:	e7fe      	b.n	8004c2e <MemManage_Handler+0x4>

08004c30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c34:	e7fe      	b.n	8004c34 <BusFault_Handler+0x4>

08004c36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c3a:	e7fe      	b.n	8004c3a <UsageFault_Handler+0x4>

08004c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c64:	f7fb ff42 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	volatile static size_t i=0;

	rx_buff[i]=USART2->DR;
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <USART2_IRQHandler+0x94>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <USART2_IRQHandler+0x98>)
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	b2d1      	uxtb	r1, r2
 8004c7a:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <USART2_IRQHandler+0x9c>)
 8004c7c:	54d1      	strb	r1, [r2, r3]
	if(rx_buff[i] == '#'){
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <USART2_IRQHandler+0x94>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <USART2_IRQHandler+0x9c>)
 8004c84:	5cd3      	ldrb	r3, [r2, r3]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b23      	cmp	r3, #35	; 0x23
 8004c8a:	d12f      	bne.n	8004cec <USART2_IRQHandler+0x80>
		if(i == 2){
 8004c8c:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <USART2_IRQHandler+0x94>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d106      	bne.n	8004ca2 <USART2_IRQHandler+0x36>
			memcpy((void*)det_obj_buff,(const void*)rx_buff,3);
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <USART2_IRQHandler+0xa0>)
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <USART2_IRQHandler+0x9c>)
 8004c98:	8811      	ldrh	r1, [r2, #0]
 8004c9a:	7892      	ldrb	r2, [r2, #2]
 8004c9c:	8019      	strh	r1, [r3, #0]
 8004c9e:	709a      	strb	r2, [r3, #2]
 8004ca0:	e020      	b.n	8004ce4 <USART2_IRQHandler+0x78>
		}
		else{
			memcpy((void*)msg_protocol,(const void*)rx_buff,32);
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	4918      	ldr	r1, [pc, #96]	; (8004d08 <USART2_IRQHandler+0x9c>)
 8004ca6:	481a      	ldr	r0, [pc, #104]	; (8004d10 <USART2_IRQHandler+0xa4>)
 8004ca8:	f000 f956 	bl	8004f58 <memcpy>
			sys_flag=(msg_protocol[30]-48);
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <USART2_IRQHandler+0xa4>)
 8004cae:	7f9b      	ldrb	r3, [r3, #30]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3b30      	subs	r3, #48	; 0x30
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <USART2_IRQHandler+0xa8>)
 8004cb8:	701a      	strb	r2, [r3, #0]
			if(sys_flag != 0){
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <USART2_IRQHandler+0xa8>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d006      	beq.n	8004cd2 <USART2_IRQHandler+0x66>
				HAL_GPIO_WritePin(GPIOC,LED_Pin,RESET);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cca:	4813      	ldr	r0, [pc, #76]	; (8004d18 <USART2_IRQHandler+0xac>)
 8004ccc:	f7fc fe55 	bl	800197a <HAL_GPIO_WritePin>
 8004cd0:	e005      	b.n	8004cde <USART2_IRQHandler+0x72>
			}
			else{
				HAL_GPIO_WritePin(GPIOC,LED_Pin,SET);
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cd8:	480f      	ldr	r0, [pc, #60]	; (8004d18 <USART2_IRQHandler+0xac>)
 8004cda:	f7fc fe4e 	bl	800197a <HAL_GPIO_WritePin>
			}
			sys_flag_changed=1;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <USART2_IRQHandler+0xb0>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
		}
		i=0;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <USART2_IRQHandler+0x94>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e004      	b.n	8004cf6 <USART2_IRQHandler+0x8a>
	}
	else{
		i++;
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <USART2_IRQHandler+0x94>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	4a03      	ldr	r2, [pc, #12]	; (8004d00 <USART2_IRQHandler+0x94>)
 8004cf4:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cf6:	480a      	ldr	r0, [pc, #40]	; (8004d20 <USART2_IRQHandler+0xb4>)
 8004cf8:	f7fe fa36 	bl	8003168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200000ac 	.word	0x200000ac
 8004d04:	40004400 	.word	0x40004400
 8004d08:	2000010c 	.word	0x2000010c
 8004d0c:	200000c0 	.word	0x200000c0
 8004d10:	200001b8 	.word	0x200001b8
 8004d14:	20000094 	.word	0x20000094
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	20000095 	.word	0x20000095
 8004d20:	200001dc 	.word	0x200001dc

08004d24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e00a      	b.n	8004d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d36:	68bc      	ldr	r4, [r7, #8]
 8004d38:	1c63      	adds	r3, r4, #1
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	f3af 8000 	nop.w
 8004d40:	4603      	mov	r3, r0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dbf0      	blt.n	8004d36 <_read+0x12>
	}

return len;
 8004d54:	687b      	ldr	r3, [r7, #4]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}

08004d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e009      	b.n	8004d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	60ba      	str	r2, [r7, #8]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fdff 	bl	800497c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3301      	adds	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	dbf1      	blt.n	8004d70 <_write+0x12>
	}
	return len;
 8004d8c:	687b      	ldr	r3, [r7, #4]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <_sbrk+0x50>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <_sbrk+0x16>
		heap_end = &end;
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <_sbrk+0x50>)
 8004daa:	4a10      	ldr	r2, [pc, #64]	; (8004dec <_sbrk+0x54>)
 8004dac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <_sbrk+0x50>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <_sbrk+0x50>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	466a      	mov	r2, sp
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d907      	bls.n	8004dd2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004dc2:	f000 f89f 	bl	8004f04 <__errno>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	230c      	movs	r3, #12
 8004dca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	e006      	b.n	8004de0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <_sbrk+0x50>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <_sbrk+0x50>)
 8004ddc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200000b0 	.word	0x200000b0
 8004dec:	20000224 	.word	0x20000224

08004df0 <_close>:

int _close(int file)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	return -1;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e16:	605a      	str	r2, [r3, #4]
	return 0;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <_isatty>:

int _isatty(int file)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	return 1;
 8004e2c:	2301      	movs	r3, #1
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
	return 0;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <SystemInit+0x5c>)
 8004e56:	4b15      	ldr	r3, [pc, #84]	; (8004eac <SystemInit+0x5c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004e60:	4912      	ldr	r1, [pc, #72]	; (8004eac <SystemInit+0x5c>)
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <SystemInit+0x5c>)
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <SystemInit+0x60>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004e6c:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <SystemInit+0x5c>)
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <SystemInit+0x5c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e7c:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <SystemInit+0x5c>)
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <SystemInit+0x5c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004e88:	4a08      	ldr	r2, [pc, #32]	; (8004eac <SystemInit+0x5c>)
 8004e8a:	4b08      	ldr	r3, [pc, #32]	; (8004eac <SystemInit+0x5c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004e92:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <SystemInit+0x5c>)
 8004e96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004e9a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <SystemInit+0x64>)
 8004e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ea2:	609a      	str	r2, [r3, #8]
#endif 
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	f8ff0000 	.word	0xf8ff0000
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004eb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004eba:	e003      	b.n	8004ec4 <LoopCopyDataInit>

08004ebc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004ebe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004ec0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004ec2:	3104      	adds	r1, #4

08004ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004ec4:	480a      	ldr	r0, [pc, #40]	; (8004ef0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004ec8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004eca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004ecc:	d3f6      	bcc.n	8004ebc <CopyDataInit>
  ldr r2, =_sbss
 8004ece:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ed0:	e002      	b.n	8004ed8 <LoopFillZerobss>

08004ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004ed2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004ed4:	f842 3b04 	str.w	r3, [r2], #4

08004ed8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004eda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004edc:	d3f9      	bcc.n	8004ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ede:	f7ff ffb7 	bl	8004e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ee2:	f000 f815 	bl	8004f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ee6:	f7fe fc99 	bl	800381c <main>
  bx lr
 8004eea:	4770      	bx	lr
  ldr r3, =_sidata
 8004eec:	08005e84 	.word	0x08005e84
  ldr r0, =_sdata
 8004ef0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ef4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8004ef8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8004efc:	20000224 	.word	0x20000224

08004f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f00:	e7fe      	b.n	8004f00 <ADC1_2_IRQHandler>
	...

08004f04 <__errno>:
 8004f04:	4b01      	ldr	r3, [pc, #4]	; (8004f0c <__errno+0x8>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000014 	.word	0x20000014

08004f10 <__libc_init_array>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	2500      	movs	r5, #0
 8004f14:	4e0c      	ldr	r6, [pc, #48]	; (8004f48 <__libc_init_array+0x38>)
 8004f16:	4c0d      	ldr	r4, [pc, #52]	; (8004f4c <__libc_init_array+0x3c>)
 8004f18:	1ba4      	subs	r4, r4, r6
 8004f1a:	10a4      	asrs	r4, r4, #2
 8004f1c:	42a5      	cmp	r5, r4
 8004f1e:	d109      	bne.n	8004f34 <__libc_init_array+0x24>
 8004f20:	f000 ff32 	bl	8005d88 <_init>
 8004f24:	2500      	movs	r5, #0
 8004f26:	4e0a      	ldr	r6, [pc, #40]	; (8004f50 <__libc_init_array+0x40>)
 8004f28:	4c0a      	ldr	r4, [pc, #40]	; (8004f54 <__libc_init_array+0x44>)
 8004f2a:	1ba4      	subs	r4, r4, r6
 8004f2c:	10a4      	asrs	r4, r4, #2
 8004f2e:	42a5      	cmp	r5, r4
 8004f30:	d105      	bne.n	8004f3e <__libc_init_array+0x2e>
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f38:	4798      	blx	r3
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	e7ee      	b.n	8004f1c <__libc_init_array+0xc>
 8004f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f42:	4798      	blx	r3
 8004f44:	3501      	adds	r5, #1
 8004f46:	e7f2      	b.n	8004f2e <__libc_init_array+0x1e>
 8004f48:	08005e7c 	.word	0x08005e7c
 8004f4c:	08005e7c 	.word	0x08005e7c
 8004f50:	08005e7c 	.word	0x08005e7c
 8004f54:	08005e80 	.word	0x08005e80

08004f58 <memcpy>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	1e43      	subs	r3, r0, #1
 8004f5c:	440a      	add	r2, r1
 8004f5e:	4291      	cmp	r1, r2
 8004f60:	d100      	bne.n	8004f64 <memcpy+0xc>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f6c:	e7f7      	b.n	8004f5e <memcpy+0x6>

08004f6e <memset>:
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4402      	add	r2, r0
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d100      	bne.n	8004f78 <memset+0xa>
 8004f76:	4770      	bx	lr
 8004f78:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7c:	e7f9      	b.n	8004f72 <memset+0x4>
	...

08004f80 <iprintf>:
 8004f80:	b40f      	push	{r0, r1, r2, r3}
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <iprintf+0x2c>)
 8004f84:	b513      	push	{r0, r1, r4, lr}
 8004f86:	681c      	ldr	r4, [r3, #0]
 8004f88:	b124      	cbz	r4, 8004f94 <iprintf+0x14>
 8004f8a:	69a3      	ldr	r3, [r4, #24]
 8004f8c:	b913      	cbnz	r3, 8004f94 <iprintf+0x14>
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 f84e 	bl	8005030 <__sinit>
 8004f94:	ab05      	add	r3, sp, #20
 8004f96:	9a04      	ldr	r2, [sp, #16]
 8004f98:	68a1      	ldr	r1, [r4, #8]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	f000 f957 	bl	8005250 <_vfiprintf_r>
 8004fa2:	b002      	add	sp, #8
 8004fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	20000014 	.word	0x20000014

08004fb0 <_cleanup_r>:
 8004fb0:	4901      	ldr	r1, [pc, #4]	; (8004fb8 <_cleanup_r+0x8>)
 8004fb2:	f000 b8a9 	b.w	8005108 <_fwalk_reent>
 8004fb6:	bf00      	nop
 8004fb8:	08005b29 	.word	0x08005b29

08004fbc <std.isra.0>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	6003      	str	r3, [r0, #0]
 8004fc4:	6043      	str	r3, [r0, #4]
 8004fc6:	6083      	str	r3, [r0, #8]
 8004fc8:	8181      	strh	r1, [r0, #12]
 8004fca:	6643      	str	r3, [r0, #100]	; 0x64
 8004fcc:	81c2      	strh	r2, [r0, #14]
 8004fce:	6103      	str	r3, [r0, #16]
 8004fd0:	6143      	str	r3, [r0, #20]
 8004fd2:	6183      	str	r3, [r0, #24]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	305c      	adds	r0, #92	; 0x5c
 8004fda:	f7ff ffc8 	bl	8004f6e <memset>
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <std.isra.0+0x38>)
 8004fe0:	6224      	str	r4, [r4, #32]
 8004fe2:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <std.isra.0+0x3c>)
 8004fe6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <std.isra.0+0x40>)
 8004fea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <std.isra.0+0x44>)
 8004fee:	6323      	str	r3, [r4, #48]	; 0x30
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	bf00      	nop
 8004ff4:	080057cd 	.word	0x080057cd
 8004ff8:	080057ef 	.word	0x080057ef
 8004ffc:	08005827 	.word	0x08005827
 8005000:	0800584b 	.word	0x0800584b

08005004 <__sfmoreglue>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	2568      	movs	r5, #104	; 0x68
 8005008:	1e4a      	subs	r2, r1, #1
 800500a:	4355      	muls	r5, r2
 800500c:	460e      	mov	r6, r1
 800500e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005012:	f000 f897 	bl	8005144 <_malloc_r>
 8005016:	4604      	mov	r4, r0
 8005018:	b140      	cbz	r0, 800502c <__sfmoreglue+0x28>
 800501a:	2100      	movs	r1, #0
 800501c:	e880 0042 	stmia.w	r0, {r1, r6}
 8005020:	300c      	adds	r0, #12
 8005022:	60a0      	str	r0, [r4, #8]
 8005024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005028:	f7ff ffa1 	bl	8004f6e <memset>
 800502c:	4620      	mov	r0, r4
 800502e:	bd70      	pop	{r4, r5, r6, pc}

08005030 <__sinit>:
 8005030:	6983      	ldr	r3, [r0, #24]
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	bb33      	cbnz	r3, 8005086 <__sinit+0x56>
 8005038:	6483      	str	r3, [r0, #72]	; 0x48
 800503a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800503c:	6503      	str	r3, [r0, #80]	; 0x50
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <__sinit+0x58>)
 8005040:	4a12      	ldr	r2, [pc, #72]	; (800508c <__sinit+0x5c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6282      	str	r2, [r0, #40]	; 0x28
 8005046:	4298      	cmp	r0, r3
 8005048:	bf04      	itt	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	6183      	streq	r3, [r0, #24]
 800504e:	f000 f81f 	bl	8005090 <__sfp>
 8005052:	6060      	str	r0, [r4, #4]
 8005054:	4620      	mov	r0, r4
 8005056:	f000 f81b 	bl	8005090 <__sfp>
 800505a:	60a0      	str	r0, [r4, #8]
 800505c:	4620      	mov	r0, r4
 800505e:	f000 f817 	bl	8005090 <__sfp>
 8005062:	2200      	movs	r2, #0
 8005064:	60e0      	str	r0, [r4, #12]
 8005066:	2104      	movs	r1, #4
 8005068:	6860      	ldr	r0, [r4, #4]
 800506a:	f7ff ffa7 	bl	8004fbc <std.isra.0>
 800506e:	2201      	movs	r2, #1
 8005070:	2109      	movs	r1, #9
 8005072:	68a0      	ldr	r0, [r4, #8]
 8005074:	f7ff ffa2 	bl	8004fbc <std.isra.0>
 8005078:	2202      	movs	r2, #2
 800507a:	2112      	movs	r1, #18
 800507c:	68e0      	ldr	r0, [r4, #12]
 800507e:	f7ff ff9d 	bl	8004fbc <std.isra.0>
 8005082:	2301      	movs	r3, #1
 8005084:	61a3      	str	r3, [r4, #24]
 8005086:	bd10      	pop	{r4, pc}
 8005088:	08005de4 	.word	0x08005de4
 800508c:	08004fb1 	.word	0x08004fb1

08005090 <__sfp>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <__sfp+0x74>)
 8005094:	4607      	mov	r7, r0
 8005096:	681e      	ldr	r6, [r3, #0]
 8005098:	69b3      	ldr	r3, [r6, #24]
 800509a:	b913      	cbnz	r3, 80050a2 <__sfp+0x12>
 800509c:	4630      	mov	r0, r6
 800509e:	f7ff ffc7 	bl	8005030 <__sinit>
 80050a2:	3648      	adds	r6, #72	; 0x48
 80050a4:	68b4      	ldr	r4, [r6, #8]
 80050a6:	6873      	ldr	r3, [r6, #4]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	d503      	bpl.n	80050b4 <__sfp+0x24>
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	b133      	cbz	r3, 80050be <__sfp+0x2e>
 80050b0:	6836      	ldr	r6, [r6, #0]
 80050b2:	e7f7      	b.n	80050a4 <__sfp+0x14>
 80050b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050b8:	b16d      	cbz	r5, 80050d6 <__sfp+0x46>
 80050ba:	3468      	adds	r4, #104	; 0x68
 80050bc:	e7f4      	b.n	80050a8 <__sfp+0x18>
 80050be:	2104      	movs	r1, #4
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7ff ff9f 	bl	8005004 <__sfmoreglue>
 80050c6:	6030      	str	r0, [r6, #0]
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d1f1      	bne.n	80050b0 <__sfp+0x20>
 80050cc:	230c      	movs	r3, #12
 80050ce:	4604      	mov	r4, r0
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4620      	mov	r0, r4
 80050d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050da:	81e3      	strh	r3, [r4, #14]
 80050dc:	2301      	movs	r3, #1
 80050de:	6665      	str	r5, [r4, #100]	; 0x64
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	6025      	str	r5, [r4, #0]
 80050e4:	60a5      	str	r5, [r4, #8]
 80050e6:	6065      	str	r5, [r4, #4]
 80050e8:	6125      	str	r5, [r4, #16]
 80050ea:	6165      	str	r5, [r4, #20]
 80050ec:	61a5      	str	r5, [r4, #24]
 80050ee:	2208      	movs	r2, #8
 80050f0:	4629      	mov	r1, r5
 80050f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050f6:	f7ff ff3a 	bl	8004f6e <memset>
 80050fa:	6365      	str	r5, [r4, #52]	; 0x34
 80050fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80050fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8005100:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005102:	e7e6      	b.n	80050d2 <__sfp+0x42>
 8005104:	08005de4 	.word	0x08005de4

08005108 <_fwalk_reent>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	4680      	mov	r8, r0
 800510e:	4689      	mov	r9, r1
 8005110:	2600      	movs	r6, #0
 8005112:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005116:	b914      	cbnz	r4, 800511e <_fwalk_reent+0x16>
 8005118:	4630      	mov	r0, r6
 800511a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511e:	68a5      	ldr	r5, [r4, #8]
 8005120:	6867      	ldr	r7, [r4, #4]
 8005122:	3f01      	subs	r7, #1
 8005124:	d501      	bpl.n	800512a <_fwalk_reent+0x22>
 8005126:	6824      	ldr	r4, [r4, #0]
 8005128:	e7f5      	b.n	8005116 <_fwalk_reent+0xe>
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d907      	bls.n	8005140 <_fwalk_reent+0x38>
 8005130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005134:	3301      	adds	r3, #1
 8005136:	d003      	beq.n	8005140 <_fwalk_reent+0x38>
 8005138:	4629      	mov	r1, r5
 800513a:	4640      	mov	r0, r8
 800513c:	47c8      	blx	r9
 800513e:	4306      	orrs	r6, r0
 8005140:	3568      	adds	r5, #104	; 0x68
 8005142:	e7ee      	b.n	8005122 <_fwalk_reent+0x1a>

08005144 <_malloc_r>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	1ccd      	adds	r5, r1, #3
 8005148:	f025 0503 	bic.w	r5, r5, #3
 800514c:	3508      	adds	r5, #8
 800514e:	2d0c      	cmp	r5, #12
 8005150:	bf38      	it	cc
 8005152:	250c      	movcc	r5, #12
 8005154:	2d00      	cmp	r5, #0
 8005156:	4606      	mov	r6, r0
 8005158:	db01      	blt.n	800515e <_malloc_r+0x1a>
 800515a:	42a9      	cmp	r1, r5
 800515c:	d903      	bls.n	8005166 <_malloc_r+0x22>
 800515e:	230c      	movs	r3, #12
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	2000      	movs	r0, #0
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	f000 fd8d 	bl	8005c84 <__malloc_lock>
 800516a:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <_malloc_r+0xb4>)
 800516c:	6814      	ldr	r4, [r2, #0]
 800516e:	4621      	mov	r1, r4
 8005170:	b991      	cbnz	r1, 8005198 <_malloc_r+0x54>
 8005172:	4c22      	ldr	r4, [pc, #136]	; (80051fc <_malloc_r+0xb8>)
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	b91b      	cbnz	r3, 8005180 <_malloc_r+0x3c>
 8005178:	4630      	mov	r0, r6
 800517a:	f000 fb17 	bl	80057ac <_sbrk_r>
 800517e:	6020      	str	r0, [r4, #0]
 8005180:	4629      	mov	r1, r5
 8005182:	4630      	mov	r0, r6
 8005184:	f000 fb12 	bl	80057ac <_sbrk_r>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d126      	bne.n	80051da <_malloc_r+0x96>
 800518c:	230c      	movs	r3, #12
 800518e:	4630      	mov	r0, r6
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	f000 fd78 	bl	8005c86 <__malloc_unlock>
 8005196:	e7e4      	b.n	8005162 <_malloc_r+0x1e>
 8005198:	680b      	ldr	r3, [r1, #0]
 800519a:	1b5b      	subs	r3, r3, r5
 800519c:	d41a      	bmi.n	80051d4 <_malloc_r+0x90>
 800519e:	2b0b      	cmp	r3, #11
 80051a0:	d90f      	bls.n	80051c2 <_malloc_r+0x7e>
 80051a2:	600b      	str	r3, [r1, #0]
 80051a4:	18cc      	adds	r4, r1, r3
 80051a6:	50cd      	str	r5, [r1, r3]
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 fd6c 	bl	8005c86 <__malloc_unlock>
 80051ae:	f104 000b 	add.w	r0, r4, #11
 80051b2:	1d23      	adds	r3, r4, #4
 80051b4:	f020 0007 	bic.w	r0, r0, #7
 80051b8:	1ac3      	subs	r3, r0, r3
 80051ba:	d01b      	beq.n	80051f4 <_malloc_r+0xb0>
 80051bc:	425a      	negs	r2, r3
 80051be:	50e2      	str	r2, [r4, r3]
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
 80051c2:	428c      	cmp	r4, r1
 80051c4:	bf0b      	itete	eq
 80051c6:	6863      	ldreq	r3, [r4, #4]
 80051c8:	684b      	ldrne	r3, [r1, #4]
 80051ca:	6013      	streq	r3, [r2, #0]
 80051cc:	6063      	strne	r3, [r4, #4]
 80051ce:	bf18      	it	ne
 80051d0:	460c      	movne	r4, r1
 80051d2:	e7e9      	b.n	80051a8 <_malloc_r+0x64>
 80051d4:	460c      	mov	r4, r1
 80051d6:	6849      	ldr	r1, [r1, #4]
 80051d8:	e7ca      	b.n	8005170 <_malloc_r+0x2c>
 80051da:	1cc4      	adds	r4, r0, #3
 80051dc:	f024 0403 	bic.w	r4, r4, #3
 80051e0:	42a0      	cmp	r0, r4
 80051e2:	d005      	beq.n	80051f0 <_malloc_r+0xac>
 80051e4:	1a21      	subs	r1, r4, r0
 80051e6:	4630      	mov	r0, r6
 80051e8:	f000 fae0 	bl	80057ac <_sbrk_r>
 80051ec:	3001      	adds	r0, #1
 80051ee:	d0cd      	beq.n	800518c <_malloc_r+0x48>
 80051f0:	6025      	str	r5, [r4, #0]
 80051f2:	e7d9      	b.n	80051a8 <_malloc_r+0x64>
 80051f4:	bd70      	pop	{r4, r5, r6, pc}
 80051f6:	bf00      	nop
 80051f8:	200000b4 	.word	0x200000b4
 80051fc:	200000b8 	.word	0x200000b8

08005200 <__sfputc_r>:
 8005200:	6893      	ldr	r3, [r2, #8]
 8005202:	b410      	push	{r4}
 8005204:	3b01      	subs	r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	6093      	str	r3, [r2, #8]
 800520a:	da08      	bge.n	800521e <__sfputc_r+0x1e>
 800520c:	6994      	ldr	r4, [r2, #24]
 800520e:	42a3      	cmp	r3, r4
 8005210:	db02      	blt.n	8005218 <__sfputc_r+0x18>
 8005212:	b2cb      	uxtb	r3, r1
 8005214:	2b0a      	cmp	r3, #10
 8005216:	d102      	bne.n	800521e <__sfputc_r+0x1e>
 8005218:	bc10      	pop	{r4}
 800521a:	f000 bb1b 	b.w	8005854 <__swbuf_r>
 800521e:	6813      	ldr	r3, [r2, #0]
 8005220:	1c58      	adds	r0, r3, #1
 8005222:	6010      	str	r0, [r2, #0]
 8005224:	7019      	strb	r1, [r3, #0]
 8005226:	b2c8      	uxtb	r0, r1
 8005228:	bc10      	pop	{r4}
 800522a:	4770      	bx	lr

0800522c <__sfputs_r>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	4614      	mov	r4, r2
 8005234:	18d5      	adds	r5, r2, r3
 8005236:	42ac      	cmp	r4, r5
 8005238:	d101      	bne.n	800523e <__sfputs_r+0x12>
 800523a:	2000      	movs	r0, #0
 800523c:	e007      	b.n	800524e <__sfputs_r+0x22>
 800523e:	463a      	mov	r2, r7
 8005240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff ffdb 	bl	8005200 <__sfputc_r>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	d1f3      	bne.n	8005236 <__sfputs_r+0xa>
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005250 <_vfiprintf_r>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	b09d      	sub	sp, #116	; 0x74
 8005256:	460c      	mov	r4, r1
 8005258:	4617      	mov	r7, r2
 800525a:	9303      	str	r3, [sp, #12]
 800525c:	4606      	mov	r6, r0
 800525e:	b118      	cbz	r0, 8005268 <_vfiprintf_r+0x18>
 8005260:	6983      	ldr	r3, [r0, #24]
 8005262:	b90b      	cbnz	r3, 8005268 <_vfiprintf_r+0x18>
 8005264:	f7ff fee4 	bl	8005030 <__sinit>
 8005268:	4b7c      	ldr	r3, [pc, #496]	; (800545c <_vfiprintf_r+0x20c>)
 800526a:	429c      	cmp	r4, r3
 800526c:	d157      	bne.n	800531e <_vfiprintf_r+0xce>
 800526e:	6874      	ldr	r4, [r6, #4]
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	0718      	lsls	r0, r3, #28
 8005274:	d55d      	bpl.n	8005332 <_vfiprintf_r+0xe2>
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05a      	beq.n	8005332 <_vfiprintf_r+0xe2>
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	2320      	movs	r3, #32
 8005282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005286:	2330      	movs	r3, #48	; 0x30
 8005288:	f04f 0b01 	mov.w	fp, #1
 800528c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005290:	46b8      	mov	r8, r7
 8005292:	4645      	mov	r5, r8
 8005294:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d155      	bne.n	8005348 <_vfiprintf_r+0xf8>
 800529c:	ebb8 0a07 	subs.w	sl, r8, r7
 80052a0:	d00b      	beq.n	80052ba <_vfiprintf_r+0x6a>
 80052a2:	4653      	mov	r3, sl
 80052a4:	463a      	mov	r2, r7
 80052a6:	4621      	mov	r1, r4
 80052a8:	4630      	mov	r0, r6
 80052aa:	f7ff ffbf 	bl	800522c <__sfputs_r>
 80052ae:	3001      	adds	r0, #1
 80052b0:	f000 80c4 	beq.w	800543c <_vfiprintf_r+0x1ec>
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	4453      	add	r3, sl
 80052b8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ba:	f898 3000 	ldrb.w	r3, [r8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80bc 	beq.w	800543c <_vfiprintf_r+0x1ec>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	9307      	str	r3, [sp, #28]
 80052ce:	9205      	str	r2, [sp, #20]
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052d6:	931a      	str	r3, [sp, #104]	; 0x68
 80052d8:	2205      	movs	r2, #5
 80052da:	7829      	ldrb	r1, [r5, #0]
 80052dc:	4860      	ldr	r0, [pc, #384]	; (8005460 <_vfiprintf_r+0x210>)
 80052de:	f000 fcc3 	bl	8005c68 <memchr>
 80052e2:	f105 0801 	add.w	r8, r5, #1
 80052e6:	9b04      	ldr	r3, [sp, #16]
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d131      	bne.n	8005350 <_vfiprintf_r+0x100>
 80052ec:	06d9      	lsls	r1, r3, #27
 80052ee:	bf44      	itt	mi
 80052f0:	2220      	movmi	r2, #32
 80052f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052f6:	071a      	lsls	r2, r3, #28
 80052f8:	bf44      	itt	mi
 80052fa:	222b      	movmi	r2, #43	; 0x2b
 80052fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005300:	782a      	ldrb	r2, [r5, #0]
 8005302:	2a2a      	cmp	r2, #42	; 0x2a
 8005304:	d02c      	beq.n	8005360 <_vfiprintf_r+0x110>
 8005306:	2100      	movs	r1, #0
 8005308:	200a      	movs	r0, #10
 800530a:	9a07      	ldr	r2, [sp, #28]
 800530c:	46a8      	mov	r8, r5
 800530e:	f898 3000 	ldrb.w	r3, [r8]
 8005312:	3501      	adds	r5, #1
 8005314:	3b30      	subs	r3, #48	; 0x30
 8005316:	2b09      	cmp	r3, #9
 8005318:	d96d      	bls.n	80053f6 <_vfiprintf_r+0x1a6>
 800531a:	b371      	cbz	r1, 800537a <_vfiprintf_r+0x12a>
 800531c:	e026      	b.n	800536c <_vfiprintf_r+0x11c>
 800531e:	4b51      	ldr	r3, [pc, #324]	; (8005464 <_vfiprintf_r+0x214>)
 8005320:	429c      	cmp	r4, r3
 8005322:	d101      	bne.n	8005328 <_vfiprintf_r+0xd8>
 8005324:	68b4      	ldr	r4, [r6, #8]
 8005326:	e7a3      	b.n	8005270 <_vfiprintf_r+0x20>
 8005328:	4b4f      	ldr	r3, [pc, #316]	; (8005468 <_vfiprintf_r+0x218>)
 800532a:	429c      	cmp	r4, r3
 800532c:	bf08      	it	eq
 800532e:	68f4      	ldreq	r4, [r6, #12]
 8005330:	e79e      	b.n	8005270 <_vfiprintf_r+0x20>
 8005332:	4621      	mov	r1, r4
 8005334:	4630      	mov	r0, r6
 8005336:	f000 faf1 	bl	800591c <__swsetup_r>
 800533a:	2800      	cmp	r0, #0
 800533c:	d09e      	beq.n	800527c <_vfiprintf_r+0x2c>
 800533e:	f04f 30ff 	mov.w	r0, #4294967295
 8005342:	b01d      	add	sp, #116	; 0x74
 8005344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005348:	2b25      	cmp	r3, #37	; 0x25
 800534a:	d0a7      	beq.n	800529c <_vfiprintf_r+0x4c>
 800534c:	46a8      	mov	r8, r5
 800534e:	e7a0      	b.n	8005292 <_vfiprintf_r+0x42>
 8005350:	4a43      	ldr	r2, [pc, #268]	; (8005460 <_vfiprintf_r+0x210>)
 8005352:	4645      	mov	r5, r8
 8005354:	1a80      	subs	r0, r0, r2
 8005356:	fa0b f000 	lsl.w	r0, fp, r0
 800535a:	4318      	orrs	r0, r3
 800535c:	9004      	str	r0, [sp, #16]
 800535e:	e7bb      	b.n	80052d8 <_vfiprintf_r+0x88>
 8005360:	9a03      	ldr	r2, [sp, #12]
 8005362:	1d11      	adds	r1, r2, #4
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	9103      	str	r1, [sp, #12]
 8005368:	2a00      	cmp	r2, #0
 800536a:	db01      	blt.n	8005370 <_vfiprintf_r+0x120>
 800536c:	9207      	str	r2, [sp, #28]
 800536e:	e004      	b.n	800537a <_vfiprintf_r+0x12a>
 8005370:	4252      	negs	r2, r2
 8005372:	f043 0302 	orr.w	r3, r3, #2
 8005376:	9207      	str	r2, [sp, #28]
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	f898 3000 	ldrb.w	r3, [r8]
 800537e:	2b2e      	cmp	r3, #46	; 0x2e
 8005380:	d110      	bne.n	80053a4 <_vfiprintf_r+0x154>
 8005382:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005386:	f108 0101 	add.w	r1, r8, #1
 800538a:	2b2a      	cmp	r3, #42	; 0x2a
 800538c:	d137      	bne.n	80053fe <_vfiprintf_r+0x1ae>
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	f108 0802 	add.w	r8, r8, #2
 8005394:	1d1a      	adds	r2, r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	9203      	str	r2, [sp, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfb8      	it	lt
 800539e:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	4d31      	ldr	r5, [pc, #196]	; (800546c <_vfiprintf_r+0x21c>)
 80053a6:	2203      	movs	r2, #3
 80053a8:	f898 1000 	ldrb.w	r1, [r8]
 80053ac:	4628      	mov	r0, r5
 80053ae:	f000 fc5b 	bl	8005c68 <memchr>
 80053b2:	b140      	cbz	r0, 80053c6 <_vfiprintf_r+0x176>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	1b40      	subs	r0, r0, r5
 80053b8:	fa03 f000 	lsl.w	r0, r3, r0
 80053bc:	9b04      	ldr	r3, [sp, #16]
 80053be:	f108 0801 	add.w	r8, r8, #1
 80053c2:	4303      	orrs	r3, r0
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	f898 1000 	ldrb.w	r1, [r8]
 80053ca:	2206      	movs	r2, #6
 80053cc:	4828      	ldr	r0, [pc, #160]	; (8005470 <_vfiprintf_r+0x220>)
 80053ce:	f108 0701 	add.w	r7, r8, #1
 80053d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d6:	f000 fc47 	bl	8005c68 <memchr>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d034      	beq.n	8005448 <_vfiprintf_r+0x1f8>
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <_vfiprintf_r+0x224>)
 80053e0:	bb03      	cbnz	r3, 8005424 <_vfiprintf_r+0x1d4>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	3307      	adds	r3, #7
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	3308      	adds	r3, #8
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	444b      	add	r3, r9
 80053f2:	9309      	str	r3, [sp, #36]	; 0x24
 80053f4:	e74c      	b.n	8005290 <_vfiprintf_r+0x40>
 80053f6:	fb00 3202 	mla	r2, r0, r2, r3
 80053fa:	2101      	movs	r1, #1
 80053fc:	e786      	b.n	800530c <_vfiprintf_r+0xbc>
 80053fe:	2300      	movs	r3, #0
 8005400:	250a      	movs	r5, #10
 8005402:	4618      	mov	r0, r3
 8005404:	9305      	str	r3, [sp, #20]
 8005406:	4688      	mov	r8, r1
 8005408:	f898 2000 	ldrb.w	r2, [r8]
 800540c:	3101      	adds	r1, #1
 800540e:	3a30      	subs	r2, #48	; 0x30
 8005410:	2a09      	cmp	r2, #9
 8005412:	d903      	bls.n	800541c <_vfiprintf_r+0x1cc>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0c5      	beq.n	80053a4 <_vfiprintf_r+0x154>
 8005418:	9005      	str	r0, [sp, #20]
 800541a:	e7c3      	b.n	80053a4 <_vfiprintf_r+0x154>
 800541c:	fb05 2000 	mla	r0, r5, r0, r2
 8005420:	2301      	movs	r3, #1
 8005422:	e7f0      	b.n	8005406 <_vfiprintf_r+0x1b6>
 8005424:	ab03      	add	r3, sp, #12
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4622      	mov	r2, r4
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <_vfiprintf_r+0x228>)
 800542c:	a904      	add	r1, sp, #16
 800542e:	4630      	mov	r0, r6
 8005430:	f3af 8000 	nop.w
 8005434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005438:	4681      	mov	r9, r0
 800543a:	d1d8      	bne.n	80053ee <_vfiprintf_r+0x19e>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	065b      	lsls	r3, r3, #25
 8005440:	f53f af7d 	bmi.w	800533e <_vfiprintf_r+0xee>
 8005444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005446:	e77c      	b.n	8005342 <_vfiprintf_r+0xf2>
 8005448:	ab03      	add	r3, sp, #12
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	4622      	mov	r2, r4
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <_vfiprintf_r+0x228>)
 8005450:	a904      	add	r1, sp, #16
 8005452:	4630      	mov	r0, r6
 8005454:	f000 f88a 	bl	800556c <_printf_i>
 8005458:	e7ec      	b.n	8005434 <_vfiprintf_r+0x1e4>
 800545a:	bf00      	nop
 800545c:	08005e08 	.word	0x08005e08
 8005460:	08005e48 	.word	0x08005e48
 8005464:	08005e28 	.word	0x08005e28
 8005468:	08005de8 	.word	0x08005de8
 800546c:	08005e4e 	.word	0x08005e4e
 8005470:	08005e52 	.word	0x08005e52
 8005474:	00000000 	.word	0x00000000
 8005478:	0800522d 	.word	0x0800522d

0800547c <_printf_common>:
 800547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005480:	4691      	mov	r9, r2
 8005482:	461f      	mov	r7, r3
 8005484:	688a      	ldr	r2, [r1, #8]
 8005486:	690b      	ldr	r3, [r1, #16]
 8005488:	4606      	mov	r6, r0
 800548a:	4293      	cmp	r3, r2
 800548c:	bfb8      	it	lt
 800548e:	4613      	movlt	r3, r2
 8005490:	f8c9 3000 	str.w	r3, [r9]
 8005494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005498:	460c      	mov	r4, r1
 800549a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800549e:	b112      	cbz	r2, 80054a6 <_printf_common+0x2a>
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c9 3000 	str.w	r3, [r9]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	0699      	lsls	r1, r3, #26
 80054aa:	bf42      	ittt	mi
 80054ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054b0:	3302      	addmi	r3, #2
 80054b2:	f8c9 3000 	strmi.w	r3, [r9]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d107      	bne.n	80054ce <_printf_common+0x52>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	f8d9 2000 	ldr.w	r2, [r9]
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	429d      	cmp	r5, r3
 80054cc:	db2a      	blt.n	8005524 <_printf_common+0xa8>
 80054ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	3300      	adds	r3, #0
 80054d6:	bf18      	it	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	0692      	lsls	r2, r2, #26
 80054dc:	d42f      	bmi.n	800553e <_printf_common+0xc2>
 80054de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e2:	4639      	mov	r1, r7
 80054e4:	4630      	mov	r0, r6
 80054e6:	47c0      	blx	r8
 80054e8:	3001      	adds	r0, #1
 80054ea:	d022      	beq.n	8005532 <_printf_common+0xb6>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	68e5      	ldr	r5, [r4, #12]
 80054f0:	f003 0306 	and.w	r3, r3, #6
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	bf18      	it	ne
 80054f8:	2500      	movne	r5, #0
 80054fa:	f8d9 2000 	ldr.w	r2, [r9]
 80054fe:	f04f 0900 	mov.w	r9, #0
 8005502:	bf08      	it	eq
 8005504:	1aad      	subeq	r5, r5, r2
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	bf08      	it	eq
 800550c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005510:	4293      	cmp	r3, r2
 8005512:	bfc4      	itt	gt
 8005514:	1a9b      	subgt	r3, r3, r2
 8005516:	18ed      	addgt	r5, r5, r3
 8005518:	341a      	adds	r4, #26
 800551a:	454d      	cmp	r5, r9
 800551c:	d11b      	bne.n	8005556 <_printf_common+0xda>
 800551e:	2000      	movs	r0, #0
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	2301      	movs	r3, #1
 8005526:	4652      	mov	r2, sl
 8005528:	4639      	mov	r1, r7
 800552a:	4630      	mov	r0, r6
 800552c:	47c0      	blx	r8
 800552e:	3001      	adds	r0, #1
 8005530:	d103      	bne.n	800553a <_printf_common+0xbe>
 8005532:	f04f 30ff 	mov.w	r0, #4294967295
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	3501      	adds	r5, #1
 800553c:	e7c1      	b.n	80054c2 <_printf_common+0x46>
 800553e:	2030      	movs	r0, #48	; 0x30
 8005540:	18e1      	adds	r1, r4, r3
 8005542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800554c:	4422      	add	r2, r4
 800554e:	3302      	adds	r3, #2
 8005550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005554:	e7c3      	b.n	80054de <_printf_common+0x62>
 8005556:	2301      	movs	r3, #1
 8005558:	4622      	mov	r2, r4
 800555a:	4639      	mov	r1, r7
 800555c:	4630      	mov	r0, r6
 800555e:	47c0      	blx	r8
 8005560:	3001      	adds	r0, #1
 8005562:	d0e6      	beq.n	8005532 <_printf_common+0xb6>
 8005564:	f109 0901 	add.w	r9, r9, #1
 8005568:	e7d7      	b.n	800551a <_printf_common+0x9e>
	...

0800556c <_printf_i>:
 800556c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005570:	4617      	mov	r7, r2
 8005572:	7e0a      	ldrb	r2, [r1, #24]
 8005574:	b085      	sub	sp, #20
 8005576:	2a6e      	cmp	r2, #110	; 0x6e
 8005578:	4698      	mov	r8, r3
 800557a:	4606      	mov	r6, r0
 800557c:	460c      	mov	r4, r1
 800557e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005580:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005584:	f000 80bc 	beq.w	8005700 <_printf_i+0x194>
 8005588:	d81a      	bhi.n	80055c0 <_printf_i+0x54>
 800558a:	2a63      	cmp	r2, #99	; 0x63
 800558c:	d02e      	beq.n	80055ec <_printf_i+0x80>
 800558e:	d80a      	bhi.n	80055a6 <_printf_i+0x3a>
 8005590:	2a00      	cmp	r2, #0
 8005592:	f000 80c8 	beq.w	8005726 <_printf_i+0x1ba>
 8005596:	2a58      	cmp	r2, #88	; 0x58
 8005598:	f000 808a 	beq.w	80056b0 <_printf_i+0x144>
 800559c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80055a4:	e02a      	b.n	80055fc <_printf_i+0x90>
 80055a6:	2a64      	cmp	r2, #100	; 0x64
 80055a8:	d001      	beq.n	80055ae <_printf_i+0x42>
 80055aa:	2a69      	cmp	r2, #105	; 0x69
 80055ac:	d1f6      	bne.n	800559c <_printf_i+0x30>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80055b6:	d023      	beq.n	8005600 <_printf_i+0x94>
 80055b8:	1d11      	adds	r1, r2, #4
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	6813      	ldr	r3, [r2, #0]
 80055be:	e027      	b.n	8005610 <_printf_i+0xa4>
 80055c0:	2a73      	cmp	r2, #115	; 0x73
 80055c2:	f000 80b4 	beq.w	800572e <_printf_i+0x1c2>
 80055c6:	d808      	bhi.n	80055da <_printf_i+0x6e>
 80055c8:	2a6f      	cmp	r2, #111	; 0x6f
 80055ca:	d02a      	beq.n	8005622 <_printf_i+0xb6>
 80055cc:	2a70      	cmp	r2, #112	; 0x70
 80055ce:	d1e5      	bne.n	800559c <_printf_i+0x30>
 80055d0:	680a      	ldr	r2, [r1, #0]
 80055d2:	f042 0220 	orr.w	r2, r2, #32
 80055d6:	600a      	str	r2, [r1, #0]
 80055d8:	e003      	b.n	80055e2 <_printf_i+0x76>
 80055da:	2a75      	cmp	r2, #117	; 0x75
 80055dc:	d021      	beq.n	8005622 <_printf_i+0xb6>
 80055de:	2a78      	cmp	r2, #120	; 0x78
 80055e0:	d1dc      	bne.n	800559c <_printf_i+0x30>
 80055e2:	2278      	movs	r2, #120	; 0x78
 80055e4:	496f      	ldr	r1, [pc, #444]	; (80057a4 <_printf_i+0x238>)
 80055e6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80055ea:	e064      	b.n	80056b6 <_printf_i+0x14a>
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80055f2:	1d11      	adds	r1, r2, #4
 80055f4:	6019      	str	r1, [r3, #0]
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0a3      	b.n	8005748 <_printf_i+0x1dc>
 8005600:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005604:	f102 0104 	add.w	r1, r2, #4
 8005608:	6019      	str	r1, [r3, #0]
 800560a:	d0d7      	beq.n	80055bc <_printf_i+0x50>
 800560c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da03      	bge.n	800561c <_printf_i+0xb0>
 8005614:	222d      	movs	r2, #45	; 0x2d
 8005616:	425b      	negs	r3, r3
 8005618:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800561c:	4962      	ldr	r1, [pc, #392]	; (80057a8 <_printf_i+0x23c>)
 800561e:	220a      	movs	r2, #10
 8005620:	e017      	b.n	8005652 <_printf_i+0xe6>
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	6819      	ldr	r1, [r3, #0]
 8005626:	f010 0f80 	tst.w	r0, #128	; 0x80
 800562a:	d003      	beq.n	8005634 <_printf_i+0xc8>
 800562c:	1d08      	adds	r0, r1, #4
 800562e:	6018      	str	r0, [r3, #0]
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	e006      	b.n	8005642 <_printf_i+0xd6>
 8005634:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005638:	f101 0004 	add.w	r0, r1, #4
 800563c:	6018      	str	r0, [r3, #0]
 800563e:	d0f7      	beq.n	8005630 <_printf_i+0xc4>
 8005640:	880b      	ldrh	r3, [r1, #0]
 8005642:	2a6f      	cmp	r2, #111	; 0x6f
 8005644:	bf14      	ite	ne
 8005646:	220a      	movne	r2, #10
 8005648:	2208      	moveq	r2, #8
 800564a:	4957      	ldr	r1, [pc, #348]	; (80057a8 <_printf_i+0x23c>)
 800564c:	2000      	movs	r0, #0
 800564e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005652:	6865      	ldr	r5, [r4, #4]
 8005654:	2d00      	cmp	r5, #0
 8005656:	60a5      	str	r5, [r4, #8]
 8005658:	f2c0 809c 	blt.w	8005794 <_printf_i+0x228>
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	f020 0004 	bic.w	r0, r0, #4
 8005662:	6020      	str	r0, [r4, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d13f      	bne.n	80056e8 <_printf_i+0x17c>
 8005668:	2d00      	cmp	r5, #0
 800566a:	f040 8095 	bne.w	8005798 <_printf_i+0x22c>
 800566e:	4675      	mov	r5, lr
 8005670:	2a08      	cmp	r2, #8
 8005672:	d10b      	bne.n	800568c <_printf_i+0x120>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	07da      	lsls	r2, r3, #31
 8005678:	d508      	bpl.n	800568c <_printf_i+0x120>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	6862      	ldr	r2, [r4, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	bfde      	ittt	le
 8005682:	2330      	movle	r3, #48	; 0x30
 8005684:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005688:	f105 35ff 	addle.w	r5, r5, #4294967295
 800568c:	ebae 0305 	sub.w	r3, lr, r5
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	f8cd 8000 	str.w	r8, [sp]
 8005696:	463b      	mov	r3, r7
 8005698:	aa03      	add	r2, sp, #12
 800569a:	4621      	mov	r1, r4
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff feed 	bl	800547c <_printf_common>
 80056a2:	3001      	adds	r0, #1
 80056a4:	d155      	bne.n	8005752 <_printf_i+0x1e6>
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	b005      	add	sp, #20
 80056ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056b0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80056b4:	493c      	ldr	r1, [pc, #240]	; (80057a8 <_printf_i+0x23c>)
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056be:	f100 0504 	add.w	r5, r0, #4
 80056c2:	601d      	str	r5, [r3, #0]
 80056c4:	d001      	beq.n	80056ca <_printf_i+0x15e>
 80056c6:	6803      	ldr	r3, [r0, #0]
 80056c8:	e002      	b.n	80056d0 <_printf_i+0x164>
 80056ca:	0655      	lsls	r5, r2, #25
 80056cc:	d5fb      	bpl.n	80056c6 <_printf_i+0x15a>
 80056ce:	8803      	ldrh	r3, [r0, #0]
 80056d0:	07d0      	lsls	r0, r2, #31
 80056d2:	bf44      	itt	mi
 80056d4:	f042 0220 	orrmi.w	r2, r2, #32
 80056d8:	6022      	strmi	r2, [r4, #0]
 80056da:	b91b      	cbnz	r3, 80056e4 <_printf_i+0x178>
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	f022 0220 	bic.w	r2, r2, #32
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	2210      	movs	r2, #16
 80056e6:	e7b1      	b.n	800564c <_printf_i+0xe0>
 80056e8:	4675      	mov	r5, lr
 80056ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ee:	fb02 3310 	mls	r3, r2, r0, r3
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056f8:	4603      	mov	r3, r0
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d1f5      	bne.n	80056ea <_printf_i+0x17e>
 80056fe:	e7b7      	b.n	8005670 <_printf_i+0x104>
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005708:	6949      	ldr	r1, [r1, #20]
 800570a:	d004      	beq.n	8005716 <_printf_i+0x1aa>
 800570c:	1d10      	adds	r0, r2, #4
 800570e:	6018      	str	r0, [r3, #0]
 8005710:	6813      	ldr	r3, [r2, #0]
 8005712:	6019      	str	r1, [r3, #0]
 8005714:	e007      	b.n	8005726 <_printf_i+0x1ba>
 8005716:	f010 0f40 	tst.w	r0, #64	; 0x40
 800571a:	f102 0004 	add.w	r0, r2, #4
 800571e:	6018      	str	r0, [r3, #0]
 8005720:	6813      	ldr	r3, [r2, #0]
 8005722:	d0f6      	beq.n	8005712 <_printf_i+0x1a6>
 8005724:	8019      	strh	r1, [r3, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	4675      	mov	r5, lr
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	e7b1      	b.n	8005692 <_printf_i+0x126>
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	1d11      	adds	r1, r2, #4
 8005732:	6019      	str	r1, [r3, #0]
 8005734:	6815      	ldr	r5, [r2, #0]
 8005736:	2100      	movs	r1, #0
 8005738:	6862      	ldr	r2, [r4, #4]
 800573a:	4628      	mov	r0, r5
 800573c:	f000 fa94 	bl	8005c68 <memchr>
 8005740:	b108      	cbz	r0, 8005746 <_printf_i+0x1da>
 8005742:	1b40      	subs	r0, r0, r5
 8005744:	6060      	str	r0, [r4, #4]
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	2300      	movs	r3, #0
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005750:	e79f      	b.n	8005692 <_printf_i+0x126>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	462a      	mov	r2, r5
 8005756:	4639      	mov	r1, r7
 8005758:	4630      	mov	r0, r6
 800575a:	47c0      	blx	r8
 800575c:	3001      	adds	r0, #1
 800575e:	d0a2      	beq.n	80056a6 <_printf_i+0x13a>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	079b      	lsls	r3, r3, #30
 8005764:	d507      	bpl.n	8005776 <_printf_i+0x20a>
 8005766:	2500      	movs	r5, #0
 8005768:	f104 0919 	add.w	r9, r4, #25
 800576c:	68e3      	ldr	r3, [r4, #12]
 800576e:	9a03      	ldr	r2, [sp, #12]
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	429d      	cmp	r5, r3
 8005774:	db05      	blt.n	8005782 <_printf_i+0x216>
 8005776:	68e0      	ldr	r0, [r4, #12]
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	4298      	cmp	r0, r3
 800577c:	bfb8      	it	lt
 800577e:	4618      	movlt	r0, r3
 8005780:	e793      	b.n	80056aa <_printf_i+0x13e>
 8005782:	2301      	movs	r3, #1
 8005784:	464a      	mov	r2, r9
 8005786:	4639      	mov	r1, r7
 8005788:	4630      	mov	r0, r6
 800578a:	47c0      	blx	r8
 800578c:	3001      	adds	r0, #1
 800578e:	d08a      	beq.n	80056a6 <_printf_i+0x13a>
 8005790:	3501      	adds	r5, #1
 8005792:	e7eb      	b.n	800576c <_printf_i+0x200>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1a7      	bne.n	80056e8 <_printf_i+0x17c>
 8005798:	780b      	ldrb	r3, [r1, #0]
 800579a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800579e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a2:	e765      	b.n	8005670 <_printf_i+0x104>
 80057a4:	08005e6a 	.word	0x08005e6a
 80057a8:	08005e59 	.word	0x08005e59

080057ac <_sbrk_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	2300      	movs	r3, #0
 80057b0:	4c05      	ldr	r4, [pc, #20]	; (80057c8 <_sbrk_r+0x1c>)
 80057b2:	4605      	mov	r5, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	f7ff faee 	bl	8004d98 <_sbrk>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_sbrk_r+0x1a>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_sbrk_r+0x1a>
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	20000220 	.word	0x20000220

080057cc <__sread>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	460c      	mov	r4, r1
 80057d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d4:	f000 faa4 	bl	8005d20 <_read_r>
 80057d8:	2800      	cmp	r0, #0
 80057da:	bfab      	itete	ge
 80057dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057de:	89a3      	ldrhlt	r3, [r4, #12]
 80057e0:	181b      	addge	r3, r3, r0
 80057e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057e6:	bfac      	ite	ge
 80057e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ea:	81a3      	strhlt	r3, [r4, #12]
 80057ec:	bd10      	pop	{r4, pc}

080057ee <__swrite>:
 80057ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f2:	461f      	mov	r7, r3
 80057f4:	898b      	ldrh	r3, [r1, #12]
 80057f6:	4605      	mov	r5, r0
 80057f8:	05db      	lsls	r3, r3, #23
 80057fa:	460c      	mov	r4, r1
 80057fc:	4616      	mov	r6, r2
 80057fe:	d505      	bpl.n	800580c <__swrite+0x1e>
 8005800:	2302      	movs	r3, #2
 8005802:	2200      	movs	r2, #0
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	f000 f9b8 	bl	8005b7c <_lseek_r>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	4632      	mov	r2, r6
 8005810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800581a:	463b      	mov	r3, r7
 800581c:	4628      	mov	r0, r5
 800581e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	f000 b869 	b.w	80058f8 <_write_r>

08005826 <__sseek>:
 8005826:	b510      	push	{r4, lr}
 8005828:	460c      	mov	r4, r1
 800582a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582e:	f000 f9a5 	bl	8005b7c <_lseek_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	bf15      	itete	ne
 8005838:	6560      	strne	r0, [r4, #84]	; 0x54
 800583a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800583e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005842:	81a3      	strheq	r3, [r4, #12]
 8005844:	bf18      	it	ne
 8005846:	81a3      	strhne	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__sclose>:
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 b8d3 	b.w	80059f8 <_close_r>
	...

08005854 <__swbuf_r>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	460e      	mov	r6, r1
 8005858:	4614      	mov	r4, r2
 800585a:	4605      	mov	r5, r0
 800585c:	b118      	cbz	r0, 8005866 <__swbuf_r+0x12>
 800585e:	6983      	ldr	r3, [r0, #24]
 8005860:	b90b      	cbnz	r3, 8005866 <__swbuf_r+0x12>
 8005862:	f7ff fbe5 	bl	8005030 <__sinit>
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <__swbuf_r+0x98>)
 8005868:	429c      	cmp	r4, r3
 800586a:	d12a      	bne.n	80058c2 <__swbuf_r+0x6e>
 800586c:	686c      	ldr	r4, [r5, #4]
 800586e:	69a3      	ldr	r3, [r4, #24]
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	071a      	lsls	r2, r3, #28
 8005876:	d52e      	bpl.n	80058d6 <__swbuf_r+0x82>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	b363      	cbz	r3, 80058d6 <__swbuf_r+0x82>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	b2f6      	uxtb	r6, r6
 8005882:	1ac0      	subs	r0, r0, r3
 8005884:	6963      	ldr	r3, [r4, #20]
 8005886:	4637      	mov	r7, r6
 8005888:	4298      	cmp	r0, r3
 800588a:	db04      	blt.n	8005896 <__swbuf_r+0x42>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f94a 	bl	8005b28 <_fflush_r>
 8005894:	bb28      	cbnz	r0, 80058e2 <__swbuf_r+0x8e>
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	3001      	adds	r0, #1
 800589a:	3b01      	subs	r3, #1
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	6022      	str	r2, [r4, #0]
 80058a4:	701e      	strb	r6, [r3, #0]
 80058a6:	6963      	ldr	r3, [r4, #20]
 80058a8:	4298      	cmp	r0, r3
 80058aa:	d004      	beq.n	80058b6 <__swbuf_r+0x62>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d519      	bpl.n	80058e6 <__swbuf_r+0x92>
 80058b2:	2e0a      	cmp	r6, #10
 80058b4:	d117      	bne.n	80058e6 <__swbuf_r+0x92>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f935 	bl	8005b28 <_fflush_r>
 80058be:	b190      	cbz	r0, 80058e6 <__swbuf_r+0x92>
 80058c0:	e00f      	b.n	80058e2 <__swbuf_r+0x8e>
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <__swbuf_r+0x9c>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d101      	bne.n	80058cc <__swbuf_r+0x78>
 80058c8:	68ac      	ldr	r4, [r5, #8]
 80058ca:	e7d0      	b.n	800586e <__swbuf_r+0x1a>
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <__swbuf_r+0xa0>)
 80058ce:	429c      	cmp	r4, r3
 80058d0:	bf08      	it	eq
 80058d2:	68ec      	ldreq	r4, [r5, #12]
 80058d4:	e7cb      	b.n	800586e <__swbuf_r+0x1a>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f81f 	bl	800591c <__swsetup_r>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0cc      	beq.n	800587c <__swbuf_r+0x28>
 80058e2:	f04f 37ff 	mov.w	r7, #4294967295
 80058e6:	4638      	mov	r0, r7
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ea:	bf00      	nop
 80058ec:	08005e08 	.word	0x08005e08
 80058f0:	08005e28 	.word	0x08005e28
 80058f4:	08005de8 	.word	0x08005de8

080058f8 <_write_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4605      	mov	r5, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	2200      	movs	r2, #0
 8005902:	4c05      	ldr	r4, [pc, #20]	; (8005918 <_write_r+0x20>)
 8005904:	6022      	str	r2, [r4, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	f7ff fa29 	bl	8004d5e <_write>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_write_r+0x1e>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	b103      	cbz	r3, 8005916 <_write_r+0x1e>
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000220 	.word	0x20000220

0800591c <__swsetup_r>:
 800591c:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <__swsetup_r+0xcc>)
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	4606      	mov	r6, r0
 8005924:	460c      	mov	r4, r1
 8005926:	b125      	cbz	r5, 8005932 <__swsetup_r+0x16>
 8005928:	69ab      	ldr	r3, [r5, #24]
 800592a:	b913      	cbnz	r3, 8005932 <__swsetup_r+0x16>
 800592c:	4628      	mov	r0, r5
 800592e:	f7ff fb7f 	bl	8005030 <__sinit>
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <__swsetup_r+0xd0>)
 8005934:	429c      	cmp	r4, r3
 8005936:	d10f      	bne.n	8005958 <__swsetup_r+0x3c>
 8005938:	686c      	ldr	r4, [r5, #4]
 800593a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593e:	b29a      	uxth	r2, r3
 8005940:	0715      	lsls	r5, r2, #28
 8005942:	d42c      	bmi.n	800599e <__swsetup_r+0x82>
 8005944:	06d0      	lsls	r0, r2, #27
 8005946:	d411      	bmi.n	800596c <__swsetup_r+0x50>
 8005948:	2209      	movs	r2, #9
 800594a:	6032      	str	r2, [r6, #0]
 800594c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <__swsetup_r+0xd4>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <__swsetup_r+0x46>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7eb      	b.n	800593a <__swsetup_r+0x1e>
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <__swsetup_r+0xd8>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7e6      	b.n	800593a <__swsetup_r+0x1e>
 800596c:	0751      	lsls	r1, r2, #29
 800596e:	d512      	bpl.n	8005996 <__swsetup_r+0x7a>
 8005970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005972:	b141      	cbz	r1, 8005986 <__swsetup_r+0x6a>
 8005974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005978:	4299      	cmp	r1, r3
 800597a:	d002      	beq.n	8005982 <__swsetup_r+0x66>
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f983 	bl	8005c88 <_free_r>
 8005982:	2300      	movs	r3, #0
 8005984:	6363      	str	r3, [r4, #52]	; 0x34
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	2300      	movs	r3, #0
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	f043 0308 	orr.w	r3, r3, #8
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	b94b      	cbnz	r3, 80059b6 <__swsetup_r+0x9a>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ac:	d003      	beq.n	80059b6 <__swsetup_r+0x9a>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f919 	bl	8005be8 <__smakebuf_r>
 80059b6:	89a2      	ldrh	r2, [r4, #12]
 80059b8:	f012 0301 	ands.w	r3, r2, #1
 80059bc:	d00c      	beq.n	80059d8 <__swsetup_r+0xbc>
 80059be:	2300      	movs	r3, #0
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	6963      	ldr	r3, [r4, #20]
 80059c4:	425b      	negs	r3, r3
 80059c6:	61a3      	str	r3, [r4, #24]
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	b953      	cbnz	r3, 80059e2 <__swsetup_r+0xc6>
 80059cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059d4:	d1ba      	bne.n	800594c <__swsetup_r+0x30>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	0792      	lsls	r2, r2, #30
 80059da:	bf58      	it	pl
 80059dc:	6963      	ldrpl	r3, [r4, #20]
 80059de:	60a3      	str	r3, [r4, #8]
 80059e0:	e7f2      	b.n	80059c8 <__swsetup_r+0xac>
 80059e2:	2000      	movs	r0, #0
 80059e4:	e7f7      	b.n	80059d6 <__swsetup_r+0xba>
 80059e6:	bf00      	nop
 80059e8:	20000014 	.word	0x20000014
 80059ec:	08005e08 	.word	0x08005e08
 80059f0:	08005e28 	.word	0x08005e28
 80059f4:	08005de8 	.word	0x08005de8

080059f8 <_close_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	2300      	movs	r3, #0
 80059fc:	4c05      	ldr	r4, [pc, #20]	; (8005a14 <_close_r+0x1c>)
 80059fe:	4605      	mov	r5, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	f7ff f9f4 	bl	8004df0 <_close>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_close_r+0x1a>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_close_r+0x1a>
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20000220 	.word	0x20000220

08005a18 <__sflush_r>:
 8005a18:	898a      	ldrh	r2, [r1, #12]
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	0710      	lsls	r0, r2, #28
 8005a22:	460c      	mov	r4, r1
 8005a24:	d45a      	bmi.n	8005adc <__sflush_r+0xc4>
 8005a26:	684b      	ldr	r3, [r1, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dc05      	bgt.n	8005a38 <__sflush_r+0x20>
 8005a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dc02      	bgt.n	8005a38 <__sflush_r+0x20>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	d0f9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a44:	682f      	ldr	r7, [r5, #0]
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	d033      	beq.n	8005ab2 <__sflush_r+0x9a>
 8005a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	075a      	lsls	r2, r3, #29
 8005a50:	d505      	bpl.n	8005a5e <__sflush_r+0x46>
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	1ac0      	subs	r0, r0, r3
 8005a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a58:	b10b      	cbz	r3, 8005a5e <__sflush_r+0x46>
 8005a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a5c:	1ac0      	subs	r0, r0, r3
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4602      	mov	r2, r0
 8005a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a64:	6a21      	ldr	r1, [r4, #32]
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b0      	blx	r6
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	d106      	bne.n	8005a7e <__sflush_r+0x66>
 8005a70:	6829      	ldr	r1, [r5, #0]
 8005a72:	291d      	cmp	r1, #29
 8005a74:	d84b      	bhi.n	8005b0e <__sflush_r+0xf6>
 8005a76:	4a2b      	ldr	r2, [pc, #172]	; (8005b24 <__sflush_r+0x10c>)
 8005a78:	40ca      	lsrs	r2, r1
 8005a7a:	07d6      	lsls	r6, r2, #31
 8005a7c:	d547      	bpl.n	8005b0e <__sflush_r+0xf6>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	6062      	str	r2, [r4, #4]
 8005a82:	6922      	ldr	r2, [r4, #16]
 8005a84:	04d9      	lsls	r1, r3, #19
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	d504      	bpl.n	8005a94 <__sflush_r+0x7c>
 8005a8a:	1c42      	adds	r2, r0, #1
 8005a8c:	d101      	bne.n	8005a92 <__sflush_r+0x7a>
 8005a8e:	682b      	ldr	r3, [r5, #0]
 8005a90:	b903      	cbnz	r3, 8005a94 <__sflush_r+0x7c>
 8005a92:	6560      	str	r0, [r4, #84]	; 0x54
 8005a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a96:	602f      	str	r7, [r5, #0]
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	d0ca      	beq.n	8005a32 <__sflush_r+0x1a>
 8005a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aa0:	4299      	cmp	r1, r3
 8005aa2:	d002      	beq.n	8005aaa <__sflush_r+0x92>
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f8ef 	bl	8005c88 <_free_r>
 8005aaa:	2000      	movs	r0, #0
 8005aac:	6360      	str	r0, [r4, #52]	; 0x34
 8005aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab2:	6a21      	ldr	r1, [r4, #32]
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b0      	blx	r6
 8005aba:	1c41      	adds	r1, r0, #1
 8005abc:	d1c6      	bne.n	8005a4c <__sflush_r+0x34>
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0c3      	beq.n	8005a4c <__sflush_r+0x34>
 8005ac4:	2b1d      	cmp	r3, #29
 8005ac6:	d001      	beq.n	8005acc <__sflush_r+0xb4>
 8005ac8:	2b16      	cmp	r3, #22
 8005aca:	d101      	bne.n	8005ad0 <__sflush_r+0xb8>
 8005acc:	602f      	str	r7, [r5, #0]
 8005ace:	e7b0      	b.n	8005a32 <__sflush_r+0x1a>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005adc:	690f      	ldr	r7, [r1, #16]
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	d0a7      	beq.n	8005a32 <__sflush_r+0x1a>
 8005ae2:	0793      	lsls	r3, r2, #30
 8005ae4:	bf18      	it	ne
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	680e      	ldr	r6, [r1, #0]
 8005aea:	bf08      	it	eq
 8005aec:	694b      	ldreq	r3, [r1, #20]
 8005aee:	eba6 0807 	sub.w	r8, r6, r7
 8005af2:	600f      	str	r7, [r1, #0]
 8005af4:	608b      	str	r3, [r1, #8]
 8005af6:	f1b8 0f00 	cmp.w	r8, #0
 8005afa:	dd9a      	ble.n	8005a32 <__sflush_r+0x1a>
 8005afc:	4643      	mov	r3, r8
 8005afe:	463a      	mov	r2, r7
 8005b00:	6a21      	ldr	r1, [r4, #32]
 8005b02:	4628      	mov	r0, r5
 8005b04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b06:	47b0      	blx	r6
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	dc07      	bgt.n	8005b1c <__sflush_r+0x104>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b12:	81a3      	strh	r3, [r4, #12]
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	4407      	add	r7, r0
 8005b1e:	eba8 0800 	sub.w	r8, r8, r0
 8005b22:	e7e8      	b.n	8005af6 <__sflush_r+0xde>
 8005b24:	20400001 	.word	0x20400001

08005b28 <_fflush_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	690b      	ldr	r3, [r1, #16]
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	b1db      	cbz	r3, 8005b6a <_fflush_r+0x42>
 8005b32:	b118      	cbz	r0, 8005b3c <_fflush_r+0x14>
 8005b34:	6983      	ldr	r3, [r0, #24]
 8005b36:	b90b      	cbnz	r3, 8005b3c <_fflush_r+0x14>
 8005b38:	f7ff fa7a 	bl	8005030 <__sinit>
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <_fflush_r+0x48>)
 8005b3e:	429c      	cmp	r4, r3
 8005b40:	d109      	bne.n	8005b56 <_fflush_r+0x2e>
 8005b42:	686c      	ldr	r4, [r5, #4]
 8005b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b48:	b17b      	cbz	r3, 8005b6a <_fflush_r+0x42>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b52:	f7ff bf61 	b.w	8005a18 <__sflush_r>
 8005b56:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <_fflush_r+0x4c>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	d101      	bne.n	8005b60 <_fflush_r+0x38>
 8005b5c:	68ac      	ldr	r4, [r5, #8]
 8005b5e:	e7f1      	b.n	8005b44 <_fflush_r+0x1c>
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <_fflush_r+0x50>)
 8005b62:	429c      	cmp	r4, r3
 8005b64:	bf08      	it	eq
 8005b66:	68ec      	ldreq	r4, [r5, #12]
 8005b68:	e7ec      	b.n	8005b44 <_fflush_r+0x1c>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	bd38      	pop	{r3, r4, r5, pc}
 8005b6e:	bf00      	nop
 8005b70:	08005e08 	.word	0x08005e08
 8005b74:	08005e28 	.word	0x08005e28
 8005b78:	08005de8 	.word	0x08005de8

08005b7c <_lseek_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4605      	mov	r5, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	2200      	movs	r2, #0
 8005b86:	4c05      	ldr	r4, [pc, #20]	; (8005b9c <_lseek_r+0x20>)
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f7ff f954 	bl	8004e38 <_lseek>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d102      	bne.n	8005b9a <_lseek_r+0x1e>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	b103      	cbz	r3, 8005b9a <_lseek_r+0x1e>
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	20000220 	.word	0x20000220

08005ba0 <__swhatbuf_r>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	460e      	mov	r6, r1
 8005ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba8:	b090      	sub	sp, #64	; 0x40
 8005baa:	2900      	cmp	r1, #0
 8005bac:	4614      	mov	r4, r2
 8005bae:	461d      	mov	r5, r3
 8005bb0:	da07      	bge.n	8005bc2 <__swhatbuf_r+0x22>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	89b3      	ldrh	r3, [r6, #12]
 8005bb8:	061a      	lsls	r2, r3, #24
 8005bba:	d410      	bmi.n	8005bde <__swhatbuf_r+0x3e>
 8005bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bc0:	e00e      	b.n	8005be0 <__swhatbuf_r+0x40>
 8005bc2:	aa01      	add	r2, sp, #4
 8005bc4:	f000 f8be 	bl	8005d44 <_fstat_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dbf2      	blt.n	8005bb2 <__swhatbuf_r+0x12>
 8005bcc:	9a02      	ldr	r2, [sp, #8]
 8005bce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bd6:	425a      	negs	r2, r3
 8005bd8:	415a      	adcs	r2, r3
 8005bda:	602a      	str	r2, [r5, #0]
 8005bdc:	e7ee      	b.n	8005bbc <__swhatbuf_r+0x1c>
 8005bde:	2340      	movs	r3, #64	; 0x40
 8005be0:	2000      	movs	r0, #0
 8005be2:	6023      	str	r3, [r4, #0]
 8005be4:	b010      	add	sp, #64	; 0x40
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <__smakebuf_r>:
 8005be8:	898b      	ldrh	r3, [r1, #12]
 8005bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bec:	079d      	lsls	r5, r3, #30
 8005bee:	4606      	mov	r6, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	d507      	bpl.n	8005c04 <__smakebuf_r+0x1c>
 8005bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	6163      	str	r3, [r4, #20]
 8005c00:	b002      	add	sp, #8
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	ab01      	add	r3, sp, #4
 8005c06:	466a      	mov	r2, sp
 8005c08:	f7ff ffca 	bl	8005ba0 <__swhatbuf_r>
 8005c0c:	9900      	ldr	r1, [sp, #0]
 8005c0e:	4605      	mov	r5, r0
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7ff fa97 	bl	8005144 <_malloc_r>
 8005c16:	b948      	cbnz	r0, 8005c2c <__smakebuf_r+0x44>
 8005c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d4ef      	bmi.n	8005c00 <__smakebuf_r+0x18>
 8005c20:	f023 0303 	bic.w	r3, r3, #3
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	e7e3      	b.n	8005bf4 <__smakebuf_r+0xc>
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <__smakebuf_r+0x7c>)
 8005c2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	6020      	str	r0, [r4, #0]
 8005c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	9b00      	ldr	r3, [sp, #0]
 8005c3c:	6120      	str	r0, [r4, #16]
 8005c3e:	6163      	str	r3, [r4, #20]
 8005c40:	9b01      	ldr	r3, [sp, #4]
 8005c42:	b15b      	cbz	r3, 8005c5c <__smakebuf_r+0x74>
 8005c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f88d 	bl	8005d68 <_isatty_r>
 8005c4e:	b128      	cbz	r0, 8005c5c <__smakebuf_r+0x74>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	431d      	orrs	r5, r3
 8005c60:	81a5      	strh	r5, [r4, #12]
 8005c62:	e7cd      	b.n	8005c00 <__smakebuf_r+0x18>
 8005c64:	08004fb1 	.word	0x08004fb1

08005c68 <memchr>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	b2c9      	uxtb	r1, r1
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4290      	cmp	r0, r2
 8005c70:	4603      	mov	r3, r0
 8005c72:	d101      	bne.n	8005c78 <memchr+0x10>
 8005c74:	2000      	movs	r0, #0
 8005c76:	bd10      	pop	{r4, pc}
 8005c78:	781c      	ldrb	r4, [r3, #0]
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	428c      	cmp	r4, r1
 8005c7e:	d1f6      	bne.n	8005c6e <memchr+0x6>
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd10      	pop	{r4, pc}

08005c84 <__malloc_lock>:
 8005c84:	4770      	bx	lr

08005c86 <__malloc_unlock>:
 8005c86:	4770      	bx	lr

08005c88 <_free_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	d043      	beq.n	8005d18 <_free_r+0x90>
 8005c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c94:	1f0c      	subs	r4, r1, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bfb8      	it	lt
 8005c9a:	18e4      	addlt	r4, r4, r3
 8005c9c:	f7ff fff2 	bl	8005c84 <__malloc_lock>
 8005ca0:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <_free_r+0x94>)
 8005ca2:	6813      	ldr	r3, [r2, #0]
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	b933      	cbnz	r3, 8005cb6 <_free_r+0x2e>
 8005ca8:	6063      	str	r3, [r4, #4]
 8005caa:	6014      	str	r4, [r2, #0]
 8005cac:	4628      	mov	r0, r5
 8005cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb2:	f7ff bfe8 	b.w	8005c86 <__malloc_unlock>
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	d90b      	bls.n	8005cd2 <_free_r+0x4a>
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	1862      	adds	r2, r4, r1
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	bf01      	itttt	eq
 8005cc2:	681a      	ldreq	r2, [r3, #0]
 8005cc4:	685b      	ldreq	r3, [r3, #4]
 8005cc6:	1852      	addeq	r2, r2, r1
 8005cc8:	6022      	streq	r2, [r4, #0]
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	6004      	str	r4, [r0, #0]
 8005cce:	e7ed      	b.n	8005cac <_free_r+0x24>
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	b10a      	cbz	r2, 8005cda <_free_r+0x52>
 8005cd6:	42a2      	cmp	r2, r4
 8005cd8:	d9fa      	bls.n	8005cd0 <_free_r+0x48>
 8005cda:	6819      	ldr	r1, [r3, #0]
 8005cdc:	1858      	adds	r0, r3, r1
 8005cde:	42a0      	cmp	r0, r4
 8005ce0:	d10b      	bne.n	8005cfa <_free_r+0x72>
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	4401      	add	r1, r0
 8005ce6:	1858      	adds	r0, r3, r1
 8005ce8:	4282      	cmp	r2, r0
 8005cea:	6019      	str	r1, [r3, #0]
 8005cec:	d1de      	bne.n	8005cac <_free_r+0x24>
 8005cee:	6810      	ldr	r0, [r2, #0]
 8005cf0:	6852      	ldr	r2, [r2, #4]
 8005cf2:	4401      	add	r1, r0
 8005cf4:	6019      	str	r1, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	e7d8      	b.n	8005cac <_free_r+0x24>
 8005cfa:	d902      	bls.n	8005d02 <_free_r+0x7a>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	e7d4      	b.n	8005cac <_free_r+0x24>
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	1821      	adds	r1, r4, r0
 8005d06:	428a      	cmp	r2, r1
 8005d08:	bf01      	itttt	eq
 8005d0a:	6811      	ldreq	r1, [r2, #0]
 8005d0c:	6852      	ldreq	r2, [r2, #4]
 8005d0e:	1809      	addeq	r1, r1, r0
 8005d10:	6021      	streq	r1, [r4, #0]
 8005d12:	6062      	str	r2, [r4, #4]
 8005d14:	605c      	str	r4, [r3, #4]
 8005d16:	e7c9      	b.n	8005cac <_free_r+0x24>
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	200000b4 	.word	0x200000b4

08005d20 <_read_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4c05      	ldr	r4, [pc, #20]	; (8005d40 <_read_r+0x20>)
 8005d2c:	6022      	str	r2, [r4, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7fe fff8 	bl	8004d24 <_read>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_read_r+0x1e>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_read_r+0x1e>
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	20000220 	.word	0x20000220

08005d44 <_fstat_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	2300      	movs	r3, #0
 8005d48:	4c06      	ldr	r4, [pc, #24]	; (8005d64 <_fstat_r+0x20>)
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	f7ff f858 	bl	8004e06 <_fstat>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d102      	bne.n	8005d60 <_fstat_r+0x1c>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	b103      	cbz	r3, 8005d60 <_fstat_r+0x1c>
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	bf00      	nop
 8005d64:	20000220 	.word	0x20000220

08005d68 <_isatty_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	4c05      	ldr	r4, [pc, #20]	; (8005d84 <_isatty_r+0x1c>)
 8005d6e:	4605      	mov	r5, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	f7ff f856 	bl	8004e24 <_isatty>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_isatty_r+0x1a>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_isatty_r+0x1a>
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20000220 	.word	0x20000220

08005d88 <_init>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr

08005d94 <_fini>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr
